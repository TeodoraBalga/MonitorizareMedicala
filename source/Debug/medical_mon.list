
medical_mon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fe0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08007120  08007120  00008120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800730c  0800730c  0000830c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007314  08007314  00008314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007318  08007318  00008318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000a0  20000008  0800731c  00009008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004c74  200000a8  080073bc  000090a8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20004d1c  080073bc  00009d1c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001eb08  00000000  00000000  000090d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f2c  00000000  00000000  00027be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c60  00000000  00000000  0002bb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000015dd  00000000  00000000  0002d770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000050f7  00000000  00000000  0002ed4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cecc  00000000  00000000  00033e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000c9413  00000000  00000000  00050d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0011a123  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007e10  00000000  00000000  0011a168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  00121f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000a8 	.word	0x200000a8
 800015c:	00000000 	.word	0x00000000
 8000160:	08007108 	.word	0x08007108

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000ac 	.word	0x200000ac
 800017c:	08007108 	.word	0x08007108

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b96a 	b.w	800046c <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9d08      	ldr	r5, [sp, #32]
 80001b6:	460c      	mov	r4, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14e      	bne.n	800025a <__udivmoddi4+0xaa>
 80001bc:	4694      	mov	ip, r2
 80001be:	458c      	cmp	ip, r1
 80001c0:	4686      	mov	lr, r0
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	d962      	bls.n	800028e <__udivmoddi4+0xde>
 80001c8:	b14a      	cbz	r2, 80001de <__udivmoddi4+0x2e>
 80001ca:	f1c2 0320 	rsb	r3, r2, #32
 80001ce:	4091      	lsls	r1, r2
 80001d0:	fa20 f303 	lsr.w	r3, r0, r3
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	4319      	orrs	r1, r3
 80001da:	fa00 fe02 	lsl.w	lr, r0, r2
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fa1f f68c 	uxth.w	r6, ip
 80001e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80001ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001ee:	fb07 1114 	mls	r1, r7, r4, r1
 80001f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f6:	fb04 f106 	mul.w	r1, r4, r6
 80001fa:	4299      	cmp	r1, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x64>
 80001fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000202:	f104 30ff 	add.w	r0, r4, #4294967295
 8000206:	f080 8112 	bcs.w	800042e <__udivmoddi4+0x27e>
 800020a:	4299      	cmp	r1, r3
 800020c:	f240 810f 	bls.w	800042e <__udivmoddi4+0x27e>
 8000210:	3c02      	subs	r4, #2
 8000212:	4463      	add	r3, ip
 8000214:	1a59      	subs	r1, r3, r1
 8000216:	fa1f f38e 	uxth.w	r3, lr
 800021a:	fbb1 f0f7 	udiv	r0, r1, r7
 800021e:	fb07 1110 	mls	r1, r7, r0, r1
 8000222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000226:	fb00 f606 	mul.w	r6, r0, r6
 800022a:	429e      	cmp	r6, r3
 800022c:	d90a      	bls.n	8000244 <__udivmoddi4+0x94>
 800022e:	eb1c 0303 	adds.w	r3, ip, r3
 8000232:	f100 31ff 	add.w	r1, r0, #4294967295
 8000236:	f080 80fc 	bcs.w	8000432 <__udivmoddi4+0x282>
 800023a:	429e      	cmp	r6, r3
 800023c:	f240 80f9 	bls.w	8000432 <__udivmoddi4+0x282>
 8000240:	4463      	add	r3, ip
 8000242:	3802      	subs	r0, #2
 8000244:	1b9b      	subs	r3, r3, r6
 8000246:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800024a:	2100      	movs	r1, #0
 800024c:	b11d      	cbz	r5, 8000256 <__udivmoddi4+0xa6>
 800024e:	40d3      	lsrs	r3, r2
 8000250:	2200      	movs	r2, #0
 8000252:	e9c5 3200 	strd	r3, r2, [r5]
 8000256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025a:	428b      	cmp	r3, r1
 800025c:	d905      	bls.n	800026a <__udivmoddi4+0xba>
 800025e:	b10d      	cbz	r5, 8000264 <__udivmoddi4+0xb4>
 8000260:	e9c5 0100 	strd	r0, r1, [r5]
 8000264:	2100      	movs	r1, #0
 8000266:	4608      	mov	r0, r1
 8000268:	e7f5      	b.n	8000256 <__udivmoddi4+0xa6>
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d146      	bne.n	8000300 <__udivmoddi4+0x150>
 8000272:	42a3      	cmp	r3, r4
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xcc>
 8000276:	4290      	cmp	r0, r2
 8000278:	f0c0 80f0 	bcc.w	800045c <__udivmoddi4+0x2ac>
 800027c:	1a86      	subs	r6, r0, r2
 800027e:	eb64 0303 	sbc.w	r3, r4, r3
 8000282:	2001      	movs	r0, #1
 8000284:	2d00      	cmp	r5, #0
 8000286:	d0e6      	beq.n	8000256 <__udivmoddi4+0xa6>
 8000288:	e9c5 6300 	strd	r6, r3, [r5]
 800028c:	e7e3      	b.n	8000256 <__udivmoddi4+0xa6>
 800028e:	2a00      	cmp	r2, #0
 8000290:	f040 8090 	bne.w	80003b4 <__udivmoddi4+0x204>
 8000294:	eba1 040c 	sub.w	r4, r1, ip
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	fa1f f78c 	uxth.w	r7, ip
 80002a0:	2101      	movs	r1, #1
 80002a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002aa:	fb08 4416 	mls	r4, r8, r6, r4
 80002ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002b2:	fb07 f006 	mul.w	r0, r7, r6
 80002b6:	4298      	cmp	r0, r3
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0x11c>
 80002ba:	eb1c 0303 	adds.w	r3, ip, r3
 80002be:	f106 34ff 	add.w	r4, r6, #4294967295
 80002c2:	d202      	bcs.n	80002ca <__udivmoddi4+0x11a>
 80002c4:	4298      	cmp	r0, r3
 80002c6:	f200 80cd 	bhi.w	8000464 <__udivmoddi4+0x2b4>
 80002ca:	4626      	mov	r6, r4
 80002cc:	1a1c      	subs	r4, r3, r0
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80002d6:	fb08 4410 	mls	r4, r8, r0, r4
 80002da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002de:	fb00 f707 	mul.w	r7, r0, r7
 80002e2:	429f      	cmp	r7, r3
 80002e4:	d908      	bls.n	80002f8 <__udivmoddi4+0x148>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0x146>
 80002f0:	429f      	cmp	r7, r3
 80002f2:	f200 80b0 	bhi.w	8000456 <__udivmoddi4+0x2a6>
 80002f6:	4620      	mov	r0, r4
 80002f8:	1bdb      	subs	r3, r3, r7
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	e7a5      	b.n	800024c <__udivmoddi4+0x9c>
 8000300:	f1c1 0620 	rsb	r6, r1, #32
 8000304:	408b      	lsls	r3, r1
 8000306:	fa22 f706 	lsr.w	r7, r2, r6
 800030a:	431f      	orrs	r7, r3
 800030c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000310:	fa04 f301 	lsl.w	r3, r4, r1
 8000314:	ea43 030c 	orr.w	r3, r3, ip
 8000318:	40f4      	lsrs	r4, r6
 800031a:	fa00 f801 	lsl.w	r8, r0, r1
 800031e:	0c38      	lsrs	r0, r7, #16
 8000320:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000324:	fbb4 fef0 	udiv	lr, r4, r0
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	fb00 441e 	mls	r4, r0, lr, r4
 8000330:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000334:	fb0e f90c 	mul.w	r9, lr, ip
 8000338:	45a1      	cmp	r9, r4
 800033a:	fa02 f201 	lsl.w	r2, r2, r1
 800033e:	d90a      	bls.n	8000356 <__udivmoddi4+0x1a6>
 8000340:	193c      	adds	r4, r7, r4
 8000342:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000346:	f080 8084 	bcs.w	8000452 <__udivmoddi4+0x2a2>
 800034a:	45a1      	cmp	r9, r4
 800034c:	f240 8081 	bls.w	8000452 <__udivmoddi4+0x2a2>
 8000350:	f1ae 0e02 	sub.w	lr, lr, #2
 8000354:	443c      	add	r4, r7
 8000356:	eba4 0409 	sub.w	r4, r4, r9
 800035a:	fa1f f983 	uxth.w	r9, r3
 800035e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000362:	fb00 4413 	mls	r4, r0, r3, r4
 8000366:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800036a:	fb03 fc0c 	mul.w	ip, r3, ip
 800036e:	45a4      	cmp	ip, r4
 8000370:	d907      	bls.n	8000382 <__udivmoddi4+0x1d2>
 8000372:	193c      	adds	r4, r7, r4
 8000374:	f103 30ff 	add.w	r0, r3, #4294967295
 8000378:	d267      	bcs.n	800044a <__udivmoddi4+0x29a>
 800037a:	45a4      	cmp	ip, r4
 800037c:	d965      	bls.n	800044a <__udivmoddi4+0x29a>
 800037e:	3b02      	subs	r3, #2
 8000380:	443c      	add	r4, r7
 8000382:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000386:	fba0 9302 	umull	r9, r3, r0, r2
 800038a:	eba4 040c 	sub.w	r4, r4, ip
 800038e:	429c      	cmp	r4, r3
 8000390:	46ce      	mov	lr, r9
 8000392:	469c      	mov	ip, r3
 8000394:	d351      	bcc.n	800043a <__udivmoddi4+0x28a>
 8000396:	d04e      	beq.n	8000436 <__udivmoddi4+0x286>
 8000398:	b155      	cbz	r5, 80003b0 <__udivmoddi4+0x200>
 800039a:	ebb8 030e 	subs.w	r3, r8, lr
 800039e:	eb64 040c 	sbc.w	r4, r4, ip
 80003a2:	fa04 f606 	lsl.w	r6, r4, r6
 80003a6:	40cb      	lsrs	r3, r1
 80003a8:	431e      	orrs	r6, r3
 80003aa:	40cc      	lsrs	r4, r1
 80003ac:	e9c5 6400 	strd	r6, r4, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	e750      	b.n	8000256 <__udivmoddi4+0xa6>
 80003b4:	f1c2 0320 	rsb	r3, r2, #32
 80003b8:	fa20 f103 	lsr.w	r1, r0, r3
 80003bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c0:	fa24 f303 	lsr.w	r3, r4, r3
 80003c4:	4094      	lsls	r4, r2
 80003c6:	430c      	orrs	r4, r1
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80003d0:	fa1f f78c 	uxth.w	r7, ip
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3110 	mls	r1, r8, r0, r3
 80003dc:	0c23      	lsrs	r3, r4, #16
 80003de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e2:	fb00 f107 	mul.w	r1, r0, r7
 80003e6:	4299      	cmp	r1, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x24c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80003f2:	d22c      	bcs.n	800044e <__udivmoddi4+0x29e>
 80003f4:	4299      	cmp	r1, r3
 80003f6:	d92a      	bls.n	800044e <__udivmoddi4+0x29e>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4463      	add	r3, ip
 80003fc:	1a5b      	subs	r3, r3, r1
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb3 f1f8 	udiv	r1, r3, r8
 8000404:	fb08 3311 	mls	r3, r8, r1, r3
 8000408:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800040c:	fb01 f307 	mul.w	r3, r1, r7
 8000410:	42a3      	cmp	r3, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x276>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f101 36ff 	add.w	r6, r1, #4294967295
 800041c:	d213      	bcs.n	8000446 <__udivmoddi4+0x296>
 800041e:	42a3      	cmp	r3, r4
 8000420:	d911      	bls.n	8000446 <__udivmoddi4+0x296>
 8000422:	3902      	subs	r1, #2
 8000424:	4464      	add	r4, ip
 8000426:	1ae4      	subs	r4, r4, r3
 8000428:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800042c:	e739      	b.n	80002a2 <__udivmoddi4+0xf2>
 800042e:	4604      	mov	r4, r0
 8000430:	e6f0      	b.n	8000214 <__udivmoddi4+0x64>
 8000432:	4608      	mov	r0, r1
 8000434:	e706      	b.n	8000244 <__udivmoddi4+0x94>
 8000436:	45c8      	cmp	r8, r9
 8000438:	d2ae      	bcs.n	8000398 <__udivmoddi4+0x1e8>
 800043a:	ebb9 0e02 	subs.w	lr, r9, r2
 800043e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000442:	3801      	subs	r0, #1
 8000444:	e7a8      	b.n	8000398 <__udivmoddi4+0x1e8>
 8000446:	4631      	mov	r1, r6
 8000448:	e7ed      	b.n	8000426 <__udivmoddi4+0x276>
 800044a:	4603      	mov	r3, r0
 800044c:	e799      	b.n	8000382 <__udivmoddi4+0x1d2>
 800044e:	4630      	mov	r0, r6
 8000450:	e7d4      	b.n	80003fc <__udivmoddi4+0x24c>
 8000452:	46d6      	mov	lr, sl
 8000454:	e77f      	b.n	8000356 <__udivmoddi4+0x1a6>
 8000456:	4463      	add	r3, ip
 8000458:	3802      	subs	r0, #2
 800045a:	e74d      	b.n	80002f8 <__udivmoddi4+0x148>
 800045c:	4606      	mov	r6, r0
 800045e:	4623      	mov	r3, r4
 8000460:	4608      	mov	r0, r1
 8000462:	e70f      	b.n	8000284 <__udivmoddi4+0xd4>
 8000464:	3e02      	subs	r6, #2
 8000466:	4463      	add	r3, ip
 8000468:	e730      	b.n	80002cc <__udivmoddi4+0x11c>
 800046a:	bf00      	nop

0800046c <__aeabi_idiv0>:
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop

08000470 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000478:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800047c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000480:	f023 0218 	bic.w	r2, r3, #24
 8000484:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4313      	orrs	r3, r2
 800048c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4013      	ands	r3, r2
 80004be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c0:	68fb      	ldr	r3, [r7, #12]
}
 80004c2:	bf00      	nop
 80004c4:	3714      	adds	r7, #20
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
	...

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fd02 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f872 	bl	80005c0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004dc:	f000 f8c4 	bl	8000668 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f8df 	bl	80006a2 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e4:	f003 fb54 	bl	8003b90 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskPuls */
  TaskPulsHandle = osThreadNew(StartTaskPuls, NULL, &TaskPuls_attributes);
 80004e8:	4a28      	ldr	r2, [pc, #160]	@ (800058c <main+0xbc>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	4828      	ldr	r0, [pc, #160]	@ (8000590 <main+0xc0>)
 80004ee:	f003 fb99 	bl	8003c24 <osThreadNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a27      	ldr	r2, [pc, #156]	@ (8000594 <main+0xc4>)
 80004f6:	6013      	str	r3, [r2, #0]

  /* creation of TaskTemp */
  TaskTempHandle = osThreadNew(StartTaskTemp, NULL, &TaskTemp_attributes);
 80004f8:	4a27      	ldr	r2, [pc, #156]	@ (8000598 <main+0xc8>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4827      	ldr	r0, [pc, #156]	@ (800059c <main+0xcc>)
 80004fe:	f003 fb91 	bl	8003c24 <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a26      	ldr	r2, [pc, #152]	@ (80005a0 <main+0xd0>)
 8000506:	6013      	str	r3, [r2, #0]

  /* creation of TaskLcd */
  TaskLcdHandle = osThreadNew(StartTaskLcd, NULL, &TaskLcd_attributes);
 8000508:	4a26      	ldr	r2, [pc, #152]	@ (80005a4 <main+0xd4>)
 800050a:	2100      	movs	r1, #0
 800050c:	4826      	ldr	r0, [pc, #152]	@ (80005a8 <main+0xd8>)
 800050e:	f003 fb89 	bl	8003c24 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a25      	ldr	r2, [pc, #148]	@ (80005ac <main+0xdc>)
 8000516:	6013      	str	r3, [r2, #0]

  /* creation of TaskBuzz */
  TaskBuzzHandle = osThreadNew(StartTaskBuzz, NULL, &TaskBuzz_attributes);
 8000518:	4a25      	ldr	r2, [pc, #148]	@ (80005b0 <main+0xe0>)
 800051a:	2100      	movs	r1, #0
 800051c:	4825      	ldr	r0, [pc, #148]	@ (80005b4 <main+0xe4>)
 800051e:	f003 fb81 	bl	8003c24 <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a24      	ldr	r2, [pc, #144]	@ (80005b8 <main+0xe8>)
 8000526:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8000528:	2000      	movs	r0, #0
 800052a:	f000 fb45 	bl	8000bb8 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800052e:	2001      	movs	r0, #1
 8000530:	f000 fb42 	bl	8000bb8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000534:	2002      	movs	r0, #2
 8000536:	f000 fb3f 	bl	8000bb8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800053a:	2101      	movs	r1, #1
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fb75 	bl	8000c2c <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000542:	2101      	movs	r1, #1
 8000544:	2001      	movs	r0, #1
 8000546:	f000 fb71 	bl	8000c2c <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 800054a:	2101      	movs	r1, #1
 800054c:	2002      	movs	r0, #2
 800054e:	f000 fb6d 	bl	8000c2c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000552:	4b1a      	ldr	r3, [pc, #104]	@ (80005bc <main+0xec>)
 8000554:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000558:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800055a:	4b18      	ldr	r3, [pc, #96]	@ (80005bc <main+0xec>)
 800055c:	2200      	movs	r2, #0
 800055e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000560:	4b16      	ldr	r3, [pc, #88]	@ (80005bc <main+0xec>)
 8000562:	2200      	movs	r2, #0
 8000564:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000566:	4b15      	ldr	r3, [pc, #84]	@ (80005bc <main+0xec>)
 8000568:	2200      	movs	r2, #0
 800056a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800056c:	4b13      	ldr	r3, [pc, #76]	@ (80005bc <main+0xec>)
 800056e:	2200      	movs	r2, #0
 8000570:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000572:	4912      	ldr	r1, [pc, #72]	@ (80005bc <main+0xec>)
 8000574:	2000      	movs	r0, #0
 8000576:	f000 fbeb 	bl	8000d50 <BSP_COM_Init>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <main+0xb4>
  {
    Error_Handler();
 8000580:	f000 f8db 	bl	800073a <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 8000584:	f003 fb28 	bl	8003bd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <main+0xb8>
 800058c:	080071a4 	.word	0x080071a4
 8000590:	080006bd 	.word	0x080006bd
 8000594:	200000d4 	.word	0x200000d4
 8000598:	080071c8 	.word	0x080071c8
 800059c:	080006dd 	.word	0x080006dd
 80005a0:	200000d8 	.word	0x200000d8
 80005a4:	080071ec 	.word	0x080071ec
 80005a8:	080006fd 	.word	0x080006fd
 80005ac:	200000dc 	.word	0x200000dc
 80005b0:	08007210 	.word	0x08007210
 80005b4:	0800070d 	.word	0x0800070d
 80005b8:	200000e0 	.word	0x200000e0
 80005bc:	200000c4 	.word	0x200000c4

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b098      	sub	sp, #96	@ 0x60
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	2244      	movs	r2, #68	@ 0x44
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f006 fa82 	bl	8006ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	463b      	mov	r3, r7
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]
 80005e2:	615a      	str	r2, [r3, #20]
 80005e4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005e6:	f000 ff53 	bl	8001490 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f7ff ff40 	bl	8000470 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80005f0:	2327      	movs	r3, #39	@ 0x27
 80005f2:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005fa:	2301      	movs	r3, #1
 80005fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000602:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2340      	movs	r3, #64	@ 0x40
 800060a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800060c:	2300      	movs	r3, #0
 800060e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000610:	2360      	movs	r3, #96	@ 0x60
 8000612:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000614:	2300      	movs	r3, #0
 8000616:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fa95 	bl	8001b4c <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000628:	f000 f887 	bl	800073a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800062c:	236f      	movs	r3, #111	@ 0x6f
 800062e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000648:	463b      	mov	r3, r7
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fdb3 	bl	80021b8 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000658:	f000 f86f 	bl	800073a <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800065c:	f002 faa5 	bl	8002baa <HAL_RCCEx_EnableMSIPLLMode>
}
 8000660:	bf00      	nop
 8000662:	3760      	adds	r7, #96	@ 0x60
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08c      	sub	sp, #48	@ 0x30
 800066c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800066e:	463b      	mov	r3, r7
 8000670:	2230      	movs	r2, #48	@ 0x30
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f006 fa2f 	bl	8006ad8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800067a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800067e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000684:	2310      	movs	r3, #16
 8000686:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4618      	mov	r0, r3
 800068c:	f002 f997 	bl	80029be <HAL_RCCEx_PeriphCLKConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000696:	f000 f850 	bl	800073a <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800069a:	bf00      	nop
 800069c:	3730      	adds	r7, #48	@ 0x30
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	2004      	movs	r0, #4
 80006a8:	f7ff fef8 	bl	800049c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	2001      	movs	r0, #1
 80006ae:	f7ff fef5 	bl	800049c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	2002      	movs	r0, #2
 80006b4:	f7ff fef2 	bl	800049c <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}

080006bc <StartTaskPuls>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskPuls */
void StartTaskPuls(void *argument)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf("Task Puls \n");
 80006c4:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <StartTaskPuls+0x1c>)
 80006c6:	f006 f927 	bl	8006918 <puts>
    osDelay(1000);
 80006ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ce:	f003 fb3b 	bl	8003d48 <osDelay>
	printf("Task Puls \n");
 80006d2:	bf00      	nop
 80006d4:	e7f6      	b.n	80006c4 <StartTaskPuls+0x8>
 80006d6:	bf00      	nop
 80006d8:	0800714c 	.word	0x0800714c

080006dc <StartTaskTemp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTemp */
void StartTaskTemp(void *argument)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTemp */
  /* Infinite loop */
  for(;;)
  {
	printf("Task Temperatura \n");
 80006e4:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <StartTaskTemp+0x1c>)
 80006e6:	f006 f917 	bl	8006918 <puts>
    osDelay(1000);
 80006ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ee:	f003 fb2b 	bl	8003d48 <osDelay>
	printf("Task Temperatura \n");
 80006f2:	bf00      	nop
 80006f4:	e7f6      	b.n	80006e4 <StartTaskTemp+0x8>
 80006f6:	bf00      	nop
 80006f8:	08007158 	.word	0x08007158

080006fc <StartTaskLcd>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLcd */
void StartTaskLcd(void *argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLcd */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000704:	2001      	movs	r0, #1
 8000706:	f003 fb1f 	bl	8003d48 <osDelay>
 800070a:	e7fb      	b.n	8000704 <StartTaskLcd+0x8>

0800070c <StartTaskBuzz>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBuzz */
void StartTaskBuzz(void *argument)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBuzz */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000714:	2001      	movs	r0, #1
 8000716:	f003 fb17 	bl	8003d48 <osDelay>
 800071a:	e7fb      	b.n	8000714 <StartTaskBuzz+0x8>

0800071c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800072c:	d101      	bne.n	8000732 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800072e:	f000 fbf5 	bl	8000f1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073e:	b672      	cpsid	i
}
 8000740:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000742:	bf00      	nop
 8000744:	e7fd      	b.n	8000742 <Error_Handler+0x8>

08000746 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	210f      	movs	r1, #15
 800074e:	f06f 0001 	mvn.w	r0, #1
 8000752:	f000 fcc7 	bl	80010e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}

0800075a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800075a:	b480      	push	{r7}
 800075c:	b085      	sub	sp, #20
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000766:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000768:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4313      	orrs	r3, r2
 8000770:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000776:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4013      	ands	r3, r2
 800077c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800077e:	68fb      	ldr	r3, [r7, #12]
}
 8000780:	bf00      	nop
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08e      	sub	sp, #56	@ 0x38
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800079c:	2300      	movs	r3, #0
 800079e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	201c      	movs	r0, #28
 80007a8:	f000 fc9c 	bl	80010e4 <HAL_NVIC_SetPriority>
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007ac:	201c      	movs	r0, #28
 80007ae:	f000 fcb3 	bl	8001118 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff ffd1 	bl	800075a <LL_APB1_GRP1_EnableClock>

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007b8:	f107 020c 	add.w	r2, r7, #12
 80007bc:	f107 0310 	add.w	r3, r7, #16
 80007c0:	4611      	mov	r1, r2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 fee4 	bl	8002590 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007c8:	f001 feb6 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
 80007cc:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007d0:	4a21      	ldr	r2, [pc, #132]	@ (8000858 <HAL_InitTick+0xcc>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9b      	lsrs	r3, r3, #18
 80007d8:	3b01      	subs	r3, #1
 80007da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80007dc:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <HAL_InitTick+0xd0>)
 80007de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80007e4:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <HAL_InitTick+0xd0>)
 80007e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007ea:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80007ec:	4a1b      	ldr	r2, [pc, #108]	@ (800085c <HAL_InitTick+0xd0>)
 80007ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007f0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <HAL_InitTick+0xd0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b18      	ldr	r3, [pc, #96]	@ (800085c <HAL_InitTick+0xd0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 80007fe:	4817      	ldr	r0, [pc, #92]	@ (800085c <HAL_InitTick+0xd0>)
 8000800:	f002 f9d9 	bl	8002bb6 <HAL_TIM_Base_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 800080a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800080e:	2b00      	cmp	r3, #0
 8000810:	d11b      	bne.n	800084a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000812:	4812      	ldr	r0, [pc, #72]	@ (800085c <HAL_InitTick+0xd0>)
 8000814:	f002 fa30 	bl	8002c78 <HAL_TIM_Base_Start_IT>
 8000818:	4603      	mov	r3, r0
 800081a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 800081e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000822:	2b00      	cmp	r3, #0
 8000824:	d111      	bne.n	800084a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000826:	201c      	movs	r0, #28
 8000828:	f000 fc76 	bl	8001118 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b0f      	cmp	r3, #15
 8000830:	d808      	bhi.n	8000844 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000832:	2200      	movs	r2, #0
 8000834:	6879      	ldr	r1, [r7, #4]
 8000836:	201c      	movs	r0, #28
 8000838:	f000 fc54 	bl	80010e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800083c:	4a08      	ldr	r2, [pc, #32]	@ (8000860 <HAL_InitTick+0xd4>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6013      	str	r3, [r2, #0]
 8000842:	e002      	b.n	800084a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000844:	2301      	movs	r3, #1
 8000846:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

 /* Return function status */
  return status;
 800084a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800084e:	4618      	mov	r0, r3
 8000850:	3738      	adds	r7, #56	@ 0x38
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	431bde83 	.word	0x431bde83
 800085c:	200000e4 	.word	0x200000e4
 8000860:	20000040 	.word	0x20000040

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <NMI_Handler+0x4>

0800086c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <MemManage_Handler+0x4>

0800087c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <BusFault_Handler+0x4>

08000884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <UsageFault_Handler+0x4>

0800088c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008a0:	4802      	ldr	r0, [pc, #8]	@ (80008ac <TIM2_IRQHandler+0x10>)
 80008a2:	f002 fa37 	bl	8002d14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200000e4 	.word	0x200000e4

080008b0 <ITM_SendChar>:
//ITM Register Address
#define ITM_STIMULUS_PORT0		*((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN			*((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	// Enable TRCENA
	DEMCR |= (1<<24);
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <ITM_SendChar+0x48>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a0e      	ldr	r2, [pc, #56]	@ (80008f8 <ITM_SendChar+0x48>)
 80008c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80008c4:	6013      	str	r3, [r2, #0]

	// Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 80008c6:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <ITM_SendChar+0x4c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a0c      	ldr	r2, [pc, #48]	@ (80008fc <ITM_SendChar+0x4c>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6013      	str	r3, [r2, #0]

	// Read FIFO Status in bit[0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80008d2:	bf00      	nop
 80008d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f8      	beq.n	80008d4 <ITM_SendChar+0x24>

	// Write to ITM Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 80008e2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	6013      	str	r3, [r2, #0]
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000edfc 	.word	0xe000edfc
 80008fc:	e0000e00 	.word	0xe0000e00

08000900 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	e009      	b.n	8000926 <_read+0x26>
  {
    //*ptr++ = __io_getchar(); - no longer needed
    ITM_SendChar(*ptr++);
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	1c5a      	adds	r2, r3, #1
 8000916:	60ba      	str	r2, [r7, #8]
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ffc8 	bl	80008b0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	3301      	adds	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	697a      	ldr	r2, [r7, #20]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	429a      	cmp	r2, r3
 800092c:	dbf1      	blt.n	8000912 <_read+0x12>
  }

  return len;
 800092e:	687b      	ldr	r3, [r7, #4]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	e009      	b.n	800095e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	1c5a      	adds	r2, r3, #1
 800094e:	60ba      	str	r2, [r7, #8]
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	4618      	mov	r0, r3
 8000954:	f000 fa5e 	bl	8000e14 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	3301      	adds	r3, #1
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	697a      	ldr	r2, [r7, #20]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	429a      	cmp	r2, r3
 8000964:	dbf1      	blt.n	800094a <_write+0x12>
  }
  return len;
 8000966:	687b      	ldr	r3, [r7, #4]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <_close>:

int _close(int file)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000978:	f04f 33ff 	mov.w	r3, #4294967295
}
 800097c:	4618      	mov	r0, r3
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000998:	605a      	str	r2, [r3, #4]
  return 0;
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <_isatty>:

int _isatty(int file)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009b0:	2301      	movs	r3, #1
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009be:	b480      	push	{r7}
 80009c0:	b085      	sub	sp, #20
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	60f8      	str	r0, [r7, #12]
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009ca:	2300      	movs	r3, #0
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e0:	4a14      	ldr	r2, [pc, #80]	@ (8000a34 <_sbrk+0x5c>)
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <_sbrk+0x60>)
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ec:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d102      	bne.n	80009fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f4:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <_sbrk+0x64>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	@ (8000a40 <_sbrk+0x68>)
 80009f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fa:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d207      	bcs.n	8000a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a08:	f006 f90a 	bl	8006c20 <__errno>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	220c      	movs	r2, #12
 8000a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	e009      	b.n	8000a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a18:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	4a05      	ldr	r2, [pc, #20]	@ (8000a3c <_sbrk+0x64>)
 8000a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20006000 	.word	0x20006000
 8000a38:	00000400 	.word	0x00000400
 8000a3c:	20000130 	.word	0x20000130
 8000a40:	20004d20 	.word	0x20004d20

08000a44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000a48:	4b22      	ldr	r3, [pc, #136]	@ (8000ad4 <SystemInit+0x90>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a4e:	4a21      	ldr	r2, [pc, #132]	@ (8000ad4 <SystemInit+0x90>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a6c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000a70:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000a72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <SystemInit+0x94>)
 8000a7e:	4013      	ands	r3, r2
 8000a80:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000a82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000a8e:	f023 0305 	bic.w	r3, r3, #5
 8000a92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000a96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000a9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000aa2:	f023 0301 	bic.w	r3, r3, #1
 8000aa6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000aaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000aae:	4a0b      	ldr	r2, [pc, #44]	@ (8000adc <SystemInit+0x98>)
 8000ab0:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ab2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000abc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ac0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ac2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00
 8000ad8:	faf6fefb 	.word	0xfaf6fefb
 8000adc:	22041000 	.word	0x22041000

08000ae0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000ae0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae4:	3304      	adds	r3, #4

08000ae6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000aea:	d3f9      	bcc.n	8000ae0 <CopyDataInit>
  bx lr
 8000aec:	4770      	bx	lr

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000aee:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000af0:	3004      	adds	r0, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000af2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>
  bx lr
 8000af6:	4770      	bx	lr

08000af8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000af8:	480c      	ldr	r0, [pc, #48]	@ (8000b2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000afa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000afc:	f7ff ffa2 	bl	8000a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000b00:	480b      	ldr	r0, [pc, #44]	@ (8000b30 <LoopForever+0x6>)
 8000b02:	490c      	ldr	r1, [pc, #48]	@ (8000b34 <LoopForever+0xa>)
 8000b04:	4a0c      	ldr	r2, [pc, #48]	@ (8000b38 <LoopForever+0xe>)
 8000b06:	2300      	movs	r3, #0
 8000b08:	f7ff ffed 	bl	8000ae6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000b0c:	480b      	ldr	r0, [pc, #44]	@ (8000b3c <LoopForever+0x12>)
 8000b0e:	490c      	ldr	r1, [pc, #48]	@ (8000b40 <LoopForever+0x16>)
 8000b10:	4a0c      	ldr	r2, [pc, #48]	@ (8000b44 <LoopForever+0x1a>)
 8000b12:	2300      	movs	r3, #0
 8000b14:	f7ff ffe7 	bl	8000ae6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000b18:	480b      	ldr	r0, [pc, #44]	@ (8000b48 <LoopForever+0x1e>)
 8000b1a:	490c      	ldr	r1, [pc, #48]	@ (8000b4c <LoopForever+0x22>)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f7ff ffe8 	bl	8000af2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b22:	f006 f883 	bl	8006c2c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b26:	f7ff fcd3 	bl	80004d0 <main>

08000b2a <LoopForever>:

LoopForever:
  b LoopForever
 8000b2a:	e7fe      	b.n	8000b2a <LoopForever>
  ldr   r0, =_estack
 8000b2c:	20006000 	.word	0x20006000
  INIT_DATA _sdata, _edata, _sidata
 8000b30:	20000008 	.word	0x20000008
 8000b34:	200000a8 	.word	0x200000a8
 8000b38:	0800731c 	.word	0x0800731c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000b3c:	20030000 	.word	0x20030000
 8000b40:	20030000 	.word	0x20030000
 8000b44:	080073bc 	.word	0x080073bc
  INIT_BSS _sbss, _ebss
 8000b48:	200000a8 	.word	0x200000a8
 8000b4c:	20004d1c 	.word	0x20004d1c

08000b50 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_IRQHandler>

08000b52 <LL_AHB2_GRP1_EnableClock>:
{
 8000b52:	b480      	push	{r7}
 8000b54:	b085      	sub	sp, #20
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4013      	ands	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b76:	68fb      	ldr	r3, [r7, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b90:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000b92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ba0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f7ff ffbd 	bl	8000b52 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	4a12      	ldr	r2, [pc, #72]	@ (8000c24 <BSP_LED_Init+0x6c>)
 8000bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000be0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c28 <BSP_LED_Init+0x70>)
 8000bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf6:	f107 020c 	add.w	r2, r7, #12
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 fac7 	bl	8001190 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	4a08      	ldr	r2, [pc, #32]	@ (8000c28 <BSP_LED_Init+0x70>)
 8000c06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	4a05      	ldr	r2, [pc, #20]	@ (8000c24 <BSP_LED_Init+0x6c>)
 8000c0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c12:	2200      	movs	r2, #0
 8000c14:	4619      	mov	r1, r3
 8000c16:	f000 fc23 	bl	8001460 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3720      	adds	r7, #32
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	080072d4 	.word	0x080072d4
 8000c28:	2000000c 	.word	0x2000000c

08000c2c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	460a      	mov	r2, r1
 8000c36:	71fb      	strb	r3, [r7, #7]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, BUTTON_SW2_EXTI_Callback, BUTTON_SW3_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d103      	bne.n	8000c5a <BSP_PB_Init+0x2e>
 8000c52:	2001      	movs	r0, #1
 8000c54:	f7ff ff7d 	bl	8000b52 <LL_AHB2_GRP1_EnableClock>
 8000c58:	e00c      	b.n	8000c74 <BSP_PB_Init+0x48>
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d103      	bne.n	8000c68 <BSP_PB_Init+0x3c>
 8000c60:	2010      	movs	r0, #16
 8000c62:	f7ff ff76 	bl	8000b52 <LL_AHB2_GRP1_EnableClock>
 8000c66:	e005      	b.n	8000c74 <BSP_PB_Init+0x48>
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d102      	bne.n	8000c74 <BSP_PB_Init+0x48>
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f7ff ff6f 	bl	8000b52 <LL_AHB2_GRP1_EnableClock>

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	4a29      	ldr	r2, [pc, #164]	@ (8000d1c <BSP_PB_Init+0xf0>)
 8000c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c7c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000c86:	79bb      	ldrb	r3, [r7, #6]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d10c      	bne.n	8000ca6 <BSP_PB_Init+0x7a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	4a23      	ldr	r2, [pc, #140]	@ (8000d20 <BSP_PB_Init+0xf4>)
 8000c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c98:	f107 020c 	add.w	r2, r7, #12
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 fa76 	bl	8001190 <HAL_GPIO_Init>
 8000ca4:	e035      	b.n	8000d12 <BSP_PB_Init+0xe6>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8000ca6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000caa:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	4a1c      	ldr	r2, [pc, #112]	@ (8000d20 <BSP_PB_Init+0xf4>)
 8000cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb4:	f107 020c 	add.w	r2, r7, #12
 8000cb8:	4611      	mov	r1, r2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 fa68 	bl	8001190 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	4a17      	ldr	r2, [pc, #92]	@ (8000d24 <BSP_PB_Init+0xf8>)
 8000cc6:	441a      	add	r2, r3
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	4917      	ldr	r1, [pc, #92]	@ (8000d28 <BSP_PB_Init+0xfc>)
 8000ccc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	f000 fa48 	bl	8001168 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	4a11      	ldr	r2, [pc, #68]	@ (8000d24 <BSP_PB_Init+0xf8>)
 8000cde:	1898      	adds	r0, r3, r2
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	4a12      	ldr	r2, [pc, #72]	@ (8000d2c <BSP_PB_Init+0x100>)
 8000ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	2100      	movs	r1, #0
 8000cec:	f000 fa22 	bl	8001134 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d30 <BSP_PB_Init+0x104>)
 8000cf4:	56d0      	ldrsb	r0, [r2, r3]
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8000d34 <BSP_PB_Init+0x108>)
 8000cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	4619      	mov	r1, r3
 8000d02:	f000 f9ef 	bl	80010e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	4a09      	ldr	r2, [pc, #36]	@ (8000d30 <BSP_PB_Init+0x104>)
 8000d0a:	56d3      	ldrsb	r3, [r2, r3]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 fa03 	bl	8001118 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3720      	adds	r7, #32
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	080072dc 	.word	0x080072dc
 8000d20:	20000018 	.word	0x20000018
 8000d24:	20000134 	.word	0x20000134
 8000d28:	080072e8 	.word	0x080072e8
 8000d2c:	20000028 	.word	0x20000028
 8000d30:	080072e4 	.word	0x080072e4
 8000d34:	20000034 	.word	0x20000034

08000d38 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]

  if (COM > COMn)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d903      	bls.n	8000d6e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d66:	f06f 0301 	mvn.w	r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	e018      	b.n	8000da0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	2294      	movs	r2, #148	@ 0x94
 8000d72:	fb02 f303 	mul.w	r3, r2, r3
 8000d76:	4a0d      	ldr	r2, [pc, #52]	@ (8000dac <BSP_COM_Init+0x5c>)
 8000d78:	4413      	add	r3, r2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f87b 	bl	8000e76 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2294      	movs	r2, #148	@ 0x94
 8000d84:	fb02 f303 	mul.w	r3, r2, r3
 8000d88:	4a08      	ldr	r2, [pc, #32]	@ (8000dac <BSP_COM_Init+0x5c>)
 8000d8a:	4413      	add	r3, r2
 8000d8c:	6839      	ldr	r1, [r7, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f80e 	bl	8000db0 <MX_LPUART1_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d002      	beq.n	8000da0 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000d9a:	f06f 0303 	mvn.w	r3, #3
 8000d9e:	e000      	b.n	8000da2 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000da0:	68fb      	ldr	r3, [r7, #12]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000014c 	.word	0x2000014c

08000db0 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance          = COM_USART[COM1];
 8000dba:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <MX_LPUART1_Init+0x60>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate     = COM_Init->BaudRate;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	605a      	str	r2, [r3, #4]
  huart->Init.Mode         = UART_MODE_TX_RX;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	220c      	movs	r2, #12
 8000dce:	615a      	str	r2, [r3, #20]
  huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	895b      	ldrh	r3, [r3, #10]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	891b      	ldrh	r3, [r3, #8]
 8000de6:	461a      	mov	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	899b      	ldrh	r3, [r3, #12]
 8000df0:	461a      	mov	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000dfc:	61da      	str	r2, [r3, #28]

  return HAL_UART_Init(huart);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f002 f952 	bl	80030a8 <HAL_UART_Init>
 8000e04:	4603      	mov	r3, r0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000024 	.word	0x20000024

08000e14 <__io_putchar>:
  * @brief Retargets the C library msg_info function to the USART.
  * @param None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the serial port and Loop until the end of transmission */
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8000e1c:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <__io_putchar+0x30>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	2394      	movs	r3, #148	@ 0x94
 8000e24:	fb02 f303 	mul.w	r3, r2, r3
 8000e28:	4a07      	ldr	r2, [pc, #28]	@ (8000e48 <__io_putchar+0x34>)
 8000e2a:	1898      	adds	r0, r3, r2
 8000e2c:	1d39      	adds	r1, r7, #4
 8000e2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e32:	2201      	movs	r2, #1
 8000e34:	f002 f992 	bl	800315c <HAL_UART_Transmit>
  return ch;
 8000e38:	687b      	ldr	r3, [r7, #4]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200001e0 	.word	0x200001e0
 8000e48:	2000014c 	.word	0x2000014c

08000e4c <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff ff71 	bl	8000d38 <BSP_PB_Callback>
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <BUTTON_SW2_EXTI_Callback>:
/**
  * @brief  Button SW2 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW2_EXTI_Callback(void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW2);
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f7ff ff6a 	bl	8000d38 <BSP_PB_Callback>
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <BUTTON_SW3_EXTI_Callback>:
/**
  * @brief  Button SW3 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW3_EXTI_Callback(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW3);
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	f7ff ff63 	bl	8000d38 <BSP_PB_Callback>
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b088      	sub	sp, #32
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f7ff fe67 	bl	8000b52 <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8000e84:	2001      	movs	r0, #1
 8000e86:	f7ff fe64 	bl	8000b52 <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000e8a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e8e:	f7ff fe79 	bl	8000b84 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000e92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e96:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000ea4:	2307      	movs	r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	4619      	mov	r1, r3
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb2:	f000 f96d 	bl	8001190 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000eb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eba:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ece:	f000 f95f 	bl	8001190 <HAL_GPIO_Init>
}
 8000ed2:	bf00      	nop
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <HAL_Init+0x3c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a0b      	ldr	r2, [pc, #44]	@ (8000f18 <HAL_Init+0x3c>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef2:	2003      	movs	r0, #3
 8000ef4:	f000 f8eb 	bl	80010ce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef8:	200f      	movs	r0, #15
 8000efa:	f7ff fc47 	bl	800078c <HAL_InitTick>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	e001      	b.n	8000f0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f0a:	f7ff fc1c 	bl	8000746 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	58004000 	.word	0x58004000

08000f1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	@ (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000044 	.word	0x20000044
 8000f40:	200001e4 	.word	0x200001e4

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	@ (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	200001e4 	.word	0x200001e4

08000f5c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000f60:	4b03      	ldr	r3, [pc, #12]	@ (8000f70 <HAL_GetTickPrio+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000040 	.word	0x20000040

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	@ (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4907      	ldr	r1, [pc, #28]	@ (8001010 <__NVIC_EnableIRQ+0x38>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	@ (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	@ (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	@ 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	@ 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ff4c 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010f2:	f7ff ff63 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 80010f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	68b9      	ldr	r1, [r7, #8]
 80010fc:	6978      	ldr	r0, [r7, #20]
 80010fe:	f7ff ffb3 	bl	8001068 <NVIC_EncodePriority>
 8001102:	4602      	mov	r2, r0
 8001104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff82 	bl	8001014 <__NVIC_SetPriority>
}
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff56 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001134:	b480      	push	{r7}
 8001136:	b087      	sub	sp, #28
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	460b      	mov	r3, r1
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001146:	7afb      	ldrb	r3, [r7, #11]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d103      	bne.n	8001154 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	605a      	str	r2, [r3, #4]
      break;
 8001152:	e002      	b.n	800115a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	75fb      	strb	r3, [r7, #23]
      break;
 8001158:	bf00      	nop
  }

  return status;
 800115a:	7dfb      	ldrb	r3, [r7, #23]
}
 800115c:	4618      	mov	r0, r3
 800115e:	371c      	adds	r7, #28
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e003      	b.n	8001184 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001182:	2300      	movs	r3, #0
  }
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119e:	e146      	b.n	800142e <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	2101      	movs	r1, #1
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	4013      	ands	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 8138 	beq.w	8001428 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d005      	beq.n	80011d0 <HAL_GPIO_Init+0x40>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d130      	bne.n	8001232 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001206:	2201      	movs	r2, #1
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	f003 0201 	and.w	r2, r3, #1
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b03      	cmp	r3, #3
 800123c:	d017      	beq.n	800126e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d123      	bne.n	80012c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	08da      	lsrs	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3208      	adds	r2, #8
 8001282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	220f      	movs	r2, #15
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	691a      	ldr	r2, [r3, #16]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	08da      	lsrs	r2, r3, #3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3208      	adds	r2, #8
 80012bc:	6939      	ldr	r1, [r7, #16]
 80012be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	2203      	movs	r2, #3
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0203 	and.w	r2, r3, #3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8092 	beq.w	8001428 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001304:	4a51      	ldr	r2, [pc, #324]	@ (800144c <HAL_GPIO_Init+0x2bc>)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	3302      	adds	r3, #2
 800130c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	220f      	movs	r2, #15
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800132e:	d013      	beq.n	8001358 <HAL_GPIO_Init+0x1c8>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a47      	ldr	r2, [pc, #284]	@ (8001450 <HAL_GPIO_Init+0x2c0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d00d      	beq.n	8001354 <HAL_GPIO_Init+0x1c4>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a46      	ldr	r2, [pc, #280]	@ (8001454 <HAL_GPIO_Init+0x2c4>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d007      	beq.n	8001350 <HAL_GPIO_Init+0x1c0>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a45      	ldr	r2, [pc, #276]	@ (8001458 <HAL_GPIO_Init+0x2c8>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d101      	bne.n	800134c <HAL_GPIO_Init+0x1bc>
 8001348:	2304      	movs	r3, #4
 800134a:	e006      	b.n	800135a <HAL_GPIO_Init+0x1ca>
 800134c:	2307      	movs	r3, #7
 800134e:	e004      	b.n	800135a <HAL_GPIO_Init+0x1ca>
 8001350:	2302      	movs	r3, #2
 8001352:	e002      	b.n	800135a <HAL_GPIO_Init+0x1ca>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <HAL_GPIO_Init+0x1ca>
 8001358:	2300      	movs	r3, #0
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	f002 0203 	and.w	r2, r2, #3
 8001360:	0092      	lsls	r2, r2, #2
 8001362:	4093      	lsls	r3, r2
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800136a:	4938      	ldr	r1, [pc, #224]	@ (800144c <HAL_GPIO_Init+0x2bc>)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	3302      	adds	r3, #2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001378:	4b38      	ldr	r3, [pc, #224]	@ (800145c <HAL_GPIO_Init+0x2cc>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800139c:	4a2f      	ldr	r2, [pc, #188]	@ (800145c <HAL_GPIO_Init+0x2cc>)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013a2:	4b2e      	ldr	r3, [pc, #184]	@ (800145c <HAL_GPIO_Init+0x2cc>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013c6:	4a25      	ldr	r2, [pc, #148]	@ (800145c <HAL_GPIO_Init+0x2cc>)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013cc:	4b23      	ldr	r3, [pc, #140]	@ (800145c <HAL_GPIO_Init+0x2cc>)
 80013ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013f2:	4a1a      	ldr	r2, [pc, #104]	@ (800145c <HAL_GPIO_Init+0x2cc>)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80013fa:	4b18      	ldr	r3, [pc, #96]	@ (800145c <HAL_GPIO_Init+0x2cc>)
 80013fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001420:	4a0e      	ldr	r2, [pc, #56]	@ (800145c <HAL_GPIO_Init+0x2cc>)
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3301      	adds	r3, #1
 800142c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	fa22 f303 	lsr.w	r3, r2, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	f47f aeb1 	bne.w	80011a0 <HAL_GPIO_Init+0x10>
  }
}
 800143e:	bf00      	nop
 8001440:	bf00      	nop
 8001442:	371c      	adds	r7, #28
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	40010000 	.word	0x40010000
 8001450:	48000400 	.word	0x48000400
 8001454:	48000800 	.word	0x48000800
 8001458:	48001000 	.word	0x48001000
 800145c:	58000800 	.word	0x58000800

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800147c:	e002      	b.n	8001484 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001494:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a04      	ldr	r2, [pc, #16]	@ (80014ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800149a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	58000400 	.word	0x58000400

080014b0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80014b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80014c2:	d101      	bne.n	80014c8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <LL_RCC_HSE_Enable>:
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80014d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <LL_RCC_HSE_Disable>:
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80014f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001500:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001504:	6013      	str	r3, [r2, #0]
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_RCC_HSE_IsReady>:
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001514:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001522:	d101      	bne.n	8001528 <LL_RCC_HSE_IsReady+0x18>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <LL_RCC_HSE_IsReady+0x1a>
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_RCC_HSI_Enable>:
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001542:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_RCC_HSI_Disable>:
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001564:	6013      	str	r3, [r2, #0]
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_RCC_HSI_IsReady>:
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800157e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001582:	d101      	bne.n	8001588 <LL_RCC_HSI_IsReady+0x18>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <LL_RCC_HSI_IsReady+0x1a>
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800159c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	061b      	lsls	r3, r3, #24
 80015aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015ae:	4313      	orrs	r3, r2
 80015b0:	604b      	str	r3, [r1, #4]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <LL_RCC_LSE_Enable>:
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_RCC_LSE_Disable>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_RCC_LSE_EnableBypass>:
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001606:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800160a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800160e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001612:	f043 0304 	orr.w	r3, r3, #4
 8001616:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_RCC_LSE_DisableBypass>:
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800162c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001630:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001634:	f023 0304 	bic.w	r3, r3, #4
 8001638:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800164a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800164e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b02      	cmp	r3, #2
 8001658:	d101      	bne.n	800165e <LL_RCC_LSE_IsReady+0x18>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <LL_RCC_LSE_IsReady+0x1a>
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800166e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001676:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001698:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800169c:	f023 0301 	bic.w	r3, r3, #1
 80016a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80016b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d101      	bne.n	80016c6 <LL_RCC_LSI1_IsReady+0x18>
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <LL_RCC_LSI1_IsReady+0x1a>
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80016d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80016f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001700:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001704:	f023 0304 	bic.w	r3, r3, #4
 8001708:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800171a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800171e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b08      	cmp	r3, #8
 8001728:	d101      	bne.n	800172e <LL_RCC_LSI2_IsReady+0x18>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <LL_RCC_LSI2_IsReady+0x1a>
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001746:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800174a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001756:	4313      	orrs	r3, r2
 8001758:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800176c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800178a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001794:	f023 0301 	bic.w	r3, r3, #1
 8001798:	6013      	str	r3, [r2, #0]
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80017a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d101      	bne.n	80017ba <LL_RCC_MSI_IsReady+0x16>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <LL_RCC_MSI_IsReady+0x18>
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80017ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80017f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017fe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2bb0      	cmp	r3, #176	@ 0xb0
 8001804:	d901      	bls.n	800180a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001806:	23b0      	movs	r3, #176	@ 0xb0
 8001808:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800180a:	687b      	ldr	r3, [r7, #4]
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001832:	4313      	orrs	r3, r2
 8001834:	604b      	str	r3, [r1, #4]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800184a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 0203 	bic.w	r2, r3, #3
 8001854:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800186e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 030c 	and.w	r3, r3, #12
}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800188a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001894:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80018b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80018ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80018de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80018e6:	f023 020f 	bic.w	r2, r3, #15
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018f2:	4313      	orrs	r3, r2
 80018f4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800190c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001916:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4313      	orrs	r3, r2
 800191e:	608b      	str	r3, [r1, #8]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800193e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4313      	orrs	r3, r2
 8001946:	608b      	str	r3, [r1, #8]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001962:	4618      	mov	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001974:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001978:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800198a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800198e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80019be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80019d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019e4:	6013      	str	r3, [r2, #0]
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80019f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a02:	6013      	str	r3, [r2, #0]
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001a20:	d101      	bne.n	8001a26 <LL_RCC_PLL_IsReady+0x18>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <LL_RCC_PLL_IsReady+0x1a>
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001a50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	f003 0303 	and.w	r3, r3, #3
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa6:	d101      	bne.n	8001aac <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001abc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ac0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001acc:	d101      	bne.n	8001ad2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001ae2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ae6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001aea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001af2:	d101      	bne.n	8001af8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b16:	d101      	bne.n	8001b1c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001b3a:	d101      	bne.n	8001b40 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b08d      	sub	sp, #52	@ 0x34
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e324      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0320 	and.w	r3, r3, #32
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 808d 	beq.w	8001c86 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b6c:	f7ff fe7d 	bl	800186a <LL_RCC_GetSysClkSource>
 8001b70:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b72:	f7ff ff83 	bl	8001a7c <LL_RCC_PLL_GetMainSource>
 8001b76:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_RCC_OscConfig+0x3e>
 8001b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b80:	2b0c      	cmp	r3, #12
 8001b82:	d147      	bne.n	8001c14 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d144      	bne.n	8001c14 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e308      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8001b9a:	f7ff fe28 	bl	80017ee <LL_RCC_MSI_GetRange>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	429c      	cmp	r4, r3
 8001ba2:	d914      	bls.n	8001bce <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 fd23 	bl	80025f4 <RCC_SetFlashLatencyFromMSIRange>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e2f7      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fe02 	bl	80017c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fe26 	bl	8001818 <LL_RCC_MSI_SetCalibTrimming>
 8001bcc:	e013      	b.n	8001bf6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fdf7 	bl	80017c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fe1b 	bl	8001818 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fd04 	bl	80025f4 <RCC_SetFlashLatencyFromMSIRange>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e2d8      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001bf6:	f000 fc8b 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4aa4      	ldr	r2, [pc, #656]	@ (8001e90 <HAL_RCC_OscConfig+0x344>)
 8001bfe:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c00:	4ba4      	ldr	r3, [pc, #656]	@ (8001e94 <HAL_RCC_OscConfig+0x348>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fdc1 	bl	800078c <HAL_InitTick>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d039      	beq.n	8001c84 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e2c9      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d01e      	beq.n	8001c5a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c1c:	f7ff fda4 	bl	8001768 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c20:	f7ff f990 	bl	8000f44 <HAL_GetTick>
 8001c24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c28:	f7ff f98c 	bl	8000f44 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e2b6      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c3a:	f7ff fdb3 	bl	80017a4 <LL_RCC_MSI_IsReady>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f1      	beq.n	8001c28 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fdbc 	bl	80017c6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fde0 	bl	8001818 <LL_RCC_MSI_SetCalibTrimming>
 8001c58:	e015      	b.n	8001c86 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c5a:	f7ff fd94 	bl	8001786 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff f971 	bl	8000f44 <HAL_GetTick>
 8001c62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c66:	f7ff f96d 	bl	8000f44 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e297      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c78:	f7ff fd94 	bl	80017a4 <LL_RCC_MSI_IsReady>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f1      	bne.n	8001c66 <HAL_RCC_OscConfig+0x11a>
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001c84:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d047      	beq.n	8001d22 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c92:	f7ff fdea 	bl	800186a <LL_RCC_GetSysClkSource>
 8001c96:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c98:	f7ff fef0 	bl	8001a7c <LL_RCC_PLL_GetMainSource>
 8001c9c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x164>
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	d108      	bne.n	8001cbc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d105      	bne.n	8001cbc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d134      	bne.n	8001d22 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e275      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cc4:	d102      	bne.n	8001ccc <HAL_RCC_OscConfig+0x180>
 8001cc6:	f7ff fc05 	bl	80014d4 <LL_RCC_HSE_Enable>
 8001cca:	e001      	b.n	8001cd0 <HAL_RCC_OscConfig+0x184>
 8001ccc:	f7ff fc11 	bl	80014f2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d012      	beq.n	8001cfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff f934 	bl	8000f44 <HAL_GetTick>
 8001cdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7ff f930 	bl	8000f44 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	@ 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e25a      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001cf2:	f7ff fc0d 	bl	8001510 <LL_RCC_HSE_IsReady>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f1      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x194>
 8001cfc:	e011      	b.n	8001d22 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfe:	f7ff f921 	bl	8000f44 <HAL_GetTick>
 8001d02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d06:	f7ff f91d 	bl	8000f44 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b64      	cmp	r3, #100	@ 0x64
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e247      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d18:	f7ff fbfa 	bl	8001510 <LL_RCC_HSE_IsReady>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f1      	bne.n	8001d06 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d04c      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d2e:	f7ff fd9c 	bl	800186a <LL_RCC_GetSysClkSource>
 8001d32:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d34:	f7ff fea2 	bl	8001a7c <LL_RCC_PLL_GetMainSource>
 8001d38:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d005      	beq.n	8001d4c <HAL_RCC_OscConfig+0x200>
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	2b0c      	cmp	r3, #12
 8001d44:	d10e      	bne.n	8001d64 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d10b      	bne.n	8001d64 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e227      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fc19 	bl	8001594 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d62:	e031      	b.n	8001dc8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d019      	beq.n	8001da0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d6c:	f7ff fbe2 	bl	8001534 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7ff f8e8 	bl	8000f44 <HAL_GetTick>
 8001d74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d78:	f7ff f8e4 	bl	8000f44 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e20e      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001d8a:	f7ff fbf1 	bl	8001570 <LL_RCC_HSI_IsReady>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f1      	beq.n	8001d78 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fbfb 	bl	8001594 <LL_RCC_HSI_SetCalibTrimming>
 8001d9e:	e013      	b.n	8001dc8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da0:	f7ff fbd7 	bl	8001552 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7ff f8ce 	bl	8000f44 <HAL_GetTick>
 8001da8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dac:	f7ff f8ca 	bl	8000f44 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e1f4      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001dbe:	f7ff fbd7 	bl	8001570 <LL_RCC_HSI_IsReady>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f1      	bne.n	8001dac <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d106      	bne.n	8001de2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80a3 	beq.w	8001f28 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d076      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0310 	and.w	r3, r3, #16
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d046      	beq.n	8001e84 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001df6:	f7ff fc5a 	bl	80016ae <LL_RCC_LSI1_IsReady>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d113      	bne.n	8001e28 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001e00:	f7ff fc33 	bl	800166a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e04:	f7ff f89e 	bl	8000f44 <HAL_GetTick>
 8001e08:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001e0c:	f7ff f89a 	bl	8000f44 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e1c4      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001e1e:	f7ff fc46 	bl	80016ae <LL_RCC_LSI1_IsReady>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f1      	beq.n	8001e0c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001e28:	f7ff fc53 	bl	80016d2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f88a 	bl	8000f44 <HAL_GetTick>
 8001e30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001e34:	f7ff f886 	bl	8000f44 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e1b0      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001e46:	f7ff fc66 	bl	8001716 <LL_RCC_LSI2_IsReady>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f1      	beq.n	8001e34 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fc70 	bl	800173a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001e5a:	f7ff fc17 	bl	800168c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5e:	f7ff f871 	bl	8000f44 <HAL_GetTick>
 8001e62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001e66:	f7ff f86d 	bl	8000f44 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e197      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001e78:	f7ff fc19 	bl	80016ae <LL_RCC_LSI1_IsReady>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f1      	bne.n	8001e66 <HAL_RCC_OscConfig+0x31a>
 8001e82:	e051      	b.n	8001f28 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001e84:	f7ff fbf1 	bl	800166a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7ff f85c 	bl	8000f44 <HAL_GetTick>
 8001e8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001e8e:	e00c      	b.n	8001eaa <HAL_RCC_OscConfig+0x35e>
 8001e90:	20000008 	.word	0x20000008
 8001e94:	20000040 	.word	0x20000040
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001e98:	f7ff f854 	bl	8000f44 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e17e      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001eaa:	f7ff fc00 	bl	80016ae <LL_RCC_LSI1_IsReady>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f1      	beq.n	8001e98 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001eb4:	f7ff fc1e 	bl	80016f4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001eba:	f7ff f843 	bl	8000f44 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e16d      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001ecc:	f7ff fc23 	bl	8001716 <LL_RCC_LSI2_IsReady>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f1      	bne.n	8001eba <HAL_RCC_OscConfig+0x36e>
 8001ed6:	e027      	b.n	8001f28 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001ed8:	f7ff fc0c 	bl	80016f4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001edc:	f7ff f832 	bl	8000f44 <HAL_GetTick>
 8001ee0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001ee4:	f7ff f82e 	bl	8000f44 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e158      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001ef6:	f7ff fc0e 	bl	8001716 <LL_RCC_LSI2_IsReady>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f1      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001f00:	f7ff fbc4 	bl	800168c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f04:	f7ff f81e 	bl	8000f44 <HAL_GetTick>
 8001f08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f0c:	f7ff f81a 	bl	8000f44 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e144      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001f1e:	f7ff fbc6 	bl	80016ae <LL_RCC_LSI1_IsReady>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f1      	bne.n	8001f0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d05b      	beq.n	8001fec <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f34:	4b9e      	ldr	r3, [pc, #632]	@ (80021b0 <HAL_RCC_OscConfig+0x664>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d114      	bne.n	8001f6a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001f40:	f7ff faa6 	bl	8001490 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f44:	f7fe fffe 	bl	8000f44 <HAL_GetTick>
 8001f48:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4c:	f7fe fffa 	bl	8000f44 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e124      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f5e:	4b94      	ldr	r3, [pc, #592]	@ (80021b0 <HAL_RCC_OscConfig+0x664>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d102      	bne.n	8001f78 <HAL_RCC_OscConfig+0x42c>
 8001f72:	f7ff fb24 	bl	80015be <LL_RCC_LSE_Enable>
 8001f76:	e00c      	b.n	8001f92 <HAL_RCC_OscConfig+0x446>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b05      	cmp	r3, #5
 8001f7e:	d104      	bne.n	8001f8a <HAL_RCC_OscConfig+0x43e>
 8001f80:	f7ff fb3f 	bl	8001602 <LL_RCC_LSE_EnableBypass>
 8001f84:	f7ff fb1b 	bl	80015be <LL_RCC_LSE_Enable>
 8001f88:	e003      	b.n	8001f92 <HAL_RCC_OscConfig+0x446>
 8001f8a:	f7ff fb29 	bl	80015e0 <LL_RCC_LSE_Disable>
 8001f8e:	f7ff fb49 	bl	8001624 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d014      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9a:	f7fe ffd3 	bl	8000f44 <HAL_GetTick>
 8001f9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001fa0:	e00a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa2:	f7fe ffcf 	bl	8000f44 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e0f7      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001fb8:	f7ff fb45 	bl	8001646 <LL_RCC_LSE_IsReady>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0ef      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x456>
 8001fc2:	e013      	b.n	8001fec <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7fe ffbe 	bl	8000f44 <HAL_GetTick>
 8001fc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fcc:	f7fe ffba 	bl	8000f44 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e0e2      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001fe2:	f7ff fb30 	bl	8001646 <LL_RCC_LSE_IsReady>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ef      	bne.n	8001fcc <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80d8 	beq.w	80021a6 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ff6:	f7ff fc38 	bl	800186a <LL_RCC_GetSysClkSource>
 8001ffa:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002008:	2b02      	cmp	r3, #2
 800200a:	f040 80a6 	bne.w	800215a <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f003 0203 	and.w	r2, r3, #3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002018:	429a      	cmp	r2, r3
 800201a:	d123      	bne.n	8002064 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d11c      	bne.n	8002064 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002036:	429a      	cmp	r2, r3
 8002038:	d114      	bne.n	8002064 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002044:	429a      	cmp	r2, r3
 8002046:	d10d      	bne.n	8002064 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d106      	bne.n	8002064 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002060:	429a      	cmp	r2, r3
 8002062:	d054      	beq.n	800210e <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	2b0c      	cmp	r3, #12
 8002068:	d04f      	beq.n	800210a <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800206a:	f7ff fcc1 	bl	80019f0 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800206e:	f7fe ff69 	bl	8000f44 <HAL_GetTick>
 8002072:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002076:	f7fe ff65 	bl	8000f44 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e08f      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002088:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1ef      	bne.n	8002076 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002096:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	4b45      	ldr	r3, [pc, #276]	@ (80021b4 <HAL_RCC_OscConfig+0x668>)
 800209e:	4013      	ands	r3, r2
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80020a8:	4311      	orrs	r1, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020ae:	0212      	lsls	r2, r2, #8
 80020b0:	4311      	orrs	r1, r2
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80020b6:	4311      	orrs	r1, r2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020bc:	4311      	orrs	r1, r2
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020c2:	430a      	orrs	r2, r1
 80020c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020cc:	f7ff fc81 	bl	80019d2 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020e0:	f7fe ff30 	bl	8000f44 <HAL_GetTick>
 80020e4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e8:	f7fe ff2c 	bl	8000f44 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e056      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0ef      	beq.n	80020e8 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002108:	e04d      	b.n	80021a6 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e04c      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800210e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d144      	bne.n	80021a6 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800211c:	f7ff fc59 	bl	80019d2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002120:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800212a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800212e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002130:	f7fe ff08 	bl	8000f44 <HAL_GetTick>
 8002134:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002138:	f7fe ff04 	bl	8000f44 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e02e      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800214a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0ef      	beq.n	8002138 <HAL_RCC_OscConfig+0x5ec>
 8002158:	e025      	b.n	80021a6 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b0c      	cmp	r3, #12
 800215e:	d020      	beq.n	80021a2 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002160:	f7ff fc46 	bl	80019f0 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7fe feee 	bl	8000f44 <HAL_GetTick>
 8002168:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216c:	f7fe feea 	bl	8000f44 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e014      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800217e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1ef      	bne.n	800216c <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 800218c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002196:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800219a:	f023 0303 	bic.w	r3, r3, #3
 800219e:	60d3      	str	r3, [r2, #12]
 80021a0:	e001      	b.n	80021a6 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3734      	adds	r7, #52	@ 0x34
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd90      	pop	{r4, r7, pc}
 80021b0:	58000400 	.word	0x58000400
 80021b4:	11c1808c 	.word	0x11c1808c

080021b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e12d      	b.n	8002428 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021cc:	4b98      	ldr	r3, [pc, #608]	@ (8002430 <HAL_RCC_ClockConfig+0x278>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d91b      	bls.n	8002212 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021da:	4b95      	ldr	r3, [pc, #596]	@ (8002430 <HAL_RCC_ClockConfig+0x278>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 0207 	bic.w	r2, r3, #7
 80021e2:	4993      	ldr	r1, [pc, #588]	@ (8002430 <HAL_RCC_ClockConfig+0x278>)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021ea:	f7fe feab 	bl	8000f44 <HAL_GetTick>
 80021ee:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80021f2:	f7fe fea7 	bl	8000f44 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e111      	b.n	8002428 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002204:	4b8a      	ldr	r3, [pc, #552]	@ (8002430 <HAL_RCC_ClockConfig+0x278>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d1ef      	bne.n	80021f2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d016      	beq.n	800224c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff fb2d 	bl	8001882 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002228:	f7fe fe8c 	bl	8000f44 <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002230:	f7fe fe88 	bl	8000f44 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e0f2      	b.n	8002428 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002242:	f7ff fc27 	bl	8001a94 <LL_RCC_IsActiveFlag_HPRE>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f1      	beq.n	8002230 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	2b00      	cmp	r3, #0
 8002256:	d016      	beq.n	8002286 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fb24 	bl	80018aa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002262:	f7fe fe6f 	bl	8000f44 <HAL_GetTick>
 8002266:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800226a:	f7fe fe6b 	bl	8000f44 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e0d5      	b.n	8002428 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800227c:	f7ff fc1c 	bl	8001ab8 <LL_RCC_IsActiveFlag_C2HPRE>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f1      	beq.n	800226a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d016      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fb1d 	bl	80018d6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800229c:	f7fe fe52 	bl	8000f44 <HAL_GetTick>
 80022a0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022a4:	f7fe fe4e 	bl	8000f44 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e0b8      	b.n	8002428 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80022b6:	f7ff fc12 	bl	8001ade <LL_RCC_IsActiveFlag_SHDHPRE>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f1      	beq.n	80022a4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d016      	beq.n	80022fa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fb17 	bl	8001904 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022d6:	f7fe fe35 	bl	8000f44 <HAL_GetTick>
 80022da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022de:	f7fe fe31 	bl	8000f44 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e09b      	b.n	8002428 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80022f0:	f7ff fc08 	bl	8001b04 <LL_RCC_IsActiveFlag_PPRE1>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f1      	beq.n	80022de <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d017      	beq.n	8002336 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fb0d 	bl	800192c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002312:	f7fe fe17 	bl	8000f44 <HAL_GetTick>
 8002316:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002318:	e008      	b.n	800232c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800231a:	f7fe fe13 	bl	8000f44 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e07d      	b.n	8002428 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800232c:	f7ff fbfc 	bl	8001b28 <LL_RCC_IsActiveFlag_PPRE2>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f1      	beq.n	800231a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d043      	beq.n	80023ca <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d106      	bne.n	8002358 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800234a:	f7ff f8e1 	bl	8001510 <LL_RCC_HSE_IsReady>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d11e      	bne.n	8002392 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e067      	b.n	8002428 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b03      	cmp	r3, #3
 800235e:	d106      	bne.n	800236e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002360:	f7ff fb55 	bl	8001a0e <LL_RCC_PLL_IsReady>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d113      	bne.n	8002392 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e05c      	b.n	8002428 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002376:	f7ff fa15 	bl	80017a4 <LL_RCC_MSI_IsReady>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d108      	bne.n	8002392 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e051      	b.n	8002428 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002384:	f7ff f8f4 	bl	8001570 <LL_RCC_HSI_IsReady>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e04a      	b.n	8002428 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fa53 	bl	8001842 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800239c:	f7fe fdd2 	bl	8000f44 <HAL_GetTick>
 80023a0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a4:	f7fe fdce 	bl	8000f44 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e036      	b.n	8002428 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	f7ff fa56 	bl	800186a <LL_RCC_GetSysClkSource>
 80023be:	4602      	mov	r2, r0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d1ec      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ca:	4b19      	ldr	r3, [pc, #100]	@ (8002430 <HAL_RCC_ClockConfig+0x278>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d21b      	bcs.n	8002410 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d8:	4b15      	ldr	r3, [pc, #84]	@ (8002430 <HAL_RCC_ClockConfig+0x278>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f023 0207 	bic.w	r2, r3, #7
 80023e0:	4913      	ldr	r1, [pc, #76]	@ (8002430 <HAL_RCC_ClockConfig+0x278>)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e8:	f7fe fdac 	bl	8000f44 <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80023f0:	f7fe fda8 	bl	8000f44 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e012      	b.n	8002428 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <HAL_RCC_ClockConfig+0x278>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d1ef      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002410:	f000 f87e 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 8002414:	4603      	mov	r3, r0
 8002416:	4a07      	ldr	r2, [pc, #28]	@ (8002434 <HAL_RCC_ClockConfig+0x27c>)
 8002418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800241a:	f7fe fd9f 	bl	8000f5c <HAL_GetTickPrio>
 800241e:	4603      	mov	r3, r0
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f9b3 	bl	800078c <HAL_InitTick>
 8002426:	4603      	mov	r3, r0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	58004000 	.word	0x58004000
 8002434:	20000008 	.word	0x20000008

08002438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243e:	f7ff fa14 	bl	800186a <LL_RCC_GetSysClkSource>
 8002442:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10a      	bne.n	8002460 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800244a:	f7ff f9d0 	bl	80017ee <LL_RCC_MSI_GetRange>
 800244e:	4603      	mov	r3, r0
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	4a2b      	ldr	r2, [pc, #172]	@ (8002504 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	e04b      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b04      	cmp	r3, #4
 8002464:	d102      	bne.n	800246c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002466:	4b28      	ldr	r3, [pc, #160]	@ (8002508 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	e045      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b08      	cmp	r3, #8
 8002470:	d10a      	bne.n	8002488 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002472:	f7ff f81d 	bl	80014b0 <LL_RCC_HSE_IsEnabledDiv2>
 8002476:	4603      	mov	r3, r0
 8002478:	2b01      	cmp	r3, #1
 800247a:	d102      	bne.n	8002482 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800247c:	4b22      	ldr	r3, [pc, #136]	@ (8002508 <HAL_RCC_GetSysClockFreq+0xd0>)
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	e03a      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002482:	4b22      	ldr	r3, [pc, #136]	@ (800250c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	e037      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002488:	f7ff faf8 	bl	8001a7c <LL_RCC_PLL_GetMainSource>
 800248c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d003      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0x64>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	2b03      	cmp	r3, #3
 8002498:	d003      	beq.n	80024a2 <HAL_RCC_GetSysClockFreq+0x6a>
 800249a:	e00d      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800249c:	4b1a      	ldr	r3, [pc, #104]	@ (8002508 <HAL_RCC_GetSysClockFreq+0xd0>)
 800249e:	60bb      	str	r3, [r7, #8]
        break;
 80024a0:	e015      	b.n	80024ce <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80024a2:	f7ff f805 	bl	80014b0 <LL_RCC_HSE_IsEnabledDiv2>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d102      	bne.n	80024b2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80024ac:	4b16      	ldr	r3, [pc, #88]	@ (8002508 <HAL_RCC_GetSysClockFreq+0xd0>)
 80024ae:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80024b0:	e00d      	b.n	80024ce <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80024b2:	4b16      	ldr	r3, [pc, #88]	@ (800250c <HAL_RCC_GetSysClockFreq+0xd4>)
 80024b4:	60bb      	str	r3, [r7, #8]
        break;
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80024b8:	f7ff f999 	bl	80017ee <LL_RCC_MSI_GetRange>
 80024bc:	4603      	mov	r3, r0
 80024be:	091b      	lsrs	r3, r3, #4
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002504 <HAL_RCC_GetSysClockFreq+0xcc>)
 80024c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ca:	60bb      	str	r3, [r7, #8]
        break;
 80024cc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80024ce:	f7ff fab0 	bl	8001a32 <LL_RCC_PLL_GetN>
 80024d2:	4602      	mov	r2, r0
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	fb03 f402 	mul.w	r4, r3, r2
 80024da:	f7ff fac3 	bl	8001a64 <LL_RCC_PLL_GetDivider>
 80024de:	4603      	mov	r3, r0
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	3301      	adds	r3, #1
 80024e4:	fbb4 f4f3 	udiv	r4, r4, r3
 80024e8:	f7ff fab0 	bl	8001a4c <LL_RCC_PLL_GetR>
 80024ec:	4603      	mov	r3, r0
 80024ee:	0f5b      	lsrs	r3, r3, #29
 80024f0:	3301      	adds	r3, #1
 80024f2:	fbb4 f3f3 	udiv	r3, r4, r3
 80024f6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80024f8:	68fb      	ldr	r3, [r7, #12]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd90      	pop	{r4, r7, pc}
 8002502:	bf00      	nop
 8002504:	08007294 	.word	0x08007294
 8002508:	00f42400 	.word	0x00f42400
 800250c:	01e84800 	.word	0x01e84800

08002510 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002510:	b598      	push	{r3, r4, r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002514:	f7ff ff90 	bl	8002438 <HAL_RCC_GetSysClockFreq>
 8002518:	4604      	mov	r4, r0
 800251a:	f7ff fa1b 	bl	8001954 <LL_RCC_GetAHBPrescaler>
 800251e:	4603      	mov	r3, r0
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	4a03      	ldr	r2, [pc, #12]	@ (8002534 <HAL_RCC_GetHCLKFreq+0x24>)
 8002528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002530:	4618      	mov	r0, r3
 8002532:	bd98      	pop	{r3, r4, r7, pc}
 8002534:	08007234 	.word	0x08007234

08002538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002538:	b598      	push	{r3, r4, r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800253c:	f7ff ffe8 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 8002540:	4604      	mov	r4, r0
 8002542:	f7ff fa2e 	bl	80019a2 <LL_RCC_GetAPB1Prescaler>
 8002546:	4603      	mov	r3, r0
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	4a04      	ldr	r2, [pc, #16]	@ (8002560 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002554:	f003 031f 	and.w	r3, r3, #31
 8002558:	fa24 f303 	lsr.w	r3, r4, r3
}
 800255c:	4618      	mov	r0, r3
 800255e:	bd98      	pop	{r3, r4, r7, pc}
 8002560:	08007274 	.word	0x08007274

08002564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002564:	b598      	push	{r3, r4, r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002568:	f7ff ffd2 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 800256c:	4604      	mov	r4, r0
 800256e:	f7ff fa24 	bl	80019ba <LL_RCC_GetAPB2Prescaler>
 8002572:	4603      	mov	r3, r0
 8002574:	0adb      	lsrs	r3, r3, #11
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	4a04      	ldr	r2, [pc, #16]	@ (800258c <HAL_RCC_GetPCLK2Freq+0x28>)
 800257c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002588:	4618      	mov	r0, r3
 800258a:	bd98      	pop	{r3, r4, r7, pc}
 800258c:	08007274 	.word	0x08007274

08002590 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	226f      	movs	r2, #111	@ 0x6f
 800259e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80025a0:	f7ff f963 	bl	800186a <LL_RCC_GetSysClkSource>
 80025a4:	4602      	mov	r2, r0
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80025aa:	f7ff f9d3 	bl	8001954 <LL_RCC_GetAHBPrescaler>
 80025ae:	4602      	mov	r2, r0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80025b4:	f7ff f9f5 	bl	80019a2 <LL_RCC_GetAPB1Prescaler>
 80025b8:	4602      	mov	r2, r0
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80025be:	f7ff f9fc 	bl	80019ba <LL_RCC_GetAPB2Prescaler>
 80025c2:	4602      	mov	r2, r0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80025c8:	f7ff f9d0 	bl	800196c <LL_C2_RCC_GetAHBPrescaler>
 80025cc:	4602      	mov	r2, r0
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80025d2:	f7ff f9d8 	bl	8001986 <LL_RCC_GetAHB4Prescaler>
 80025d6:	4602      	mov	r2, r0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80025dc:	4b04      	ldr	r3, [pc, #16]	@ (80025f0 <HAL_RCC_GetClockConfig+0x60>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0207 	and.w	r2, r3, #7
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	601a      	str	r2, [r3, #0]
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	58004000 	.word	0x58004000

080025f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2bb0      	cmp	r3, #176	@ 0xb0
 8002600:	d903      	bls.n	800260a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002602:	4b14      	ldr	r3, [pc, #80]	@ (8002654 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8002604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	e007      	b.n	800261a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	4a10      	ldr	r2, [pc, #64]	@ (8002654 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8002614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002618:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800261a:	f7ff f9b4 	bl	8001986 <LL_RCC_GetAHB4Prescaler>
 800261e:	4603      	mov	r3, r0
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	4a0c      	ldr	r2, [pc, #48]	@ (8002658 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002632:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	4a09      	ldr	r2, [pc, #36]	@ (800265c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	0c9b      	lsrs	r3, r3, #18
 800263e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f80c 	bl	8002660 <RCC_SetFlashLatency>
 8002648:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	08007294 	.word	0x08007294
 8002658:	08007234 	.word	0x08007234
 800265c:	431bde83 	.word	0x431bde83

08002660 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b08f      	sub	sp, #60	@ 0x3c
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800266a:	4b24      	ldr	r3, [pc, #144]	@ (80026fc <RCC_SetFlashLatency+0x9c>)
 800266c:	f107 041c 	add.w	r4, r7, #28
 8002670:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002672:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002676:	4b22      	ldr	r3, [pc, #136]	@ (8002700 <RCC_SetFlashLatency+0xa0>)
 8002678:	f107 040c 	add.w	r4, r7, #12
 800267c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800267e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002682:	2300      	movs	r3, #0
 8002684:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002686:	2300      	movs	r3, #0
 8002688:	633b      	str	r3, [r7, #48]	@ 0x30
 800268a:	e013      	b.n	80026b4 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800268c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	3338      	adds	r3, #56	@ 0x38
 8002692:	443b      	add	r3, r7
 8002694:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	429a      	cmp	r2, r3
 800269c:	d807      	bhi.n	80026ae <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 800269e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	3338      	adds	r3, #56	@ 0x38
 80026a4:	443b      	add	r3, r7
 80026a6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80026aa:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 80026ac:	e005      	b.n	80026ba <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80026ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b0:	3301      	adds	r3, #1
 80026b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80026b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d9e8      	bls.n	800268c <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80026ba:	4b12      	ldr	r3, [pc, #72]	@ (8002704 <RCC_SetFlashLatency+0xa4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 0207 	bic.w	r2, r3, #7
 80026c2:	4910      	ldr	r1, [pc, #64]	@ (8002704 <RCC_SetFlashLatency+0xa4>)
 80026c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80026ca:	f7fe fc3b 	bl	8000f44 <HAL_GetTick>
 80026ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80026d0:	e008      	b.n	80026e4 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026d2:	f7fe fc37 	bl	8000f44 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e007      	b.n	80026f4 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80026e4:	4b07      	ldr	r3, [pc, #28]	@ (8002704 <RCC_SetFlashLatency+0xa4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d1ef      	bne.n	80026d2 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	373c      	adds	r7, #60	@ 0x3c
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd90      	pop	{r4, r7, pc}
 80026fc:	0800716c 	.word	0x0800716c
 8002700:	0800717c 	.word	0x0800717c
 8002704:	58004000 	.word	0x58004000

08002708 <LL_RCC_LSE_IsEnabled>:
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800270c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <LL_RCC_LSE_IsEnabled+0x18>
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <LL_RCC_LSE_IsEnabled+0x1a>
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <LL_RCC_LSE_IsReady>:
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b02      	cmp	r3, #2
 800273e:	d101      	bne.n	8002744 <LL_RCC_LSE_IsReady+0x18>
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <LL_RCC_LSE_IsReady+0x1a>
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_RCC_MSI_EnablePLLMode>:
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800275e:	f043 0304 	orr.w	r3, r3, #4
 8002762:	6013      	str	r3, [r2, #0]
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <LL_RCC_SetRFWKPClockSource>:
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800277a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800277e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002782:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <LL_RCC_SetSMPSClockSource>:
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80027a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a8:	f023 0203 	bic.w	r2, r3, #3
 80027ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <LL_RCC_SetSMPSPrescaler>:
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80027ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4313      	orrs	r3, r2
 80027dc:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <LL_RCC_SetUSARTClockSource>:
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80027f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fa:	f023 0203 	bic.w	r2, r3, #3
 80027fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <LL_RCC_SetLPUARTClockSource>:
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800281e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002826:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800282a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_RCC_SetI2CClockSource>:
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800284a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800284e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800285a:	43db      	mvns	r3, r3
 800285c:	401a      	ands	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002866:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <LL_RCC_SetLPTIMClockSource>:
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002888:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	0c1b      	lsrs	r3, r3, #16
 8002890:	041b      	lsls	r3, r3, #16
 8002892:	43db      	mvns	r3, r3
 8002894:	401a      	ands	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	041b      	lsls	r3, r3, #16
 800289a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_RCC_SetRNGClockSource>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80028b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c0:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80028c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_RCC_SetCLK48ClockSource>:
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80028e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_RCC_SetADCClockSource>:
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002918:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800291c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <LL_RCC_SetRTCClockSource>:
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800293c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002944:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002948:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_RCC_GetRTCClockSource>:
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800296c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_RCC_ForceBackupDomainReset>:
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002986:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800298a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800298e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002992:	bf00      	nop
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <LL_RCC_ReleaseBackupDomainReset>:
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80029a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b088      	sub	sp, #32
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80029c6:	2300      	movs	r3, #0
 80029c8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80029ca:	2300      	movs	r3, #0
 80029cc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d046      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80029da:	f7ff ffc1 	bl	8002960 <LL_RCC_GetRTCClockSource>
 80029de:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d03c      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80029ea:	f7fe fd51 	bl	8001490 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d105      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff9b 	bl	8002934 <LL_RCC_SetRTCClockSource>
 80029fe:	e02e      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002a00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a08:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002a0a:	f7ff ffb6 	bl	800297a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002a0e:	f7ff ffc5 	bl	800299c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002a20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002a2a:	f7ff fe6d 	bl	8002708 <LL_RCC_LSE_IsEnabled>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d114      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a34:	f7fe fa86 	bl	8000f44 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3c:	f7fe fa82 	bl	8000f44 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d902      	bls.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	77fb      	strb	r3, [r7, #31]
              break;
 8002a52:	e004      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002a54:	f7ff fe6a 	bl	800272c <LL_RCC_LSE_IsReady>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d1ee      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002a5e:	7ffb      	ldrb	r3, [r7, #31]
 8002a60:	77bb      	strb	r3, [r7, #30]
 8002a62:	e001      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a64:	7ffb      	ldrb	r3, [r7, #31]
 8002a66:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d004      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff feb6 	bl	80027ea <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d004      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fec1 	bl	8002816 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d004      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fee9 	bl	800287c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d004      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fede 	bl	800287c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d004      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff feb6 	bl	8002842 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d02b      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aea:	d008      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x140>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002af4:	d003      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x140>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d105      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fed4 	bl	80028b0 <LL_RCC_SetRNGClockSource>
 8002b08:	e00a      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	2000      	movs	r0, #0
 8002b16:	f7ff fecb 	bl	80028b0 <LL_RCC_SetRNGClockSource>
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f7ff fede 	bl	80028dc <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8002b28:	d107      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b38:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d011      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fedc 	bl	8002908 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b58:	d107      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b68:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d004      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fdf7 	bl	800276e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d009      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff fe16 	bl	80027c2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fdfd 	bl	800279a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002ba0:	7fbb      	ldrb	r3, [r7, #30]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3720      	adds	r7, #32
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8002bae:	f7ff fdcf 	bl	8002750 <LL_RCC_MSI_EnablePLLMode>
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e049      	b.n	8002c5c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f841 	bl	8002c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	f000 f9bd 	bl	8002f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d001      	beq.n	8002c90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e036      	b.n	8002cfe <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a17      	ldr	r2, [pc, #92]	@ (8002d0c <HAL_TIM_Base_Start_IT+0x94>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d004      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x44>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cba:	d115      	bne.n	8002ce8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	4b13      	ldr	r3, [pc, #76]	@ (8002d10 <HAL_TIM_Base_Start_IT+0x98>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d015      	beq.n	8002cfa <HAL_TIM_Base_Start_IT+0x82>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd4:	d011      	beq.n	8002cfa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0201 	orr.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce6:	e008      	b.n	8002cfa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e000      	b.n	8002cfc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40012c00 	.word	0x40012c00
 8002d10:	00010007 	.word	0x00010007

08002d14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d020      	beq.n	8002d78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01b      	beq.n	8002d78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0202 	mvn.w	r2, #2
 8002d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f8e9 	bl	8002f36 <HAL_TIM_IC_CaptureCallback>
 8002d64:	e005      	b.n	8002d72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f8db 	bl	8002f22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f8ec 	bl	8002f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d020      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01b      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0204 	mvn.w	r2, #4
 8002d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f8c3 	bl	8002f36 <HAL_TIM_IC_CaptureCallback>
 8002db0:	e005      	b.n	8002dbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f8b5 	bl	8002f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f8c6 	bl	8002f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d020      	beq.n	8002e10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01b      	beq.n	8002e10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0208 	mvn.w	r2, #8
 8002de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2204      	movs	r2, #4
 8002de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f89d 	bl	8002f36 <HAL_TIM_IC_CaptureCallback>
 8002dfc:	e005      	b.n	8002e0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f88f 	bl	8002f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f8a0 	bl	8002f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d020      	beq.n	8002e5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01b      	beq.n	8002e5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0210 	mvn.w	r2, #16
 8002e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2208      	movs	r2, #8
 8002e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f877 	bl	8002f36 <HAL_TIM_IC_CaptureCallback>
 8002e48:	e005      	b.n	8002e56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f869 	bl	8002f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f87a 	bl	8002f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00c      	beq.n	8002e80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d007      	beq.n	8002e80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0201 	mvn.w	r2, #1
 8002e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fd fc4e 	bl	800071c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d104      	bne.n	8002e94 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00c      	beq.n	8002eae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f8c9 	bl	8003040 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00c      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d007      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f8c1 	bl	8003054 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00c      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f834 	bl	8002f5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00c      	beq.n	8002f1a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f06f 0220 	mvn.w	r2, #32
 8002f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f889 	bl	800302c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f1a:	bf00      	nop
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a28      	ldr	r2, [pc, #160]	@ (8003028 <TIM_Base_SetConfig+0xb4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d003      	beq.n	8002f94 <TIM_Base_SetConfig+0x20>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f92:	d108      	bne.n	8002fa6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8003028 <TIM_Base_SetConfig+0xb4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d003      	beq.n	8002fb6 <TIM_Base_SetConfig+0x42>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fb4:	d108      	bne.n	8002fc8 <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a0e      	ldr	r2, [pc, #56]	@ (8003028 <TIM_Base_SetConfig+0xb4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d103      	bne.n	8002ffc <TIM_Base_SetConfig+0x88>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b01      	cmp	r3, #1
 800300c:	d105      	bne.n	800301a <TIM_Base_SetConfig+0xa6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f023 0201 	bic.w	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	611a      	str	r2, [r3, #16]
  }
}
 800301a:	bf00      	nop
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40012c00 	.word	0x40012c00

0800302c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <LL_RCC_GetUSARTClockSource>:
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003074:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4013      	ands	r3, r2
}
 800307c:	4618      	mov	r0, r3
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_RCC_GetLPUARTClockSource>:
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003094:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4013      	ands	r3, r2
}
 800309c:	4618      	mov	r0, r3
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e042      	b.n	8003140 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d106      	bne.n	80030d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f83b 	bl	8003148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2224      	movs	r2, #36	@ 0x24
 80030d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0201 	bic.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fae8 	bl	80036c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f8bd 	bl	8003278 <UART_SetConfig>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e01b      	b.n	8003140 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003116:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003126:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fb67 	bl	800380c <UART_CheckIdleState>
 800313e:	4603      	mov	r3, r0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08a      	sub	sp, #40	@ 0x28
 8003160:	af02      	add	r7, sp, #8
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	4613      	mov	r3, r2
 800316a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003172:	2b20      	cmp	r3, #32
 8003174:	d17b      	bne.n	800326e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <HAL_UART_Transmit+0x26>
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e074      	b.n	8003270 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2221      	movs	r2, #33	@ 0x21
 8003192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003196:	f7fd fed5 	bl	8000f44 <HAL_GetTick>
 800319a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	88fa      	ldrh	r2, [r7, #6]
 80031a0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	88fa      	ldrh	r2, [r7, #6]
 80031a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031b4:	d108      	bne.n	80031c8 <HAL_UART_Transmit+0x6c>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d104      	bne.n	80031c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	61bb      	str	r3, [r7, #24]
 80031c6:	e003      	b.n	80031d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031d0:	e030      	b.n	8003234 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2200      	movs	r2, #0
 80031da:	2180      	movs	r1, #128	@ 0x80
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fbbf 	bl	8003960 <UART_WaitOnFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e03d      	b.n	8003270 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10b      	bne.n	8003212 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003208:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	3302      	adds	r3, #2
 800320e:	61bb      	str	r3, [r7, #24]
 8003210:	e007      	b.n	8003222 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	781a      	ldrb	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	3301      	adds	r3, #1
 8003220:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1c8      	bne.n	80031d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2200      	movs	r2, #0
 8003248:	2140      	movs	r1, #64	@ 0x40
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fb88 	bl	8003960 <UART_WaitOnFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e006      	b.n	8003270 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	e000      	b.n	8003270 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800326e:	2302      	movs	r3, #2
  }
}
 8003270:	4618      	mov	r0, r3
 8003272:	3720      	adds	r7, #32
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800327c:	b08c      	sub	sp, #48	@ 0x30
 800327e:	af00      	add	r7, sp, #0
 8003280:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	431a      	orrs	r2, r3
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	431a      	orrs	r2, r3
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	4313      	orrs	r3, r2
 800329e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	4baf      	ldr	r3, [pc, #700]	@ (8003564 <UART_SetConfig+0x2ec>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032b0:	430b      	orrs	r3, r1
 80032b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4aa4      	ldr	r2, [pc, #656]	@ (8003568 <UART_SetConfig+0x2f0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d004      	beq.n	80032e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032e0:	4313      	orrs	r3, r2
 80032e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80032ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032f8:	430b      	orrs	r3, r1
 80032fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003302:	f023 010f 	bic.w	r1, r3, #15
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a95      	ldr	r2, [pc, #596]	@ (800356c <UART_SetConfig+0x2f4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d125      	bne.n	8003368 <UART_SetConfig+0xf0>
 800331c:	2003      	movs	r0, #3
 800331e:	f7ff fea3 	bl	8003068 <LL_RCC_GetUSARTClockSource>
 8003322:	4603      	mov	r3, r0
 8003324:	2b03      	cmp	r3, #3
 8003326:	d81b      	bhi.n	8003360 <UART_SetConfig+0xe8>
 8003328:	a201      	add	r2, pc, #4	@ (adr r2, 8003330 <UART_SetConfig+0xb8>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003341 	.word	0x08003341
 8003334:	08003351 	.word	0x08003351
 8003338:	08003349 	.word	0x08003349
 800333c:	08003359 	.word	0x08003359
 8003340:	2301      	movs	r3, #1
 8003342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003346:	e042      	b.n	80033ce <UART_SetConfig+0x156>
 8003348:	2302      	movs	r3, #2
 800334a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800334e:	e03e      	b.n	80033ce <UART_SetConfig+0x156>
 8003350:	2304      	movs	r3, #4
 8003352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003356:	e03a      	b.n	80033ce <UART_SetConfig+0x156>
 8003358:	2308      	movs	r3, #8
 800335a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800335e:	e036      	b.n	80033ce <UART_SetConfig+0x156>
 8003360:	2310      	movs	r3, #16
 8003362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003366:	e032      	b.n	80033ce <UART_SetConfig+0x156>
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a7e      	ldr	r2, [pc, #504]	@ (8003568 <UART_SetConfig+0x2f0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d12a      	bne.n	80033c8 <UART_SetConfig+0x150>
 8003372:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003376:	f7ff fe87 	bl	8003088 <LL_RCC_GetLPUARTClockSource>
 800337a:	4603      	mov	r3, r0
 800337c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003380:	d01a      	beq.n	80033b8 <UART_SetConfig+0x140>
 8003382:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003386:	d81b      	bhi.n	80033c0 <UART_SetConfig+0x148>
 8003388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800338c:	d00c      	beq.n	80033a8 <UART_SetConfig+0x130>
 800338e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003392:	d815      	bhi.n	80033c0 <UART_SetConfig+0x148>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <UART_SetConfig+0x128>
 8003398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800339c:	d008      	beq.n	80033b0 <UART_SetConfig+0x138>
 800339e:	e00f      	b.n	80033c0 <UART_SetConfig+0x148>
 80033a0:	2300      	movs	r3, #0
 80033a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033a6:	e012      	b.n	80033ce <UART_SetConfig+0x156>
 80033a8:	2302      	movs	r3, #2
 80033aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033ae:	e00e      	b.n	80033ce <UART_SetConfig+0x156>
 80033b0:	2304      	movs	r3, #4
 80033b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033b6:	e00a      	b.n	80033ce <UART_SetConfig+0x156>
 80033b8:	2308      	movs	r3, #8
 80033ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033be:	e006      	b.n	80033ce <UART_SetConfig+0x156>
 80033c0:	2310      	movs	r3, #16
 80033c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033c6:	e002      	b.n	80033ce <UART_SetConfig+0x156>
 80033c8:	2310      	movs	r3, #16
 80033ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a65      	ldr	r2, [pc, #404]	@ (8003568 <UART_SetConfig+0x2f0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	f040 8097 	bne.w	8003508 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d823      	bhi.n	800342a <UART_SetConfig+0x1b2>
 80033e2:	a201      	add	r2, pc, #4	@ (adr r2, 80033e8 <UART_SetConfig+0x170>)
 80033e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e8:	0800340d 	.word	0x0800340d
 80033ec:	0800342b 	.word	0x0800342b
 80033f0:	08003415 	.word	0x08003415
 80033f4:	0800342b 	.word	0x0800342b
 80033f8:	0800341b 	.word	0x0800341b
 80033fc:	0800342b 	.word	0x0800342b
 8003400:	0800342b 	.word	0x0800342b
 8003404:	0800342b 	.word	0x0800342b
 8003408:	08003423 	.word	0x08003423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800340c:	f7ff f894 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
 8003410:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003412:	e010      	b.n	8003436 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003414:	4b56      	ldr	r3, [pc, #344]	@ (8003570 <UART_SetConfig+0x2f8>)
 8003416:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003418:	e00d      	b.n	8003436 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800341a:	f7ff f80d 	bl	8002438 <HAL_RCC_GetSysClockFreq>
 800341e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003420:	e009      	b.n	8003436 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003426:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003428:	e005      	b.n	8003436 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003434:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 812b 	beq.w	8003694 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003442:	4a4c      	ldr	r2, [pc, #304]	@ (8003574 <UART_SetConfig+0x2fc>)
 8003444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003448:	461a      	mov	r2, r3
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003450:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	429a      	cmp	r2, r3
 8003460:	d305      	bcc.n	800346e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	429a      	cmp	r2, r3
 800346c:	d903      	bls.n	8003476 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003474:	e10e      	b.n	8003694 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003478:	2200      	movs	r2, #0
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	60fa      	str	r2, [r7, #12]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003482:	4a3c      	ldr	r2, [pc, #240]	@ (8003574 <UART_SetConfig+0x2fc>)
 8003484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003488:	b29b      	uxth	r3, r3
 800348a:	2200      	movs	r2, #0
 800348c:	603b      	str	r3, [r7, #0]
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003494:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003498:	f7fc fe72 	bl	8000180 <__aeabi_uldivmod>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4610      	mov	r0, r2
 80034a2:	4619      	mov	r1, r3
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	020b      	lsls	r3, r1, #8
 80034ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80034b2:	0202      	lsls	r2, r0, #8
 80034b4:	6979      	ldr	r1, [r7, #20]
 80034b6:	6849      	ldr	r1, [r1, #4]
 80034b8:	0849      	lsrs	r1, r1, #1
 80034ba:	2000      	movs	r0, #0
 80034bc:	460c      	mov	r4, r1
 80034be:	4605      	mov	r5, r0
 80034c0:	eb12 0804 	adds.w	r8, r2, r4
 80034c4:	eb43 0905 	adc.w	r9, r3, r5
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	469a      	mov	sl, r3
 80034d0:	4693      	mov	fp, r2
 80034d2:	4652      	mov	r2, sl
 80034d4:	465b      	mov	r3, fp
 80034d6:	4640      	mov	r0, r8
 80034d8:	4649      	mov	r1, r9
 80034da:	f7fc fe51 	bl	8000180 <__aeabi_uldivmod>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4613      	mov	r3, r2
 80034e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034ec:	d308      	bcc.n	8003500 <UART_SetConfig+0x288>
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034f4:	d204      	bcs.n	8003500 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6a3a      	ldr	r2, [r7, #32]
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	e0c9      	b.n	8003694 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003506:	e0c5      	b.n	8003694 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003510:	d16d      	bne.n	80035ee <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003512:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003516:	3b01      	subs	r3, #1
 8003518:	2b07      	cmp	r3, #7
 800351a:	d82d      	bhi.n	8003578 <UART_SetConfig+0x300>
 800351c:	a201      	add	r2, pc, #4	@ (adr r2, 8003524 <UART_SetConfig+0x2ac>)
 800351e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003522:	bf00      	nop
 8003524:	08003545 	.word	0x08003545
 8003528:	0800354d 	.word	0x0800354d
 800352c:	08003579 	.word	0x08003579
 8003530:	08003553 	.word	0x08003553
 8003534:	08003579 	.word	0x08003579
 8003538:	08003579 	.word	0x08003579
 800353c:	08003579 	.word	0x08003579
 8003540:	0800355b 	.word	0x0800355b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003544:	f7ff f80e 	bl	8002564 <HAL_RCC_GetPCLK2Freq>
 8003548:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800354a:	e01b      	b.n	8003584 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800354c:	4b08      	ldr	r3, [pc, #32]	@ (8003570 <UART_SetConfig+0x2f8>)
 800354e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003550:	e018      	b.n	8003584 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003552:	f7fe ff71 	bl	8002438 <HAL_RCC_GetSysClockFreq>
 8003556:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003558:	e014      	b.n	8003584 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800355a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800355e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003560:	e010      	b.n	8003584 <UART_SetConfig+0x30c>
 8003562:	bf00      	nop
 8003564:	cfff69f3 	.word	0xcfff69f3
 8003568:	40008000 	.word	0x40008000
 800356c:	40013800 	.word	0x40013800
 8003570:	00f42400 	.word	0x00f42400
 8003574:	080072f4 	.word	0x080072f4
      default:
        pclk = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003582:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 8084 	beq.w	8003694 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	4a4b      	ldr	r2, [pc, #300]	@ (80036c0 <UART_SetConfig+0x448>)
 8003592:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003596:	461a      	mov	r2, r3
 8003598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359a:	fbb3 f3f2 	udiv	r3, r3, r2
 800359e:	005a      	lsls	r2, r3, #1
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	085b      	lsrs	r3, r3, #1
 80035a6:	441a      	add	r2, r3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	2b0f      	cmp	r3, #15
 80035b6:	d916      	bls.n	80035e6 <UART_SetConfig+0x36e>
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035be:	d212      	bcs.n	80035e6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	f023 030f 	bic.w	r3, r3, #15
 80035c8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	085b      	lsrs	r3, r3, #1
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	8bfb      	ldrh	r3, [r7, #30]
 80035d8:	4313      	orrs	r3, r2
 80035da:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	8bfa      	ldrh	r2, [r7, #30]
 80035e2:	60da      	str	r2, [r3, #12]
 80035e4:	e056      	b.n	8003694 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80035ec:	e052      	b.n	8003694 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80035f2:	3b01      	subs	r3, #1
 80035f4:	2b07      	cmp	r3, #7
 80035f6:	d822      	bhi.n	800363e <UART_SetConfig+0x3c6>
 80035f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003600 <UART_SetConfig+0x388>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003621 	.word	0x08003621
 8003604:	08003629 	.word	0x08003629
 8003608:	0800363f 	.word	0x0800363f
 800360c:	0800362f 	.word	0x0800362f
 8003610:	0800363f 	.word	0x0800363f
 8003614:	0800363f 	.word	0x0800363f
 8003618:	0800363f 	.word	0x0800363f
 800361c:	08003637 	.word	0x08003637
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003620:	f7fe ffa0 	bl	8002564 <HAL_RCC_GetPCLK2Freq>
 8003624:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003626:	e010      	b.n	800364a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003628:	4b26      	ldr	r3, [pc, #152]	@ (80036c4 <UART_SetConfig+0x44c>)
 800362a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800362c:	e00d      	b.n	800364a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800362e:	f7fe ff03 	bl	8002438 <HAL_RCC_GetSysClockFreq>
 8003632:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003634:	e009      	b.n	800364a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003636:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800363a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800363c:	e005      	b.n	800364a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003648:	bf00      	nop
    }

    if (pclk != 0U)
 800364a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364c:	2b00      	cmp	r3, #0
 800364e:	d021      	beq.n	8003694 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003654:	4a1a      	ldr	r2, [pc, #104]	@ (80036c0 <UART_SetConfig+0x448>)
 8003656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800365a:	461a      	mov	r2, r3
 800365c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	085b      	lsrs	r3, r3, #1
 8003668:	441a      	add	r2, r3
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003672:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	2b0f      	cmp	r3, #15
 8003678:	d909      	bls.n	800368e <UART_SetConfig+0x416>
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003680:	d205      	bcs.n	800368e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	b29a      	uxth	r2, r3
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	60da      	str	r2, [r3, #12]
 800368c:	e002      	b.n	8003694 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2201      	movs	r2, #1
 8003698:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2201      	movs	r2, #1
 80036a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2200      	movs	r2, #0
 80036a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2200      	movs	r2, #0
 80036ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80036b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3730      	adds	r7, #48	@ 0x30
 80036b8:	46bd      	mov	sp, r7
 80036ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036be:	bf00      	nop
 80036c0:	080072f4 	.word	0x080072f4
 80036c4:	00f42400 	.word	0x00f42400

080036c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01a      	beq.n	80037de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037c6:	d10a      	bne.n	80037de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	605a      	str	r2, [r3, #4]
  }
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b098      	sub	sp, #96	@ 0x60
 8003810:	af02      	add	r7, sp, #8
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800381c:	f7fd fb92 	bl	8000f44 <HAL_GetTick>
 8003820:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b08      	cmp	r3, #8
 800382e:	d12f      	bne.n	8003890 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003830:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003838:	2200      	movs	r2, #0
 800383a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f88e 	bl	8003960 <UART_WaitOnFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d022      	beq.n	8003890 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003852:	e853 3f00 	ldrex	r3, [r3]
 8003856:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800385a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800385e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003868:	647b      	str	r3, [r7, #68]	@ 0x44
 800386a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800386e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003870:	e841 2300 	strex	r3, r2, [r1]
 8003874:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1e6      	bne.n	800384a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e063      	b.n	8003958 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b04      	cmp	r3, #4
 800389c:	d149      	bne.n	8003932 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800389e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a6:	2200      	movs	r2, #0
 80038a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f857 	bl	8003960 <UART_WaitOnFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d03c      	beq.n	8003932 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c0:	e853 3f00 	ldrex	r3, [r3]
 80038c4:	623b      	str	r3, [r7, #32]
   return(result);
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80038d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1e6      	bne.n	80038b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3308      	adds	r3, #8
 80038f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	e853 3f00 	ldrex	r3, [r3]
 80038f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f023 0301 	bic.w	r3, r3, #1
 8003900:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	3308      	adds	r3, #8
 8003908:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800390a:	61fa      	str	r2, [r7, #28]
 800390c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390e:	69b9      	ldr	r1, [r7, #24]
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	e841 2300 	strex	r3, r2, [r1]
 8003916:	617b      	str	r3, [r7, #20]
   return(result);
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1e5      	bne.n	80038ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e012      	b.n	8003958 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2220      	movs	r2, #32
 8003936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3758      	adds	r7, #88	@ 0x58
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	4613      	mov	r3, r2
 800396e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003970:	e04f      	b.n	8003a12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003978:	d04b      	beq.n	8003a12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397a:	f7fd fae3 	bl	8000f44 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	429a      	cmp	r2, r3
 8003988:	d302      	bcc.n	8003990 <UART_WaitOnFlagUntilTimeout+0x30>
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e04e      	b.n	8003a32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d037      	beq.n	8003a12 <UART_WaitOnFlagUntilTimeout+0xb2>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b80      	cmp	r3, #128	@ 0x80
 80039a6:	d034      	beq.n	8003a12 <UART_WaitOnFlagUntilTimeout+0xb2>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b40      	cmp	r3, #64	@ 0x40
 80039ac:	d031      	beq.n	8003a12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d110      	bne.n	80039de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2208      	movs	r2, #8
 80039c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f838 	bl	8003a3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2208      	movs	r2, #8
 80039ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e029      	b.n	8003a32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039ec:	d111      	bne.n	8003a12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f81e 	bl	8003a3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e00f      	b.n	8003a32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	bf0c      	ite	eq
 8003a22:	2301      	moveq	r3, #1
 8003a24:	2300      	movne	r3, #0
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	461a      	mov	r2, r3
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d0a0      	beq.n	8003972 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b095      	sub	sp, #84	@ 0x54
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4a:	e853 3f00 	ldrex	r3, [r3]
 8003a4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a60:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e6      	bne.n	8003a42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3308      	adds	r3, #8
 8003a7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	e853 3f00 	ldrex	r3, [r3]
 8003a82:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a8a:	f023 0301 	bic.w	r3, r3, #1
 8003a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3308      	adds	r3, #8
 8003a96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003aa0:	e841 2300 	strex	r3, r2, [r1]
 8003aa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e3      	bne.n	8003a74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d118      	bne.n	8003ae6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	e853 3f00 	ldrex	r3, [r3]
 8003ac0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f023 0310 	bic.w	r3, r3, #16
 8003ac8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ad2:	61bb      	str	r3, [r7, #24]
 8003ad4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad6:	6979      	ldr	r1, [r7, #20]
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	e841 2300 	strex	r3, r2, [r1]
 8003ade:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1e6      	bne.n	8003ab4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003afa:	bf00      	nop
 8003afc:	3754      	adds	r7, #84	@ 0x54
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
	...

08003b08 <__NVIC_SetPriority>:
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	6039      	str	r1, [r7, #0]
 8003b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	db0a      	blt.n	8003b32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	490c      	ldr	r1, [pc, #48]	@ (8003b54 <__NVIC_SetPriority+0x4c>)
 8003b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b26:	0112      	lsls	r2, r2, #4
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003b30:	e00a      	b.n	8003b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	4908      	ldr	r1, [pc, #32]	@ (8003b58 <__NVIC_SetPriority+0x50>)
 8003b38:	79fb      	ldrb	r3, [r7, #7]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	3b04      	subs	r3, #4
 8003b40:	0112      	lsls	r2, r2, #4
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	440b      	add	r3, r1
 8003b46:	761a      	strb	r2, [r3, #24]
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	e000e100 	.word	0xe000e100
 8003b58:	e000ed00 	.word	0xe000ed00

08003b5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003b60:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <SysTick_Handler+0x1c>)
 8003b62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003b64:	f001 fd46 	bl	80055f4 <xTaskGetSchedulerState>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d001      	beq.n	8003b72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003b6e:	f002 fb3b 	bl	80061e8 <xPortSysTickHandler>
  }
}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	e000e010 	.word	0xe000e010

08003b7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003b80:	2100      	movs	r1, #0
 8003b82:	f06f 0004 	mvn.w	r0, #4
 8003b86:	f7ff ffbf 	bl	8003b08 <__NVIC_SetPriority>
#endif
}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b96:	f3ef 8305 	mrs	r3, IPSR
 8003b9a:	603b      	str	r3, [r7, #0]
  return(result);
 8003b9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003ba2:	f06f 0305 	mvn.w	r3, #5
 8003ba6:	607b      	str	r3, [r7, #4]
 8003ba8:	e00c      	b.n	8003bc4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003baa:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd4 <osKernelInitialize+0x44>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d105      	bne.n	8003bbe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003bb2:	4b08      	ldr	r3, [pc, #32]	@ (8003bd4 <osKernelInitialize+0x44>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	607b      	str	r3, [r7, #4]
 8003bbc:	e002      	b.n	8003bc4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003bc4:	687b      	ldr	r3, [r7, #4]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	200001e8 	.word	0x200001e8

08003bd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bde:	f3ef 8305 	mrs	r3, IPSR
 8003be2:	603b      	str	r3, [r7, #0]
  return(result);
 8003be4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003bea:	f06f 0305 	mvn.w	r3, #5
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	e010      	b.n	8003c14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8003c20 <osKernelStart+0x48>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d109      	bne.n	8003c0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003bfa:	f7ff ffbf 	bl	8003b7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003bfe:	4b08      	ldr	r3, [pc, #32]	@ (8003c20 <osKernelStart+0x48>)
 8003c00:	2202      	movs	r2, #2
 8003c02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003c04:	f001 f892 	bl	8004d2c <vTaskStartScheduler>
      stat = osOK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	607b      	str	r3, [r7, #4]
 8003c0c:	e002      	b.n	8003c14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003c14:	687b      	ldr	r3, [r7, #4]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	200001e8 	.word	0x200001e8

08003c24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08e      	sub	sp, #56	@ 0x38
 8003c28:	af04      	add	r7, sp, #16
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c34:	f3ef 8305 	mrs	r3, IPSR
 8003c38:	617b      	str	r3, [r7, #20]
  return(result);
 8003c3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d17e      	bne.n	8003d3e <osThreadNew+0x11a>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d07b      	beq.n	8003d3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003c46:	2380      	movs	r3, #128	@ 0x80
 8003c48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003c4a:	2318      	movs	r3, #24
 8003c4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003c52:	f04f 33ff 	mov.w	r3, #4294967295
 8003c56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d045      	beq.n	8003cea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <osThreadNew+0x48>
        name = attr->name;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <osThreadNew+0x6e>
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	2b38      	cmp	r3, #56	@ 0x38
 8003c84:	d805      	bhi.n	8003c92 <osThreadNew+0x6e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <osThreadNew+0x72>
        return (NULL);
 8003c92:	2300      	movs	r3, #0
 8003c94:	e054      	b.n	8003d40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	089b      	lsrs	r3, r3, #2
 8003ca4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00e      	beq.n	8003ccc <osThreadNew+0xa8>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	2ba7      	cmp	r3, #167	@ 0xa7
 8003cb4:	d90a      	bls.n	8003ccc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d006      	beq.n	8003ccc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <osThreadNew+0xa8>
        mem = 1;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	61bb      	str	r3, [r7, #24]
 8003cca:	e010      	b.n	8003cee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10c      	bne.n	8003cee <osThreadNew+0xca>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d108      	bne.n	8003cee <osThreadNew+0xca>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d104      	bne.n	8003cee <osThreadNew+0xca>
          mem = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61bb      	str	r3, [r7, #24]
 8003ce8:	e001      	b.n	8003cee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d110      	bne.n	8003d16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cfc:	9202      	str	r2, [sp, #8]
 8003cfe:	9301      	str	r3, [sp, #4]
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	6a3a      	ldr	r2, [r7, #32]
 8003d08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 fe1a 	bl	8004944 <xTaskCreateStatic>
 8003d10:	4603      	mov	r3, r0
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	e013      	b.n	8003d3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d110      	bne.n	8003d3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	f107 0310 	add.w	r3, r7, #16
 8003d24:	9301      	str	r3, [sp, #4]
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 fe68 	bl	8004a04 <xTaskCreate>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d001      	beq.n	8003d3e <osThreadNew+0x11a>
            hTask = NULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d3e:	693b      	ldr	r3, [r7, #16]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3728      	adds	r7, #40	@ 0x28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d50:	f3ef 8305 	mrs	r3, IPSR
 8003d54:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <osDelay+0x1c>
    stat = osErrorISR;
 8003d5c:	f06f 0305 	mvn.w	r3, #5
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	e007      	b.n	8003d74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 ffa6 	bl	8004cc0 <vTaskDelay>
    }
  }

  return (stat);
 8003d74:	68fb      	ldr	r3, [r7, #12]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4a07      	ldr	r2, [pc, #28]	@ (8003dac <vApplicationGetIdleTaskMemory+0x2c>)
 8003d90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4a06      	ldr	r2, [pc, #24]	@ (8003db0 <vApplicationGetIdleTaskMemory+0x30>)
 8003d96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2280      	movs	r2, #128	@ 0x80
 8003d9c:	601a      	str	r2, [r3, #0]
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	200001ec 	.word	0x200001ec
 8003db0:	20000294 	.word	0x20000294

08003db4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4a07      	ldr	r2, [pc, #28]	@ (8003de0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003dc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4a06      	ldr	r2, [pc, #24]	@ (8003de4 <vApplicationGetTimerTaskMemory+0x30>)
 8003dca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003dd2:	601a      	str	r2, [r3, #0]
}
 8003dd4:	bf00      	nop
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	20000494 	.word	0x20000494
 8003de4:	2000053c 	.word	0x2000053c

08003de8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f103 0208 	add.w	r2, r3, #8
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003e00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f103 0208 	add.w	r2, r3, #8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f103 0208 	add.w	r2, r3, #8
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e42:	b480      	push	{r7}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	601a      	str	r2, [r3, #0]
}
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b085      	sub	sp, #20
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d103      	bne.n	8003eaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	e00c      	b.n	8003ec4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3308      	adds	r3, #8
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	e002      	b.n	8003eb8 <vListInsert+0x2e>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d2f6      	bcs.n	8003eb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	601a      	str	r2, [r3, #0]
}
 8003ef0:	bf00      	nop
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6892      	ldr	r2, [r2, #8]
 8003f12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6852      	ldr	r2, [r2, #4]
 8003f1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d103      	bne.n	8003f30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	1e5a      	subs	r2, r3, #1
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10b      	bne.n	8003f7c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f76:	bf00      	nop
 8003f78:	bf00      	nop
 8003f7a:	e7fd      	b.n	8003f78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f7c:	f002 f8a4 	bl	80060c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f88:	68f9      	ldr	r1, [r7, #12]
 8003f8a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	441a      	add	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fac:	3b01      	subs	r3, #1
 8003fae:	68f9      	ldr	r1, [r7, #12]
 8003fb0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003fb2:	fb01 f303 	mul.w	r3, r1, r3
 8003fb6:	441a      	add	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	22ff      	movs	r2, #255	@ 0xff
 8003fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	22ff      	movs	r2, #255	@ 0xff
 8003fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d114      	bne.n	8003ffc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d01a      	beq.n	8004010 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	3310      	adds	r3, #16
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f001 f942 	bl	8005268 <xTaskRemoveFromEventList>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d012      	beq.n	8004010 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fea:	4b0d      	ldr	r3, [pc, #52]	@ (8004020 <xQueueGenericReset+0xd0>)
 8003fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	e009      	b.n	8004010 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3310      	adds	r3, #16
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff fef1 	bl	8003de8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3324      	adds	r3, #36	@ 0x24
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff feec 	bl	8003de8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004010:	f002 f88c 	bl	800612c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004014:	2301      	movs	r3, #1
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	e000ed04 	.word	0xe000ed04

08004024 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08e      	sub	sp, #56	@ 0x38
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10b      	bne.n	8004050 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800404a:	bf00      	nop
 800404c:	bf00      	nop
 800404e:	e7fd      	b.n	800404c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10b      	bne.n	800406e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004068:	bf00      	nop
 800406a:	bf00      	nop
 800406c:	e7fd      	b.n	800406a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <xQueueGenericCreateStatic+0x56>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <xQueueGenericCreateStatic+0x5a>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <xQueueGenericCreateStatic+0x5c>
 800407e:	2300      	movs	r3, #0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10b      	bne.n	800409c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	623b      	str	r3, [r7, #32]
}
 8004096:	bf00      	nop
 8004098:	bf00      	nop
 800409a:	e7fd      	b.n	8004098 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d102      	bne.n	80040a8 <xQueueGenericCreateStatic+0x84>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <xQueueGenericCreateStatic+0x88>
 80040a8:	2301      	movs	r3, #1
 80040aa:	e000      	b.n	80040ae <xQueueGenericCreateStatic+0x8a>
 80040ac:	2300      	movs	r3, #0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10b      	bne.n	80040ca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	61fb      	str	r3, [r7, #28]
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	e7fd      	b.n	80040c6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040ca:	2350      	movs	r3, #80	@ 0x50
 80040cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b50      	cmp	r3, #80	@ 0x50
 80040d2:	d00b      	beq.n	80040ec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	61bb      	str	r3, [r7, #24]
}
 80040e6:	bf00      	nop
 80040e8:	bf00      	nop
 80040ea:	e7fd      	b.n	80040e8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80040ec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80040f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00d      	beq.n	8004114 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004100:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	4613      	mov	r3, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f805 	bl	800411e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004116:	4618      	mov	r0, r3
 8004118:	3730      	adds	r7, #48	@ 0x30
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d103      	bne.n	800413a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	e002      	b.n	8004140 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800414c:	2101      	movs	r1, #1
 800414e:	69b8      	ldr	r0, [r7, #24]
 8004150:	f7ff fefe 	bl	8003f50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	78fa      	ldrb	r2, [r7, #3]
 8004158:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08e      	sub	sp, #56	@ 0x38
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004172:	2300      	movs	r3, #0
 8004174:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800417a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10b      	bne.n	8004198 <xQueueGenericSend+0x34>
	__asm volatile
 8004180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004192:	bf00      	nop
 8004194:	bf00      	nop
 8004196:	e7fd      	b.n	8004194 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d103      	bne.n	80041a6 <xQueueGenericSend+0x42>
 800419e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <xQueueGenericSend+0x46>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <xQueueGenericSend+0x48>
 80041aa:	2300      	movs	r3, #0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10b      	bne.n	80041c8 <xQueueGenericSend+0x64>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80041c2:	bf00      	nop
 80041c4:	bf00      	nop
 80041c6:	e7fd      	b.n	80041c4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d103      	bne.n	80041d6 <xQueueGenericSend+0x72>
 80041ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <xQueueGenericSend+0x76>
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <xQueueGenericSend+0x78>
 80041da:	2300      	movs	r3, #0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10b      	bne.n	80041f8 <xQueueGenericSend+0x94>
	__asm volatile
 80041e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	623b      	str	r3, [r7, #32]
}
 80041f2:	bf00      	nop
 80041f4:	bf00      	nop
 80041f6:	e7fd      	b.n	80041f4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041f8:	f001 f9fc 	bl	80055f4 <xTaskGetSchedulerState>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d102      	bne.n	8004208 <xQueueGenericSend+0xa4>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <xQueueGenericSend+0xa8>
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <xQueueGenericSend+0xaa>
 800420c:	2300      	movs	r3, #0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10b      	bne.n	800422a <xQueueGenericSend+0xc6>
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	61fb      	str	r3, [r7, #28]
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	e7fd      	b.n	8004226 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800422a:	f001 ff4d 	bl	80060c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800422e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004230:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <xQueueGenericSend+0xdc>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d129      	bne.n	8004294 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004246:	f000 fa0f 	bl	8004668 <prvCopyDataToQueue>
 800424a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800424c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	2b00      	cmp	r3, #0
 8004252:	d010      	beq.n	8004276 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004256:	3324      	adds	r3, #36	@ 0x24
 8004258:	4618      	mov	r0, r3
 800425a:	f001 f805 	bl	8005268 <xTaskRemoveFromEventList>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d013      	beq.n	800428c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004264:	4b3f      	ldr	r3, [pc, #252]	@ (8004364 <xQueueGenericSend+0x200>)
 8004266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	e00a      	b.n	800428c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800427c:	4b39      	ldr	r3, [pc, #228]	@ (8004364 <xQueueGenericSend+0x200>)
 800427e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800428c:	f001 ff4e 	bl	800612c <vPortExitCritical>
				return pdPASS;
 8004290:	2301      	movs	r3, #1
 8004292:	e063      	b.n	800435c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d103      	bne.n	80042a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800429a:	f001 ff47 	bl	800612c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800429e:	2300      	movs	r3, #0
 80042a0:	e05c      	b.n	800435c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d106      	bne.n	80042b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042a8:	f107 0314 	add.w	r3, r7, #20
 80042ac:	4618      	mov	r0, r3
 80042ae:	f001 f83f 	bl	8005330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042b2:	2301      	movs	r3, #1
 80042b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042b6:	f001 ff39 	bl	800612c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042ba:	f000 fda7 	bl	8004e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042be:	f001 ff03 	bl	80060c8 <vPortEnterCritical>
 80042c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042c8:	b25b      	sxtb	r3, r3
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	d103      	bne.n	80042d8 <xQueueGenericSend+0x174>
 80042d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042de:	b25b      	sxtb	r3, r3
 80042e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e4:	d103      	bne.n	80042ee <xQueueGenericSend+0x18a>
 80042e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042ee:	f001 ff1d 	bl	800612c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042f2:	1d3a      	adds	r2, r7, #4
 80042f4:	f107 0314 	add.w	r3, r7, #20
 80042f8:	4611      	mov	r1, r2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f001 f82e 	bl	800535c <xTaskCheckForTimeOut>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d124      	bne.n	8004350 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004306:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004308:	f000 faa6 	bl	8004858 <prvIsQueueFull>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d018      	beq.n	8004344 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004314:	3310      	adds	r3, #16
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	4611      	mov	r1, r2
 800431a:	4618      	mov	r0, r3
 800431c:	f000 ff52 	bl	80051c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004320:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004322:	f000 fa31 	bl	8004788 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004326:	f000 fd7f 	bl	8004e28 <xTaskResumeAll>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	f47f af7c 	bne.w	800422a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004332:	4b0c      	ldr	r3, [pc, #48]	@ (8004364 <xQueueGenericSend+0x200>)
 8004334:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	e772      	b.n	800422a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004344:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004346:	f000 fa1f 	bl	8004788 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800434a:	f000 fd6d 	bl	8004e28 <xTaskResumeAll>
 800434e:	e76c      	b.n	800422a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004350:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004352:	f000 fa19 	bl	8004788 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004356:	f000 fd67 	bl	8004e28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800435a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800435c:	4618      	mov	r0, r3
 800435e:	3738      	adds	r7, #56	@ 0x38
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	e000ed04 	.word	0xe000ed04

08004368 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b090      	sub	sp, #64	@ 0x40
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800437a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10b      	bne.n	8004398 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004392:	bf00      	nop
 8004394:	bf00      	nop
 8004396:	e7fd      	b.n	8004394 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d103      	bne.n	80043a6 <xQueueGenericSendFromISR+0x3e>
 800439e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <xQueueGenericSendFromISR+0x42>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <xQueueGenericSendFromISR+0x44>
 80043aa:	2300      	movs	r3, #0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10b      	bne.n	80043c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80043c2:	bf00      	nop
 80043c4:	bf00      	nop
 80043c6:	e7fd      	b.n	80043c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d103      	bne.n	80043d6 <xQueueGenericSendFromISR+0x6e>
 80043ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <xQueueGenericSendFromISR+0x72>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <xQueueGenericSendFromISR+0x74>
 80043da:	2300      	movs	r3, #0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10b      	bne.n	80043f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80043e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	623b      	str	r3, [r7, #32]
}
 80043f2:	bf00      	nop
 80043f4:	bf00      	nop
 80043f6:	e7fd      	b.n	80043f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043f8:	f001 ff46 	bl	8006288 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043fc:	f3ef 8211 	mrs	r2, BASEPRI
 8004400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	61fa      	str	r2, [r7, #28]
 8004412:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004414:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004416:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800441a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800441c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800441e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004420:	429a      	cmp	r2, r3
 8004422:	d302      	bcc.n	800442a <xQueueGenericSendFromISR+0xc2>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d12f      	bne.n	800448a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800442a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004430:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004438:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	68b9      	ldr	r1, [r7, #8]
 800443e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004440:	f000 f912 	bl	8004668 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004444:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d112      	bne.n	8004474 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800444e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004452:	2b00      	cmp	r3, #0
 8004454:	d016      	beq.n	8004484 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004458:	3324      	adds	r3, #36	@ 0x24
 800445a:	4618      	mov	r0, r3
 800445c:	f000 ff04 	bl	8005268 <xTaskRemoveFromEventList>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00e      	beq.n	8004484 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00b      	beq.n	8004484 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	e007      	b.n	8004484 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004474:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004478:	3301      	adds	r3, #1
 800447a:	b2db      	uxtb	r3, r3
 800447c:	b25a      	sxtb	r2, r3
 800447e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004484:	2301      	movs	r3, #1
 8004486:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004488:	e001      	b.n	800448e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800448a:	2300      	movs	r3, #0
 800448c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800448e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004490:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004498:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800449a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800449c:	4618      	mov	r0, r3
 800449e:	3740      	adds	r7, #64	@ 0x40
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08c      	sub	sp, #48	@ 0x30
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044b0:	2300      	movs	r3, #0
 80044b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10b      	bne.n	80044d6 <xQueueReceive+0x32>
	__asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	623b      	str	r3, [r7, #32]
}
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	e7fd      	b.n	80044d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d103      	bne.n	80044e4 <xQueueReceive+0x40>
 80044dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <xQueueReceive+0x44>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <xQueueReceive+0x46>
 80044e8:	2300      	movs	r3, #0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10b      	bne.n	8004506 <xQueueReceive+0x62>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	61fb      	str	r3, [r7, #28]
}
 8004500:	bf00      	nop
 8004502:	bf00      	nop
 8004504:	e7fd      	b.n	8004502 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004506:	f001 f875 	bl	80055f4 <xTaskGetSchedulerState>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d102      	bne.n	8004516 <xQueueReceive+0x72>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <xQueueReceive+0x76>
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <xQueueReceive+0x78>
 800451a:	2300      	movs	r3, #0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10b      	bne.n	8004538 <xQueueReceive+0x94>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	61bb      	str	r3, [r7, #24]
}
 8004532:	bf00      	nop
 8004534:	bf00      	nop
 8004536:	e7fd      	b.n	8004534 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004538:	f001 fdc6 	bl	80060c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800453c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004540:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01f      	beq.n	8004588 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800454c:	f000 f8f6 	bl	800473c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004552:	1e5a      	subs	r2, r3, #1
 8004554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004556:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00f      	beq.n	8004580 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004562:	3310      	adds	r3, #16
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fe7f 	bl	8005268 <xTaskRemoveFromEventList>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d007      	beq.n	8004580 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004570:	4b3c      	ldr	r3, [pc, #240]	@ (8004664 <xQueueReceive+0x1c0>)
 8004572:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004580:	f001 fdd4 	bl	800612c <vPortExitCritical>
				return pdPASS;
 8004584:	2301      	movs	r3, #1
 8004586:	e069      	b.n	800465c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d103      	bne.n	8004596 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800458e:	f001 fdcd 	bl	800612c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004592:	2300      	movs	r3, #0
 8004594:	e062      	b.n	800465c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004598:	2b00      	cmp	r3, #0
 800459a:	d106      	bne.n	80045aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800459c:	f107 0310 	add.w	r3, r7, #16
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fec5 	bl	8005330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045a6:	2301      	movs	r3, #1
 80045a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045aa:	f001 fdbf 	bl	800612c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045ae:	f000 fc2d 	bl	8004e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045b2:	f001 fd89 	bl	80060c8 <vPortEnterCritical>
 80045b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045bc:	b25b      	sxtb	r3, r3
 80045be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c2:	d103      	bne.n	80045cc <xQueueReceive+0x128>
 80045c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045d2:	b25b      	sxtb	r3, r3
 80045d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d8:	d103      	bne.n	80045e2 <xQueueReceive+0x13e>
 80045da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045e2:	f001 fda3 	bl	800612c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045e6:	1d3a      	adds	r2, r7, #4
 80045e8:	f107 0310 	add.w	r3, r7, #16
 80045ec:	4611      	mov	r1, r2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 feb4 	bl	800535c <xTaskCheckForTimeOut>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d123      	bne.n	8004642 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045fc:	f000 f916 	bl	800482c <prvIsQueueEmpty>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d017      	beq.n	8004636 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004608:	3324      	adds	r3, #36	@ 0x24
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	4611      	mov	r1, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fdd8 	bl	80051c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004614:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004616:	f000 f8b7 	bl	8004788 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800461a:	f000 fc05 	bl	8004e28 <xTaskResumeAll>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d189      	bne.n	8004538 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004624:	4b0f      	ldr	r3, [pc, #60]	@ (8004664 <xQueueReceive+0x1c0>)
 8004626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	e780      	b.n	8004538 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004636:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004638:	f000 f8a6 	bl	8004788 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800463c:	f000 fbf4 	bl	8004e28 <xTaskResumeAll>
 8004640:	e77a      	b.n	8004538 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004644:	f000 f8a0 	bl	8004788 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004648:	f000 fbee 	bl	8004e28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800464c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800464e:	f000 f8ed 	bl	800482c <prvIsQueueEmpty>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	f43f af6f 	beq.w	8004538 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800465a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800465c:	4618      	mov	r0, r3
 800465e:	3730      	adds	r7, #48	@ 0x30
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	e000ed04 	.word	0xe000ed04

08004668 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004674:	2300      	movs	r3, #0
 8004676:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10d      	bne.n	80046a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d14d      	bne.n	800472a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	4618      	mov	r0, r3
 8004694:	f000 ffcc 	bl	8005630 <xTaskPriorityDisinherit>
 8004698:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	609a      	str	r2, [r3, #8]
 80046a0:	e043      	b.n	800472a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d119      	bne.n	80046dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6858      	ldr	r0, [r3, #4]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b0:	461a      	mov	r2, r3
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	f002 fae1 	bl	8006c7a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c0:	441a      	add	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d32b      	bcc.n	800472a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	605a      	str	r2, [r3, #4]
 80046da:	e026      	b.n	800472a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	68d8      	ldr	r0, [r3, #12]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e4:	461a      	mov	r2, r3
 80046e6:	68b9      	ldr	r1, [r7, #8]
 80046e8:	f002 fac7 	bl	8006c7a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f4:	425b      	negs	r3, r3
 80046f6:	441a      	add	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d207      	bcs.n	8004718 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004710:	425b      	negs	r3, r3
 8004712:	441a      	add	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d105      	bne.n	800472a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	3b01      	subs	r3, #1
 8004728:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004732:	697b      	ldr	r3, [r7, #20]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d018      	beq.n	8004780 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	441a      	add	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	429a      	cmp	r2, r3
 8004766:	d303      	bcc.n	8004770 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68d9      	ldr	r1, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004778:	461a      	mov	r2, r3
 800477a:	6838      	ldr	r0, [r7, #0]
 800477c:	f002 fa7d 	bl	8006c7a <memcpy>
	}
}
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004790:	f001 fc9a 	bl	80060c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800479a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800479c:	e011      	b.n	80047c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d012      	beq.n	80047cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3324      	adds	r3, #36	@ 0x24
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fd5c 	bl	8005268 <xTaskRemoveFromEventList>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80047b6:	f000 fe35 	bl	8005424 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	3b01      	subs	r3, #1
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	dce9      	bgt.n	800479e <prvUnlockQueue+0x16>
 80047ca:	e000      	b.n	80047ce <prvUnlockQueue+0x46>
					break;
 80047cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	22ff      	movs	r2, #255	@ 0xff
 80047d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80047d6:	f001 fca9 	bl	800612c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047da:	f001 fc75 	bl	80060c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047e6:	e011      	b.n	800480c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d012      	beq.n	8004816 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3310      	adds	r3, #16
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fd37 	bl	8005268 <xTaskRemoveFromEventList>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004800:	f000 fe10 	bl	8005424 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004804:	7bbb      	ldrb	r3, [r7, #14]
 8004806:	3b01      	subs	r3, #1
 8004808:	b2db      	uxtb	r3, r3
 800480a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800480c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004810:	2b00      	cmp	r3, #0
 8004812:	dce9      	bgt.n	80047e8 <prvUnlockQueue+0x60>
 8004814:	e000      	b.n	8004818 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004816:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	22ff      	movs	r2, #255	@ 0xff
 800481c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004820:	f001 fc84 	bl	800612c <vPortExitCritical>
}
 8004824:	bf00      	nop
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004834:	f001 fc48 	bl	80060c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483c:	2b00      	cmp	r3, #0
 800483e:	d102      	bne.n	8004846 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004840:	2301      	movs	r3, #1
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	e001      	b.n	800484a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800484a:	f001 fc6f 	bl	800612c <vPortExitCritical>

	return xReturn;
 800484e:	68fb      	ldr	r3, [r7, #12]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004860:	f001 fc32 	bl	80060c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486c:	429a      	cmp	r2, r3
 800486e:	d102      	bne.n	8004876 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004870:	2301      	movs	r3, #1
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	e001      	b.n	800487a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800487a:	f001 fc57 	bl	800612c <vPortExitCritical>

	return xReturn;
 800487e:	68fb      	ldr	r3, [r7, #12]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	e014      	b.n	80048c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004898:	4a0f      	ldr	r2, [pc, #60]	@ (80048d8 <vQueueAddToRegistry+0x50>)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10b      	bne.n	80048bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80048a4:	490c      	ldr	r1, [pc, #48]	@ (80048d8 <vQueueAddToRegistry+0x50>)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80048ae:	4a0a      	ldr	r2, [pc, #40]	@ (80048d8 <vQueueAddToRegistry+0x50>)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	4413      	add	r3, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80048ba:	e006      	b.n	80048ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3301      	adds	r3, #1
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b07      	cmp	r3, #7
 80048c6:	d9e7      	bls.n	8004898 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80048c8:	bf00      	nop
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	2000093c 	.word	0x2000093c

080048dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80048ec:	f001 fbec 	bl	80060c8 <vPortEnterCritical>
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048f6:	b25b      	sxtb	r3, r3
 80048f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fc:	d103      	bne.n	8004906 <vQueueWaitForMessageRestricted+0x2a>
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800490c:	b25b      	sxtb	r3, r3
 800490e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004912:	d103      	bne.n	800491c <vQueueWaitForMessageRestricted+0x40>
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800491c:	f001 fc06 	bl	800612c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004924:	2b00      	cmp	r3, #0
 8004926:	d106      	bne.n	8004936 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	3324      	adds	r3, #36	@ 0x24
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	4618      	mov	r0, r3
 8004932:	f000 fc6d 	bl	8005210 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004936:	6978      	ldr	r0, [r7, #20]
 8004938:	f7ff ff26 	bl	8004788 <prvUnlockQueue>
	}
 800493c:	bf00      	nop
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08e      	sub	sp, #56	@ 0x38
 8004948:	af04      	add	r7, sp, #16
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10b      	bne.n	8004970 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	623b      	str	r3, [r7, #32]
}
 800496a:	bf00      	nop
 800496c:	bf00      	nop
 800496e:	e7fd      	b.n	800496c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10b      	bne.n	800498e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	61fb      	str	r3, [r7, #28]
}
 8004988:	bf00      	nop
 800498a:	bf00      	nop
 800498c:	e7fd      	b.n	800498a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800498e:	23a8      	movs	r3, #168	@ 0xa8
 8004990:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2ba8      	cmp	r3, #168	@ 0xa8
 8004996:	d00b      	beq.n	80049b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	61bb      	str	r3, [r7, #24]
}
 80049aa:	bf00      	nop
 80049ac:	bf00      	nop
 80049ae:	e7fd      	b.n	80049ac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80049b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80049b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d01e      	beq.n	80049f6 <xTaskCreateStatic+0xb2>
 80049b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d01b      	beq.n	80049f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80049c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80049d0:	2300      	movs	r3, #0
 80049d2:	9303      	str	r3, [sp, #12]
 80049d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d6:	9302      	str	r3, [sp, #8]
 80049d8:	f107 0314 	add.w	r3, r7, #20
 80049dc:	9301      	str	r3, [sp, #4]
 80049de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	68b9      	ldr	r1, [r7, #8]
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 f851 	bl	8004a90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80049f0:	f000 f8f6 	bl	8004be0 <prvAddNewTaskToReadyList>
 80049f4:	e001      	b.n	80049fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049fa:	697b      	ldr	r3, [r7, #20]
	}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3728      	adds	r7, #40	@ 0x28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08c      	sub	sp, #48	@ 0x30
 8004a08:	af04      	add	r7, sp, #16
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	603b      	str	r3, [r7, #0]
 8004a10:	4613      	mov	r3, r2
 8004a12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a14:	88fb      	ldrh	r3, [r7, #6]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f001 fc77 	bl	800630c <pvPortMalloc>
 8004a1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00e      	beq.n	8004a44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a26:	20a8      	movs	r0, #168	@ 0xa8
 8004a28:	f001 fc70 	bl	800630c <pvPortMalloc>
 8004a2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a3a:	e005      	b.n	8004a48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a3c:	6978      	ldr	r0, [r7, #20]
 8004a3e:	f001 fd33 	bl	80064a8 <vPortFree>
 8004a42:	e001      	b.n	8004a48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d017      	beq.n	8004a7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a56:	88fa      	ldrh	r2, [r7, #6]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9303      	str	r3, [sp, #12]
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	9302      	str	r3, [sp, #8]
 8004a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a62:	9301      	str	r3, [sp, #4]
 8004a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	68b9      	ldr	r1, [r7, #8]
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 f80f 	bl	8004a90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a72:	69f8      	ldr	r0, [r7, #28]
 8004a74:	f000 f8b4 	bl	8004be0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	61bb      	str	r3, [r7, #24]
 8004a7c:	e002      	b.n	8004a84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a84:	69bb      	ldr	r3, [r7, #24]
	}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3720      	adds	r7, #32
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	21a5      	movs	r1, #165	@ 0xa5
 8004aaa:	f002 f815 	bl	8006ad8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	f023 0307 	bic.w	r3, r3, #7
 8004ac6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00b      	beq.n	8004aea <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	617b      	str	r3, [r7, #20]
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop
 8004ae8:	e7fd      	b.n	8004ae6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d01f      	beq.n	8004b30 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004af0:	2300      	movs	r3, #0
 8004af2:	61fb      	str	r3, [r7, #28]
 8004af4:	e012      	b.n	8004b1c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	4413      	add	r3, r2
 8004afc:	7819      	ldrb	r1, [r3, #0]
 8004afe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	4413      	add	r3, r2
 8004b04:	3334      	adds	r3, #52	@ 0x34
 8004b06:	460a      	mov	r2, r1
 8004b08:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	4413      	add	r3, r2
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d006      	beq.n	8004b24 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	61fb      	str	r3, [r7, #28]
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	2b0f      	cmp	r3, #15
 8004b20:	d9e9      	bls.n	8004af6 <prvInitialiseNewTask+0x66>
 8004b22:	e000      	b.n	8004b26 <prvInitialiseNewTask+0x96>
			{
				break;
 8004b24:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b2e:	e003      	b.n	8004b38 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b3a:	2b37      	cmp	r3, #55	@ 0x37
 8004b3c:	d901      	bls.n	8004b42 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b3e:	2337      	movs	r3, #55	@ 0x37
 8004b40:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b46:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b4c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b50:	2200      	movs	r2, #0
 8004b52:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b56:	3304      	adds	r3, #4
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff f965 	bl	8003e28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b60:	3318      	adds	r3, #24
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff f960 	bl	8003e28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b70:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b7c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b80:	2200      	movs	r2, #0
 8004b82:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b90:	3354      	adds	r3, #84	@ 0x54
 8004b92:	224c      	movs	r2, #76	@ 0x4c
 8004b94:	2100      	movs	r1, #0
 8004b96:	4618      	mov	r0, r3
 8004b98:	f001 ff9e 	bl	8006ad8 <memset>
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8004bd4 <prvInitialiseNewTask+0x144>)
 8004ba0:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba4:	4a0c      	ldr	r2, [pc, #48]	@ (8004bd8 <prvInitialiseNewTask+0x148>)
 8004ba6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004baa:	4a0c      	ldr	r2, [pc, #48]	@ (8004bdc <prvInitialiseNewTask+0x14c>)
 8004bac:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	68f9      	ldr	r1, [r7, #12]
 8004bb2:	69b8      	ldr	r0, [r7, #24]
 8004bb4:	f001 f95a 	bl	8005e6c <pxPortInitialiseStack>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bbc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bca:	bf00      	nop
 8004bcc:	3720      	adds	r7, #32
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20004bd0 	.word	0x20004bd0
 8004bd8:	20004c38 	.word	0x20004c38
 8004bdc:	20004ca0 	.word	0x20004ca0

08004be0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004be8:	f001 fa6e 	bl	80060c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004bec:	4b2d      	ldr	r3, [pc, #180]	@ (8004ca4 <prvAddNewTaskToReadyList+0xc4>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	4a2c      	ldr	r2, [pc, #176]	@ (8004ca4 <prvAddNewTaskToReadyList+0xc4>)
 8004bf4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8004ca8 <prvAddNewTaskToReadyList+0xc8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d109      	bne.n	8004c12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8004ca8 <prvAddNewTaskToReadyList+0xc8>)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c04:	4b27      	ldr	r3, [pc, #156]	@ (8004ca4 <prvAddNewTaskToReadyList+0xc4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d110      	bne.n	8004c2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c0c:	f000 fc2e 	bl	800546c <prvInitialiseTaskLists>
 8004c10:	e00d      	b.n	8004c2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c12:	4b26      	ldr	r3, [pc, #152]	@ (8004cac <prvAddNewTaskToReadyList+0xcc>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d109      	bne.n	8004c2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c1a:	4b23      	ldr	r3, [pc, #140]	@ (8004ca8 <prvAddNewTaskToReadyList+0xc8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d802      	bhi.n	8004c2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c28:	4a1f      	ldr	r2, [pc, #124]	@ (8004ca8 <prvAddNewTaskToReadyList+0xc8>)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c2e:	4b20      	ldr	r3, [pc, #128]	@ (8004cb0 <prvAddNewTaskToReadyList+0xd0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3301      	adds	r3, #1
 8004c34:	4a1e      	ldr	r2, [pc, #120]	@ (8004cb0 <prvAddNewTaskToReadyList+0xd0>)
 8004c36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004c38:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb0 <prvAddNewTaskToReadyList+0xd0>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c44:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb4 <prvAddNewTaskToReadyList+0xd4>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d903      	bls.n	8004c54 <prvAddNewTaskToReadyList+0x74>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c50:	4a18      	ldr	r2, [pc, #96]	@ (8004cb4 <prvAddNewTaskToReadyList+0xd4>)
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4a15      	ldr	r2, [pc, #84]	@ (8004cb8 <prvAddNewTaskToReadyList+0xd8>)
 8004c62:	441a      	add	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3304      	adds	r3, #4
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	f7ff f8e9 	bl	8003e42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c70:	f001 fa5c 	bl	800612c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c74:	4b0d      	ldr	r3, [pc, #52]	@ (8004cac <prvAddNewTaskToReadyList+0xcc>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00e      	beq.n	8004c9a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca8 <prvAddNewTaskToReadyList+0xc8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d207      	bcs.n	8004c9a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004cbc <prvAddNewTaskToReadyList+0xdc>)
 8004c8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c9a:	bf00      	nop
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000e50 	.word	0x20000e50
 8004ca8:	2000097c 	.word	0x2000097c
 8004cac:	20000e5c 	.word	0x20000e5c
 8004cb0:	20000e6c 	.word	0x20000e6c
 8004cb4:	20000e58 	.word	0x20000e58
 8004cb8:	20000980 	.word	0x20000980
 8004cbc:	e000ed04 	.word	0xe000ed04

08004cc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d018      	beq.n	8004d04 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004cd2:	4b14      	ldr	r3, [pc, #80]	@ (8004d24 <vTaskDelay+0x64>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00b      	beq.n	8004cf2 <vTaskDelay+0x32>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	60bb      	str	r3, [r7, #8]
}
 8004cec:	bf00      	nop
 8004cee:	bf00      	nop
 8004cf0:	e7fd      	b.n	8004cee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004cf2:	f000 f88b 	bl	8004e0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fd09 	bl	8005710 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004cfe:	f000 f893 	bl	8004e28 <xTaskResumeAll>
 8004d02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d107      	bne.n	8004d1a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004d0a:	4b07      	ldr	r3, [pc, #28]	@ (8004d28 <vTaskDelay+0x68>)
 8004d0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d1a:	bf00      	nop
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20000e78 	.word	0x20000e78
 8004d28:	e000ed04 	.word	0xe000ed04

08004d2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08a      	sub	sp, #40	@ 0x28
 8004d30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d3a:	463a      	mov	r2, r7
 8004d3c:	1d39      	adds	r1, r7, #4
 8004d3e:	f107 0308 	add.w	r3, r7, #8
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff f81c 	bl	8003d80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d48:	6839      	ldr	r1, [r7, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	9202      	str	r2, [sp, #8]
 8004d50:	9301      	str	r3, [sp, #4]
 8004d52:	2300      	movs	r3, #0
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	2300      	movs	r3, #0
 8004d58:	460a      	mov	r2, r1
 8004d5a:	4924      	ldr	r1, [pc, #144]	@ (8004dec <vTaskStartScheduler+0xc0>)
 8004d5c:	4824      	ldr	r0, [pc, #144]	@ (8004df0 <vTaskStartScheduler+0xc4>)
 8004d5e:	f7ff fdf1 	bl	8004944 <xTaskCreateStatic>
 8004d62:	4603      	mov	r3, r0
 8004d64:	4a23      	ldr	r2, [pc, #140]	@ (8004df4 <vTaskStartScheduler+0xc8>)
 8004d66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d68:	4b22      	ldr	r3, [pc, #136]	@ (8004df4 <vTaskStartScheduler+0xc8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d70:	2301      	movs	r3, #1
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	e001      	b.n	8004d7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d102      	bne.n	8004d86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004d80:	f000 fd1a 	bl	80057b8 <xTimerCreateTimerTask>
 8004d84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d11b      	bne.n	8004dc4 <vTaskStartScheduler+0x98>
	__asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	613b      	str	r3, [r7, #16]
}
 8004d9e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004da0:	4b15      	ldr	r3, [pc, #84]	@ (8004df8 <vTaskStartScheduler+0xcc>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3354      	adds	r3, #84	@ 0x54
 8004da6:	4a15      	ldr	r2, [pc, #84]	@ (8004dfc <vTaskStartScheduler+0xd0>)
 8004da8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004daa:	4b15      	ldr	r3, [pc, #84]	@ (8004e00 <vTaskStartScheduler+0xd4>)
 8004dac:	f04f 32ff 	mov.w	r2, #4294967295
 8004db0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004db2:	4b14      	ldr	r3, [pc, #80]	@ (8004e04 <vTaskStartScheduler+0xd8>)
 8004db4:	2201      	movs	r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004db8:	4b13      	ldr	r3, [pc, #76]	@ (8004e08 <vTaskStartScheduler+0xdc>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004dbe:	f001 f8df 	bl	8005f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004dc2:	e00f      	b.n	8004de4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dca:	d10b      	bne.n	8004de4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	60fb      	str	r3, [r7, #12]
}
 8004dde:	bf00      	nop
 8004de0:	bf00      	nop
 8004de2:	e7fd      	b.n	8004de0 <vTaskStartScheduler+0xb4>
}
 8004de4:	bf00      	nop
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	0800718c 	.word	0x0800718c
 8004df0:	0800543d 	.word	0x0800543d
 8004df4:	20000e74 	.word	0x20000e74
 8004df8:	2000097c 	.word	0x2000097c
 8004dfc:	20000058 	.word	0x20000058
 8004e00:	20000e70 	.word	0x20000e70
 8004e04:	20000e5c 	.word	0x20000e5c
 8004e08:	20000e54 	.word	0x20000e54

08004e0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e10:	4b04      	ldr	r3, [pc, #16]	@ (8004e24 <vTaskSuspendAll+0x18>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3301      	adds	r3, #1
 8004e16:	4a03      	ldr	r2, [pc, #12]	@ (8004e24 <vTaskSuspendAll+0x18>)
 8004e18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e1a:	bf00      	nop
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	20000e78 	.word	0x20000e78

08004e28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e36:	4b42      	ldr	r3, [pc, #264]	@ (8004f40 <xTaskResumeAll+0x118>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10b      	bne.n	8004e56 <xTaskResumeAll+0x2e>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	603b      	str	r3, [r7, #0]
}
 8004e50:	bf00      	nop
 8004e52:	bf00      	nop
 8004e54:	e7fd      	b.n	8004e52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e56:	f001 f937 	bl	80060c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e5a:	4b39      	ldr	r3, [pc, #228]	@ (8004f40 <xTaskResumeAll+0x118>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	4a37      	ldr	r2, [pc, #220]	@ (8004f40 <xTaskResumeAll+0x118>)
 8004e62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e64:	4b36      	ldr	r3, [pc, #216]	@ (8004f40 <xTaskResumeAll+0x118>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d162      	bne.n	8004f32 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e6c:	4b35      	ldr	r3, [pc, #212]	@ (8004f44 <xTaskResumeAll+0x11c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d05e      	beq.n	8004f32 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e74:	e02f      	b.n	8004ed6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e76:	4b34      	ldr	r3, [pc, #208]	@ (8004f48 <xTaskResumeAll+0x120>)
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3318      	adds	r3, #24
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff f83a 	bl	8003efc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff f835 	bl	8003efc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e96:	4b2d      	ldr	r3, [pc, #180]	@ (8004f4c <xTaskResumeAll+0x124>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d903      	bls.n	8004ea6 <xTaskResumeAll+0x7e>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8004f4c <xTaskResumeAll+0x124>)
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eaa:	4613      	mov	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4a27      	ldr	r2, [pc, #156]	@ (8004f50 <xTaskResumeAll+0x128>)
 8004eb4:	441a      	add	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	f7fe ffc0 	bl	8003e42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec6:	4b23      	ldr	r3, [pc, #140]	@ (8004f54 <xTaskResumeAll+0x12c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d302      	bcc.n	8004ed6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004ed0:	4b21      	ldr	r3, [pc, #132]	@ (8004f58 <xTaskResumeAll+0x130>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8004f48 <xTaskResumeAll+0x120>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1cb      	bne.n	8004e76 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ee4:	f000 fb66 	bl	80055b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8004f5c <xTaskResumeAll+0x134>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d010      	beq.n	8004f16 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ef4:	f000 f846 	bl	8004f84 <xTaskIncrementTick>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004efe:	4b16      	ldr	r3, [pc, #88]	@ (8004f58 <xTaskResumeAll+0x130>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1f1      	bne.n	8004ef4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004f10:	4b12      	ldr	r3, [pc, #72]	@ (8004f5c <xTaskResumeAll+0x134>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f16:	4b10      	ldr	r3, [pc, #64]	@ (8004f58 <xTaskResumeAll+0x130>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d009      	beq.n	8004f32 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f22:	4b0f      	ldr	r3, [pc, #60]	@ (8004f60 <xTaskResumeAll+0x138>)
 8004f24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f32:	f001 f8fb 	bl	800612c <vPortExitCritical>

	return xAlreadyYielded;
 8004f36:	68bb      	ldr	r3, [r7, #8]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	20000e78 	.word	0x20000e78
 8004f44:	20000e50 	.word	0x20000e50
 8004f48:	20000e10 	.word	0x20000e10
 8004f4c:	20000e58 	.word	0x20000e58
 8004f50:	20000980 	.word	0x20000980
 8004f54:	2000097c 	.word	0x2000097c
 8004f58:	20000e64 	.word	0x20000e64
 8004f5c:	20000e60 	.word	0x20000e60
 8004f60:	e000ed04 	.word	0xe000ed04

08004f64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f6a:	4b05      	ldr	r3, [pc, #20]	@ (8004f80 <xTaskGetTickCount+0x1c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f70:	687b      	ldr	r3, [r7, #4]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	20000e54 	.word	0x20000e54

08004f84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f8e:	4b4f      	ldr	r3, [pc, #316]	@ (80050cc <xTaskIncrementTick+0x148>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f040 8090 	bne.w	80050b8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f98:	4b4d      	ldr	r3, [pc, #308]	@ (80050d0 <xTaskIncrementTick+0x14c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004fa0:	4a4b      	ldr	r2, [pc, #300]	@ (80050d0 <xTaskIncrementTick+0x14c>)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d121      	bne.n	8004ff0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004fac:	4b49      	ldr	r3, [pc, #292]	@ (80050d4 <xTaskIncrementTick+0x150>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00b      	beq.n	8004fce <xTaskIncrementTick+0x4a>
	__asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	603b      	str	r3, [r7, #0]
}
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
 8004fcc:	e7fd      	b.n	8004fca <xTaskIncrementTick+0x46>
 8004fce:	4b41      	ldr	r3, [pc, #260]	@ (80050d4 <xTaskIncrementTick+0x150>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	4b40      	ldr	r3, [pc, #256]	@ (80050d8 <xTaskIncrementTick+0x154>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a3e      	ldr	r2, [pc, #248]	@ (80050d4 <xTaskIncrementTick+0x150>)
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	4a3e      	ldr	r2, [pc, #248]	@ (80050d8 <xTaskIncrementTick+0x154>)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80050dc <xTaskIncrementTick+0x158>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	4a3c      	ldr	r2, [pc, #240]	@ (80050dc <xTaskIncrementTick+0x158>)
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	f000 fae2 	bl	80055b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80050e0 <xTaskIncrementTick+0x15c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d349      	bcc.n	800508e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ffa:	4b36      	ldr	r3, [pc, #216]	@ (80050d4 <xTaskIncrementTick+0x150>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d104      	bne.n	800500e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005004:	4b36      	ldr	r3, [pc, #216]	@ (80050e0 <xTaskIncrementTick+0x15c>)
 8005006:	f04f 32ff 	mov.w	r2, #4294967295
 800500a:	601a      	str	r2, [r3, #0]
					break;
 800500c:	e03f      	b.n	800508e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800500e:	4b31      	ldr	r3, [pc, #196]	@ (80050d4 <xTaskIncrementTick+0x150>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	429a      	cmp	r2, r3
 8005024:	d203      	bcs.n	800502e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005026:	4a2e      	ldr	r2, [pc, #184]	@ (80050e0 <xTaskIncrementTick+0x15c>)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800502c:	e02f      	b.n	800508e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	3304      	adds	r3, #4
 8005032:	4618      	mov	r0, r3
 8005034:	f7fe ff62 	bl	8003efc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503c:	2b00      	cmp	r3, #0
 800503e:	d004      	beq.n	800504a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	3318      	adds	r3, #24
 8005044:	4618      	mov	r0, r3
 8005046:	f7fe ff59 	bl	8003efc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800504e:	4b25      	ldr	r3, [pc, #148]	@ (80050e4 <xTaskIncrementTick+0x160>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d903      	bls.n	800505e <xTaskIncrementTick+0xda>
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505a:	4a22      	ldr	r2, [pc, #136]	@ (80050e4 <xTaskIncrementTick+0x160>)
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005062:	4613      	mov	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4a1f      	ldr	r2, [pc, #124]	@ (80050e8 <xTaskIncrementTick+0x164>)
 800506c:	441a      	add	r2, r3
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	3304      	adds	r3, #4
 8005072:	4619      	mov	r1, r3
 8005074:	4610      	mov	r0, r2
 8005076:	f7fe fee4 	bl	8003e42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800507e:	4b1b      	ldr	r3, [pc, #108]	@ (80050ec <xTaskIncrementTick+0x168>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005084:	429a      	cmp	r2, r3
 8005086:	d3b8      	bcc.n	8004ffa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005088:	2301      	movs	r3, #1
 800508a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800508c:	e7b5      	b.n	8004ffa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800508e:	4b17      	ldr	r3, [pc, #92]	@ (80050ec <xTaskIncrementTick+0x168>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005094:	4914      	ldr	r1, [pc, #80]	@ (80050e8 <xTaskIncrementTick+0x164>)
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d901      	bls.n	80050aa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80050a6:	2301      	movs	r3, #1
 80050a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80050aa:	4b11      	ldr	r3, [pc, #68]	@ (80050f0 <xTaskIncrementTick+0x16c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80050b2:	2301      	movs	r3, #1
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	e004      	b.n	80050c2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80050b8:	4b0e      	ldr	r3, [pc, #56]	@ (80050f4 <xTaskIncrementTick+0x170>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3301      	adds	r3, #1
 80050be:	4a0d      	ldr	r2, [pc, #52]	@ (80050f4 <xTaskIncrementTick+0x170>)
 80050c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80050c2:	697b      	ldr	r3, [r7, #20]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	20000e78 	.word	0x20000e78
 80050d0:	20000e54 	.word	0x20000e54
 80050d4:	20000e08 	.word	0x20000e08
 80050d8:	20000e0c 	.word	0x20000e0c
 80050dc:	20000e68 	.word	0x20000e68
 80050e0:	20000e70 	.word	0x20000e70
 80050e4:	20000e58 	.word	0x20000e58
 80050e8:	20000980 	.word	0x20000980
 80050ec:	2000097c 	.word	0x2000097c
 80050f0:	20000e64 	.word	0x20000e64
 80050f4:	20000e60 	.word	0x20000e60

080050f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050fe:	4b2b      	ldr	r3, [pc, #172]	@ (80051ac <vTaskSwitchContext+0xb4>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005106:	4b2a      	ldr	r3, [pc, #168]	@ (80051b0 <vTaskSwitchContext+0xb8>)
 8005108:	2201      	movs	r2, #1
 800510a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800510c:	e047      	b.n	800519e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800510e:	4b28      	ldr	r3, [pc, #160]	@ (80051b0 <vTaskSwitchContext+0xb8>)
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005114:	4b27      	ldr	r3, [pc, #156]	@ (80051b4 <vTaskSwitchContext+0xbc>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	e011      	b.n	8005140 <vTaskSwitchContext+0x48>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10b      	bne.n	800513a <vTaskSwitchContext+0x42>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	607b      	str	r3, [r7, #4]
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop
 8005138:	e7fd      	b.n	8005136 <vTaskSwitchContext+0x3e>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3b01      	subs	r3, #1
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	491d      	ldr	r1, [pc, #116]	@ (80051b8 <vTaskSwitchContext+0xc0>)
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0e3      	beq.n	800511c <vTaskSwitchContext+0x24>
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4a16      	ldr	r2, [pc, #88]	@ (80051b8 <vTaskSwitchContext+0xc0>)
 8005160:	4413      	add	r3, r2
 8005162:	60bb      	str	r3, [r7, #8]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	605a      	str	r2, [r3, #4]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	3308      	adds	r3, #8
 8005176:	429a      	cmp	r2, r3
 8005178:	d104      	bne.n	8005184 <vTaskSwitchContext+0x8c>
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	605a      	str	r2, [r3, #4]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	4a0c      	ldr	r2, [pc, #48]	@ (80051bc <vTaskSwitchContext+0xc4>)
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	4a09      	ldr	r2, [pc, #36]	@ (80051b4 <vTaskSwitchContext+0xbc>)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005194:	4b09      	ldr	r3, [pc, #36]	@ (80051bc <vTaskSwitchContext+0xc4>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3354      	adds	r3, #84	@ 0x54
 800519a:	4a09      	ldr	r2, [pc, #36]	@ (80051c0 <vTaskSwitchContext+0xc8>)
 800519c:	6013      	str	r3, [r2, #0]
}
 800519e:	bf00      	nop
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	20000e78 	.word	0x20000e78
 80051b0:	20000e64 	.word	0x20000e64
 80051b4:	20000e58 	.word	0x20000e58
 80051b8:	20000980 	.word	0x20000980
 80051bc:	2000097c 	.word	0x2000097c
 80051c0:	20000058 	.word	0x20000058

080051c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10b      	bne.n	80051ec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	60fb      	str	r3, [r7, #12]
}
 80051e6:	bf00      	nop
 80051e8:	bf00      	nop
 80051ea:	e7fd      	b.n	80051e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051ec:	4b07      	ldr	r3, [pc, #28]	@ (800520c <vTaskPlaceOnEventList+0x48>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3318      	adds	r3, #24
 80051f2:	4619      	mov	r1, r3
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7fe fe48 	bl	8003e8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051fa:	2101      	movs	r1, #1
 80051fc:	6838      	ldr	r0, [r7, #0]
 80051fe:	f000 fa87 	bl	8005710 <prvAddCurrentTaskToDelayedList>
}
 8005202:	bf00      	nop
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	2000097c 	.word	0x2000097c

08005210 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10b      	bne.n	800523a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	617b      	str	r3, [r7, #20]
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop
 8005238:	e7fd      	b.n	8005236 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800523a:	4b0a      	ldr	r3, [pc, #40]	@ (8005264 <vTaskPlaceOnEventListRestricted+0x54>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3318      	adds	r3, #24
 8005240:	4619      	mov	r1, r3
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f7fe fdfd 	bl	8003e42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800524e:	f04f 33ff 	mov.w	r3, #4294967295
 8005252:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	68b8      	ldr	r0, [r7, #8]
 8005258:	f000 fa5a 	bl	8005710 <prvAddCurrentTaskToDelayedList>
	}
 800525c:	bf00      	nop
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	2000097c 	.word	0x2000097c

08005268 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10b      	bne.n	8005296 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	60fb      	str	r3, [r7, #12]
}
 8005290:	bf00      	nop
 8005292:	bf00      	nop
 8005294:	e7fd      	b.n	8005292 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	3318      	adds	r3, #24
 800529a:	4618      	mov	r0, r3
 800529c:	f7fe fe2e 	bl	8003efc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005318 <xTaskRemoveFromEventList+0xb0>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d11d      	bne.n	80052e4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	3304      	adds	r3, #4
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7fe fe25 	bl	8003efc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052b6:	4b19      	ldr	r3, [pc, #100]	@ (800531c <xTaskRemoveFromEventList+0xb4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d903      	bls.n	80052c6 <xTaskRemoveFromEventList+0x5e>
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c2:	4a16      	ldr	r2, [pc, #88]	@ (800531c <xTaskRemoveFromEventList+0xb4>)
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ca:	4613      	mov	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4a13      	ldr	r2, [pc, #76]	@ (8005320 <xTaskRemoveFromEventList+0xb8>)
 80052d4:	441a      	add	r2, r3
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	3304      	adds	r3, #4
 80052da:	4619      	mov	r1, r3
 80052dc:	4610      	mov	r0, r2
 80052de:	f7fe fdb0 	bl	8003e42 <vListInsertEnd>
 80052e2:	e005      	b.n	80052f0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	3318      	adds	r3, #24
 80052e8:	4619      	mov	r1, r3
 80052ea:	480e      	ldr	r0, [pc, #56]	@ (8005324 <xTaskRemoveFromEventList+0xbc>)
 80052ec:	f7fe fda9 	bl	8003e42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005328 <xTaskRemoveFromEventList+0xc0>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d905      	bls.n	800530a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80052fe:	2301      	movs	r3, #1
 8005300:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005302:	4b0a      	ldr	r3, [pc, #40]	@ (800532c <xTaskRemoveFromEventList+0xc4>)
 8005304:	2201      	movs	r2, #1
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	e001      	b.n	800530e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800530e:	697b      	ldr	r3, [r7, #20]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	20000e78 	.word	0x20000e78
 800531c:	20000e58 	.word	0x20000e58
 8005320:	20000980 	.word	0x20000980
 8005324:	20000e10 	.word	0x20000e10
 8005328:	2000097c 	.word	0x2000097c
 800532c:	20000e64 	.word	0x20000e64

08005330 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005338:	4b06      	ldr	r3, [pc, #24]	@ (8005354 <vTaskInternalSetTimeOutState+0x24>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005340:	4b05      	ldr	r3, [pc, #20]	@ (8005358 <vTaskInternalSetTimeOutState+0x28>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	605a      	str	r2, [r3, #4]
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	20000e68 	.word	0x20000e68
 8005358:	20000e54 	.word	0x20000e54

0800535c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10b      	bne.n	8005384 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	613b      	str	r3, [r7, #16]
}
 800537e:	bf00      	nop
 8005380:	bf00      	nop
 8005382:	e7fd      	b.n	8005380 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10b      	bne.n	80053a2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	60fb      	str	r3, [r7, #12]
}
 800539c:	bf00      	nop
 800539e:	bf00      	nop
 80053a0:	e7fd      	b.n	800539e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80053a2:	f000 fe91 	bl	80060c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80053a6:	4b1d      	ldr	r3, [pc, #116]	@ (800541c <xTaskCheckForTimeOut+0xc0>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053be:	d102      	bne.n	80053c6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80053c0:	2300      	movs	r3, #0
 80053c2:	61fb      	str	r3, [r7, #28]
 80053c4:	e023      	b.n	800540e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	4b15      	ldr	r3, [pc, #84]	@ (8005420 <xTaskCheckForTimeOut+0xc4>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d007      	beq.n	80053e2 <xTaskCheckForTimeOut+0x86>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d302      	bcc.n	80053e2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80053dc:	2301      	movs	r3, #1
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	e015      	b.n	800540e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d20b      	bcs.n	8005404 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	1ad2      	subs	r2, r2, r3
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff ff99 	bl	8005330 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80053fe:	2300      	movs	r3, #0
 8005400:	61fb      	str	r3, [r7, #28]
 8005402:	e004      	b.n	800540e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800540a:	2301      	movs	r3, #1
 800540c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800540e:	f000 fe8d 	bl	800612c <vPortExitCritical>

	return xReturn;
 8005412:	69fb      	ldr	r3, [r7, #28]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3720      	adds	r7, #32
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20000e54 	.word	0x20000e54
 8005420:	20000e68 	.word	0x20000e68

08005424 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005428:	4b03      	ldr	r3, [pc, #12]	@ (8005438 <vTaskMissedYield+0x14>)
 800542a:	2201      	movs	r2, #1
 800542c:	601a      	str	r2, [r3, #0]
}
 800542e:	bf00      	nop
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	20000e64 	.word	0x20000e64

0800543c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005444:	f000 f852 	bl	80054ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005448:	4b06      	ldr	r3, [pc, #24]	@ (8005464 <prvIdleTask+0x28>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d9f9      	bls.n	8005444 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005450:	4b05      	ldr	r3, [pc, #20]	@ (8005468 <prvIdleTask+0x2c>)
 8005452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005460:	e7f0      	b.n	8005444 <prvIdleTask+0x8>
 8005462:	bf00      	nop
 8005464:	20000980 	.word	0x20000980
 8005468:	e000ed04 	.word	0xe000ed04

0800546c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005472:	2300      	movs	r3, #0
 8005474:	607b      	str	r3, [r7, #4]
 8005476:	e00c      	b.n	8005492 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4a12      	ldr	r2, [pc, #72]	@ (80054cc <prvInitialiseTaskLists+0x60>)
 8005484:	4413      	add	r3, r2
 8005486:	4618      	mov	r0, r3
 8005488:	f7fe fcae 	bl	8003de8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3301      	adds	r3, #1
 8005490:	607b      	str	r3, [r7, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b37      	cmp	r3, #55	@ 0x37
 8005496:	d9ef      	bls.n	8005478 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005498:	480d      	ldr	r0, [pc, #52]	@ (80054d0 <prvInitialiseTaskLists+0x64>)
 800549a:	f7fe fca5 	bl	8003de8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800549e:	480d      	ldr	r0, [pc, #52]	@ (80054d4 <prvInitialiseTaskLists+0x68>)
 80054a0:	f7fe fca2 	bl	8003de8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054a4:	480c      	ldr	r0, [pc, #48]	@ (80054d8 <prvInitialiseTaskLists+0x6c>)
 80054a6:	f7fe fc9f 	bl	8003de8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054aa:	480c      	ldr	r0, [pc, #48]	@ (80054dc <prvInitialiseTaskLists+0x70>)
 80054ac:	f7fe fc9c 	bl	8003de8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054b0:	480b      	ldr	r0, [pc, #44]	@ (80054e0 <prvInitialiseTaskLists+0x74>)
 80054b2:	f7fe fc99 	bl	8003de8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054b6:	4b0b      	ldr	r3, [pc, #44]	@ (80054e4 <prvInitialiseTaskLists+0x78>)
 80054b8:	4a05      	ldr	r2, [pc, #20]	@ (80054d0 <prvInitialiseTaskLists+0x64>)
 80054ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054bc:	4b0a      	ldr	r3, [pc, #40]	@ (80054e8 <prvInitialiseTaskLists+0x7c>)
 80054be:	4a05      	ldr	r2, [pc, #20]	@ (80054d4 <prvInitialiseTaskLists+0x68>)
 80054c0:	601a      	str	r2, [r3, #0]
}
 80054c2:	bf00      	nop
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	20000980 	.word	0x20000980
 80054d0:	20000de0 	.word	0x20000de0
 80054d4:	20000df4 	.word	0x20000df4
 80054d8:	20000e10 	.word	0x20000e10
 80054dc:	20000e24 	.word	0x20000e24
 80054e0:	20000e3c 	.word	0x20000e3c
 80054e4:	20000e08 	.word	0x20000e08
 80054e8:	20000e0c 	.word	0x20000e0c

080054ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054f2:	e019      	b.n	8005528 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80054f4:	f000 fde8 	bl	80060c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054f8:	4b10      	ldr	r3, [pc, #64]	@ (800553c <prvCheckTasksWaitingTermination+0x50>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3304      	adds	r3, #4
 8005504:	4618      	mov	r0, r3
 8005506:	f7fe fcf9 	bl	8003efc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800550a:	4b0d      	ldr	r3, [pc, #52]	@ (8005540 <prvCheckTasksWaitingTermination+0x54>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3b01      	subs	r3, #1
 8005510:	4a0b      	ldr	r2, [pc, #44]	@ (8005540 <prvCheckTasksWaitingTermination+0x54>)
 8005512:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005514:	4b0b      	ldr	r3, [pc, #44]	@ (8005544 <prvCheckTasksWaitingTermination+0x58>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3b01      	subs	r3, #1
 800551a:	4a0a      	ldr	r2, [pc, #40]	@ (8005544 <prvCheckTasksWaitingTermination+0x58>)
 800551c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800551e:	f000 fe05 	bl	800612c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f810 	bl	8005548 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005528:	4b06      	ldr	r3, [pc, #24]	@ (8005544 <prvCheckTasksWaitingTermination+0x58>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1e1      	bne.n	80054f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005530:	bf00      	nop
 8005532:	bf00      	nop
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	20000e24 	.word	0x20000e24
 8005540:	20000e50 	.word	0x20000e50
 8005544:	20000e38 	.word	0x20000e38

08005548 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3354      	adds	r3, #84	@ 0x54
 8005554:	4618      	mov	r0, r3
 8005556:	f001 fad7 	bl	8006b08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005560:	2b00      	cmp	r3, #0
 8005562:	d108      	bne.n	8005576 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005568:	4618      	mov	r0, r3
 800556a:	f000 ff9d 	bl	80064a8 <vPortFree>
				vPortFree( pxTCB );
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 ff9a 	bl	80064a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005574:	e019      	b.n	80055aa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800557c:	2b01      	cmp	r3, #1
 800557e:	d103      	bne.n	8005588 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 ff91 	bl	80064a8 <vPortFree>
	}
 8005586:	e010      	b.n	80055aa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800558e:	2b02      	cmp	r3, #2
 8005590:	d00b      	beq.n	80055aa <prvDeleteTCB+0x62>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	60fb      	str	r3, [r7, #12]
}
 80055a4:	bf00      	nop
 80055a6:	bf00      	nop
 80055a8:	e7fd      	b.n	80055a6 <prvDeleteTCB+0x5e>
	}
 80055aa:	bf00      	nop
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
	...

080055b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055ba:	4b0c      	ldr	r3, [pc, #48]	@ (80055ec <prvResetNextTaskUnblockTime+0x38>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d104      	bne.n	80055ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055c4:	4b0a      	ldr	r3, [pc, #40]	@ (80055f0 <prvResetNextTaskUnblockTime+0x3c>)
 80055c6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80055cc:	e008      	b.n	80055e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ce:	4b07      	ldr	r3, [pc, #28]	@ (80055ec <prvResetNextTaskUnblockTime+0x38>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	4a04      	ldr	r2, [pc, #16]	@ (80055f0 <prvResetNextTaskUnblockTime+0x3c>)
 80055de:	6013      	str	r3, [r2, #0]
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	20000e08 	.word	0x20000e08
 80055f0:	20000e70 	.word	0x20000e70

080055f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80055fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005628 <xTaskGetSchedulerState+0x34>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d102      	bne.n	8005608 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005602:	2301      	movs	r3, #1
 8005604:	607b      	str	r3, [r7, #4]
 8005606:	e008      	b.n	800561a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005608:	4b08      	ldr	r3, [pc, #32]	@ (800562c <xTaskGetSchedulerState+0x38>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d102      	bne.n	8005616 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005610:	2302      	movs	r3, #2
 8005612:	607b      	str	r3, [r7, #4]
 8005614:	e001      	b.n	800561a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005616:	2300      	movs	r3, #0
 8005618:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800561a:	687b      	ldr	r3, [r7, #4]
	}
 800561c:	4618      	mov	r0, r3
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	20000e5c 	.word	0x20000e5c
 800562c:	20000e78 	.word	0x20000e78

08005630 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800563c:	2300      	movs	r3, #0
 800563e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d058      	beq.n	80056f8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005646:	4b2f      	ldr	r3, [pc, #188]	@ (8005704 <xTaskPriorityDisinherit+0xd4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	429a      	cmp	r2, r3
 800564e:	d00b      	beq.n	8005668 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	60fb      	str	r3, [r7, #12]
}
 8005662:	bf00      	nop
 8005664:	bf00      	nop
 8005666:	e7fd      	b.n	8005664 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10b      	bne.n	8005688 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	60bb      	str	r3, [r7, #8]
}
 8005682:	bf00      	nop
 8005684:	bf00      	nop
 8005686:	e7fd      	b.n	8005684 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800568c:	1e5a      	subs	r2, r3, #1
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800569a:	429a      	cmp	r2, r3
 800569c:	d02c      	beq.n	80056f8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d128      	bne.n	80056f8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	3304      	adds	r3, #4
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fe fc26 	bl	8003efc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005708 <xTaskPriorityDisinherit+0xd8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d903      	bls.n	80056d8 <xTaskPriorityDisinherit+0xa8>
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d4:	4a0c      	ldr	r2, [pc, #48]	@ (8005708 <xTaskPriorityDisinherit+0xd8>)
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056dc:	4613      	mov	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4a09      	ldr	r2, [pc, #36]	@ (800570c <xTaskPriorityDisinherit+0xdc>)
 80056e6:	441a      	add	r2, r3
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	3304      	adds	r3, #4
 80056ec:	4619      	mov	r1, r3
 80056ee:	4610      	mov	r0, r2
 80056f0:	f7fe fba7 	bl	8003e42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80056f4:	2301      	movs	r3, #1
 80056f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80056f8:	697b      	ldr	r3, [r7, #20]
	}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	2000097c 	.word	0x2000097c
 8005708:	20000e58 	.word	0x20000e58
 800570c:	20000980 	.word	0x20000980

08005710 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800571a:	4b21      	ldr	r3, [pc, #132]	@ (80057a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005720:	4b20      	ldr	r3, [pc, #128]	@ (80057a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3304      	adds	r3, #4
 8005726:	4618      	mov	r0, r3
 8005728:	f7fe fbe8 	bl	8003efc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005732:	d10a      	bne.n	800574a <prvAddCurrentTaskToDelayedList+0x3a>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d007      	beq.n	800574a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800573a:	4b1a      	ldr	r3, [pc, #104]	@ (80057a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3304      	adds	r3, #4
 8005740:	4619      	mov	r1, r3
 8005742:	4819      	ldr	r0, [pc, #100]	@ (80057a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005744:	f7fe fb7d 	bl	8003e42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005748:	e026      	b.n	8005798 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4413      	add	r3, r2
 8005750:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005752:	4b14      	ldr	r3, [pc, #80]	@ (80057a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	429a      	cmp	r2, r3
 8005760:	d209      	bcs.n	8005776 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005762:	4b12      	ldr	r3, [pc, #72]	@ (80057ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	4b0f      	ldr	r3, [pc, #60]	@ (80057a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3304      	adds	r3, #4
 800576c:	4619      	mov	r1, r3
 800576e:	4610      	mov	r0, r2
 8005770:	f7fe fb8b 	bl	8003e8a <vListInsert>
}
 8005774:	e010      	b.n	8005798 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005776:	4b0e      	ldr	r3, [pc, #56]	@ (80057b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	4b0a      	ldr	r3, [pc, #40]	@ (80057a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3304      	adds	r3, #4
 8005780:	4619      	mov	r1, r3
 8005782:	4610      	mov	r0, r2
 8005784:	f7fe fb81 	bl	8003e8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005788:	4b0a      	ldr	r3, [pc, #40]	@ (80057b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	429a      	cmp	r2, r3
 8005790:	d202      	bcs.n	8005798 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005792:	4a08      	ldr	r2, [pc, #32]	@ (80057b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	6013      	str	r3, [r2, #0]
}
 8005798:	bf00      	nop
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	20000e54 	.word	0x20000e54
 80057a4:	2000097c 	.word	0x2000097c
 80057a8:	20000e3c 	.word	0x20000e3c
 80057ac:	20000e0c 	.word	0x20000e0c
 80057b0:	20000e08 	.word	0x20000e08
 80057b4:	20000e70 	.word	0x20000e70

080057b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08a      	sub	sp, #40	@ 0x28
 80057bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80057c2:	f000 fb13 	bl	8005dec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80057c6:	4b1d      	ldr	r3, [pc, #116]	@ (800583c <xTimerCreateTimerTask+0x84>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d021      	beq.n	8005812 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80057d6:	1d3a      	adds	r2, r7, #4
 80057d8:	f107 0108 	add.w	r1, r7, #8
 80057dc:	f107 030c 	add.w	r3, r7, #12
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fe fae7 	bl	8003db4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	9202      	str	r2, [sp, #8]
 80057ee:	9301      	str	r3, [sp, #4]
 80057f0:	2302      	movs	r3, #2
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	2300      	movs	r3, #0
 80057f6:	460a      	mov	r2, r1
 80057f8:	4911      	ldr	r1, [pc, #68]	@ (8005840 <xTimerCreateTimerTask+0x88>)
 80057fa:	4812      	ldr	r0, [pc, #72]	@ (8005844 <xTimerCreateTimerTask+0x8c>)
 80057fc:	f7ff f8a2 	bl	8004944 <xTaskCreateStatic>
 8005800:	4603      	mov	r3, r0
 8005802:	4a11      	ldr	r2, [pc, #68]	@ (8005848 <xTimerCreateTimerTask+0x90>)
 8005804:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005806:	4b10      	ldr	r3, [pc, #64]	@ (8005848 <xTimerCreateTimerTask+0x90>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800580e:	2301      	movs	r3, #1
 8005810:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10b      	bne.n	8005830 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	613b      	str	r3, [r7, #16]
}
 800582a:	bf00      	nop
 800582c:	bf00      	nop
 800582e:	e7fd      	b.n	800582c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005830:	697b      	ldr	r3, [r7, #20]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20000eac 	.word	0x20000eac
 8005840:	08007194 	.word	0x08007194
 8005844:	08005985 	.word	0x08005985
 8005848:	20000eb0 	.word	0x20000eb0

0800584c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08a      	sub	sp, #40	@ 0x28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800585a:	2300      	movs	r3, #0
 800585c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10b      	bne.n	800587c <xTimerGenericCommand+0x30>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	623b      	str	r3, [r7, #32]
}
 8005876:	bf00      	nop
 8005878:	bf00      	nop
 800587a:	e7fd      	b.n	8005878 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800587c:	4b19      	ldr	r3, [pc, #100]	@ (80058e4 <xTimerGenericCommand+0x98>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d02a      	beq.n	80058da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2b05      	cmp	r3, #5
 8005894:	dc18      	bgt.n	80058c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005896:	f7ff fead 	bl	80055f4 <xTaskGetSchedulerState>
 800589a:	4603      	mov	r3, r0
 800589c:	2b02      	cmp	r3, #2
 800589e:	d109      	bne.n	80058b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058a0:	4b10      	ldr	r3, [pc, #64]	@ (80058e4 <xTimerGenericCommand+0x98>)
 80058a2:	6818      	ldr	r0, [r3, #0]
 80058a4:	f107 0110 	add.w	r1, r7, #16
 80058a8:	2300      	movs	r3, #0
 80058aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058ac:	f7fe fc5a 	bl	8004164 <xQueueGenericSend>
 80058b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80058b2:	e012      	b.n	80058da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80058b4:	4b0b      	ldr	r3, [pc, #44]	@ (80058e4 <xTimerGenericCommand+0x98>)
 80058b6:	6818      	ldr	r0, [r3, #0]
 80058b8:	f107 0110 	add.w	r1, r7, #16
 80058bc:	2300      	movs	r3, #0
 80058be:	2200      	movs	r2, #0
 80058c0:	f7fe fc50 	bl	8004164 <xQueueGenericSend>
 80058c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80058c6:	e008      	b.n	80058da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80058c8:	4b06      	ldr	r3, [pc, #24]	@ (80058e4 <xTimerGenericCommand+0x98>)
 80058ca:	6818      	ldr	r0, [r3, #0]
 80058cc:	f107 0110 	add.w	r1, r7, #16
 80058d0:	2300      	movs	r3, #0
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	f7fe fd48 	bl	8004368 <xQueueGenericSendFromISR>
 80058d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80058da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3728      	adds	r7, #40	@ 0x28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20000eac 	.word	0x20000eac

080058e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058f2:	4b23      	ldr	r3, [pc, #140]	@ (8005980 <prvProcessExpiredTimer+0x98>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	3304      	adds	r3, #4
 8005900:	4618      	mov	r0, r3
 8005902:	f7fe fafb 	bl	8003efc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	d023      	beq.n	800595c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	699a      	ldr	r2, [r3, #24]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	18d1      	adds	r1, r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	6978      	ldr	r0, [r7, #20]
 8005922:	f000 f8d5 	bl	8005ad0 <prvInsertTimerInActiveList>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d020      	beq.n	800596e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800592c:	2300      	movs	r3, #0
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	2300      	movs	r3, #0
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	2100      	movs	r1, #0
 8005936:	6978      	ldr	r0, [r7, #20]
 8005938:	f7ff ff88 	bl	800584c <xTimerGenericCommand>
 800593c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d114      	bne.n	800596e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	60fb      	str	r3, [r7, #12]
}
 8005956:	bf00      	nop
 8005958:	bf00      	nop
 800595a:	e7fd      	b.n	8005958 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	b2da      	uxtb	r2, r3
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	6978      	ldr	r0, [r7, #20]
 8005974:	4798      	blx	r3
}
 8005976:	bf00      	nop
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20000ea4 	.word	0x20000ea4

08005984 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800598c:	f107 0308 	add.w	r3, r7, #8
 8005990:	4618      	mov	r0, r3
 8005992:	f000 f859 	bl	8005a48 <prvGetNextExpireTime>
 8005996:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4619      	mov	r1, r3
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 f805 	bl	80059ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059a2:	f000 f8d7 	bl	8005b54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059a6:	bf00      	nop
 80059a8:	e7f0      	b.n	800598c <prvTimerTask+0x8>
	...

080059ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80059b6:	f7ff fa29 	bl	8004e0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059ba:	f107 0308 	add.w	r3, r7, #8
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 f866 	bl	8005a90 <prvSampleTimeNow>
 80059c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d130      	bne.n	8005a2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10a      	bne.n	80059e8 <prvProcessTimerOrBlockTask+0x3c>
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d806      	bhi.n	80059e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80059da:	f7ff fa25 	bl	8004e28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80059de:	68f9      	ldr	r1, [r7, #12]
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7ff ff81 	bl	80058e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80059e6:	e024      	b.n	8005a32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d008      	beq.n	8005a00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80059ee:	4b13      	ldr	r3, [pc, #76]	@ (8005a3c <prvProcessTimerOrBlockTask+0x90>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <prvProcessTimerOrBlockTask+0x50>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e000      	b.n	80059fe <prvProcessTimerOrBlockTask+0x52>
 80059fc:	2300      	movs	r3, #0
 80059fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a00:	4b0f      	ldr	r3, [pc, #60]	@ (8005a40 <prvProcessTimerOrBlockTask+0x94>)
 8005a02:	6818      	ldr	r0, [r3, #0]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	f7fe ff65 	bl	80048dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a12:	f7ff fa09 	bl	8004e28 <xTaskResumeAll>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10a      	bne.n	8005a32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a1c:	4b09      	ldr	r3, [pc, #36]	@ (8005a44 <prvProcessTimerOrBlockTask+0x98>)
 8005a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	f3bf 8f6f 	isb	sy
}
 8005a2c:	e001      	b.n	8005a32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a2e:	f7ff f9fb 	bl	8004e28 <xTaskResumeAll>
}
 8005a32:	bf00      	nop
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000ea8 	.word	0x20000ea8
 8005a40:	20000eac 	.word	0x20000eac
 8005a44:	e000ed04 	.word	0xe000ed04

08005a48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a50:	4b0e      	ldr	r3, [pc, #56]	@ (8005a8c <prvGetNextExpireTime+0x44>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <prvGetNextExpireTime+0x16>
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	e000      	b.n	8005a60 <prvGetNextExpireTime+0x18>
 8005a5e:	2200      	movs	r2, #0
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d105      	bne.n	8005a78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a6c:	4b07      	ldr	r3, [pc, #28]	@ (8005a8c <prvGetNextExpireTime+0x44>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	e001      	b.n	8005a7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	20000ea4 	.word	0x20000ea4

08005a90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a98:	f7ff fa64 	bl	8004f64 <xTaskGetTickCount>
 8005a9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005acc <prvSampleTimeNow+0x3c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d205      	bcs.n	8005ab4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005aa8:	f000 f93a 	bl	8005d20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	e002      	b.n	8005aba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005aba:	4a04      	ldr	r2, [pc, #16]	@ (8005acc <prvSampleTimeNow+0x3c>)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20000eb4 	.word	0x20000eb4

08005ad0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d812      	bhi.n	8005b1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	1ad2      	subs	r2, r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d302      	bcc.n	8005b0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b04:	2301      	movs	r3, #1
 8005b06:	617b      	str	r3, [r7, #20]
 8005b08:	e01b      	b.n	8005b42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b0a:	4b10      	ldr	r3, [pc, #64]	@ (8005b4c <prvInsertTimerInActiveList+0x7c>)
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3304      	adds	r3, #4
 8005b12:	4619      	mov	r1, r3
 8005b14:	4610      	mov	r0, r2
 8005b16:	f7fe f9b8 	bl	8003e8a <vListInsert>
 8005b1a:	e012      	b.n	8005b42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d206      	bcs.n	8005b32 <prvInsertTimerInActiveList+0x62>
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d302      	bcc.n	8005b32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	e007      	b.n	8005b42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b32:	4b07      	ldr	r3, [pc, #28]	@ (8005b50 <prvInsertTimerInActiveList+0x80>)
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	f7fe f9a4 	bl	8003e8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b42:	697b      	ldr	r3, [r7, #20]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	20000ea8 	.word	0x20000ea8
 8005b50:	20000ea4 	.word	0x20000ea4

08005b54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08e      	sub	sp, #56	@ 0x38
 8005b58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b5a:	e0ce      	b.n	8005cfa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	da19      	bge.n	8005b96 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b62:	1d3b      	adds	r3, r7, #4
 8005b64:	3304      	adds	r3, #4
 8005b66:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10b      	bne.n	8005b86 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	61fb      	str	r3, [r7, #28]
}
 8005b80:	bf00      	nop
 8005b82:	bf00      	nop
 8005b84:	e7fd      	b.n	8005b82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b8c:	6850      	ldr	r0, [r2, #4]
 8005b8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b90:	6892      	ldr	r2, [r2, #8]
 8005b92:	4611      	mov	r1, r2
 8005b94:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f2c0 80ae 	blt.w	8005cfa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d004      	beq.n	8005bb4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bac:	3304      	adds	r3, #4
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe f9a4 	bl	8003efc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bb4:	463b      	mov	r3, r7
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff ff6a 	bl	8005a90 <prvSampleTimeNow>
 8005bbc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b09      	cmp	r3, #9
 8005bc2:	f200 8097 	bhi.w	8005cf4 <prvProcessReceivedCommands+0x1a0>
 8005bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bcc <prvProcessReceivedCommands+0x78>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005bf5 	.word	0x08005bf5
 8005bd0:	08005bf5 	.word	0x08005bf5
 8005bd4:	08005bf5 	.word	0x08005bf5
 8005bd8:	08005c6b 	.word	0x08005c6b
 8005bdc:	08005c7f 	.word	0x08005c7f
 8005be0:	08005ccb 	.word	0x08005ccb
 8005be4:	08005bf5 	.word	0x08005bf5
 8005be8:	08005bf5 	.word	0x08005bf5
 8005bec:	08005c6b 	.word	0x08005c6b
 8005bf0:	08005c7f 	.word	0x08005c7f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bfa:	f043 0301 	orr.w	r3, r3, #1
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	18d1      	adds	r1, r2, r3
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c14:	f7ff ff5c 	bl	8005ad0 <prvInsertTimerInActiveList>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d06c      	beq.n	8005cf8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d061      	beq.n	8005cf8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	441a      	add	r2, r3
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	2300      	movs	r3, #0
 8005c42:	2100      	movs	r1, #0
 8005c44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c46:	f7ff fe01 	bl	800584c <xTimerGenericCommand>
 8005c4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d152      	bne.n	8005cf8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	61bb      	str	r3, [r7, #24]
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop
 8005c68:	e7fd      	b.n	8005c66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c70:	f023 0301 	bic.w	r3, r3, #1
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005c7c:	e03d      	b.n	8005cfa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c84:	f043 0301 	orr.w	r3, r3, #1
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c94:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10b      	bne.n	8005cb6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	617b      	str	r3, [r7, #20]
}
 8005cb0:	bf00      	nop
 8005cb2:	bf00      	nop
 8005cb4:	e7fd      	b.n	8005cb2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb8:	699a      	ldr	r2, [r3, #24]
 8005cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbc:	18d1      	adds	r1, r2, r3
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cc4:	f7ff ff04 	bl	8005ad0 <prvInsertTimerInActiveList>
					break;
 8005cc8:	e017      	b.n	8005cfa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d103      	bne.n	8005ce0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005cd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cda:	f000 fbe5 	bl	80064a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005cde:	e00c      	b.n	8005cfa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ce6:	f023 0301 	bic.w	r3, r3, #1
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005cf2:	e002      	b.n	8005cfa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005cf4:	bf00      	nop
 8005cf6:	e000      	b.n	8005cfa <prvProcessReceivedCommands+0x1a6>
					break;
 8005cf8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005cfa:	4b08      	ldr	r3, [pc, #32]	@ (8005d1c <prvProcessReceivedCommands+0x1c8>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	1d39      	adds	r1, r7, #4
 8005d00:	2200      	movs	r2, #0
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fe fbce 	bl	80044a4 <xQueueReceive>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f47f af26 	bne.w	8005b5c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005d10:	bf00      	nop
 8005d12:	bf00      	nop
 8005d14:	3730      	adds	r7, #48	@ 0x30
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20000eac 	.word	0x20000eac

08005d20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d26:	e049      	b.n	8005dbc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d28:	4b2e      	ldr	r3, [pc, #184]	@ (8005de4 <prvSwitchTimerLists+0xc4>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d32:	4b2c      	ldr	r3, [pc, #176]	@ (8005de4 <prvSwitchTimerLists+0xc4>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3304      	adds	r3, #4
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fe f8db 	bl	8003efc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d02f      	beq.n	8005dbc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4413      	add	r3, r2
 8005d64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d90e      	bls.n	8005d8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8005de4 <prvSwitchTimerLists+0xc4>)
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3304      	adds	r3, #4
 8005d82:	4619      	mov	r1, r3
 8005d84:	4610      	mov	r0, r2
 8005d86:	f7fe f880 	bl	8003e8a <vListInsert>
 8005d8a:	e017      	b.n	8005dbc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	2300      	movs	r3, #0
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	2100      	movs	r1, #0
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f7ff fd58 	bl	800584c <xTimerGenericCommand>
 8005d9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10b      	bne.n	8005dbc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	603b      	str	r3, [r7, #0]
}
 8005db6:	bf00      	nop
 8005db8:	bf00      	nop
 8005dba:	e7fd      	b.n	8005db8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dbc:	4b09      	ldr	r3, [pc, #36]	@ (8005de4 <prvSwitchTimerLists+0xc4>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1b0      	bne.n	8005d28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005dc6:	4b07      	ldr	r3, [pc, #28]	@ (8005de4 <prvSwitchTimerLists+0xc4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005dcc:	4b06      	ldr	r3, [pc, #24]	@ (8005de8 <prvSwitchTimerLists+0xc8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a04      	ldr	r2, [pc, #16]	@ (8005de4 <prvSwitchTimerLists+0xc4>)
 8005dd2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005dd4:	4a04      	ldr	r2, [pc, #16]	@ (8005de8 <prvSwitchTimerLists+0xc8>)
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	6013      	str	r3, [r2, #0]
}
 8005dda:	bf00      	nop
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20000ea4 	.word	0x20000ea4
 8005de8:	20000ea8 	.word	0x20000ea8

08005dec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005df2:	f000 f969 	bl	80060c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005df6:	4b15      	ldr	r3, [pc, #84]	@ (8005e4c <prvCheckForValidListAndQueue+0x60>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d120      	bne.n	8005e40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005dfe:	4814      	ldr	r0, [pc, #80]	@ (8005e50 <prvCheckForValidListAndQueue+0x64>)
 8005e00:	f7fd fff2 	bl	8003de8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e04:	4813      	ldr	r0, [pc, #76]	@ (8005e54 <prvCheckForValidListAndQueue+0x68>)
 8005e06:	f7fd ffef 	bl	8003de8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e0a:	4b13      	ldr	r3, [pc, #76]	@ (8005e58 <prvCheckForValidListAndQueue+0x6c>)
 8005e0c:	4a10      	ldr	r2, [pc, #64]	@ (8005e50 <prvCheckForValidListAndQueue+0x64>)
 8005e0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e10:	4b12      	ldr	r3, [pc, #72]	@ (8005e5c <prvCheckForValidListAndQueue+0x70>)
 8005e12:	4a10      	ldr	r2, [pc, #64]	@ (8005e54 <prvCheckForValidListAndQueue+0x68>)
 8005e14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e16:	2300      	movs	r3, #0
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	4b11      	ldr	r3, [pc, #68]	@ (8005e60 <prvCheckForValidListAndQueue+0x74>)
 8005e1c:	4a11      	ldr	r2, [pc, #68]	@ (8005e64 <prvCheckForValidListAndQueue+0x78>)
 8005e1e:	2110      	movs	r1, #16
 8005e20:	200a      	movs	r0, #10
 8005e22:	f7fe f8ff 	bl	8004024 <xQueueGenericCreateStatic>
 8005e26:	4603      	mov	r3, r0
 8005e28:	4a08      	ldr	r2, [pc, #32]	@ (8005e4c <prvCheckForValidListAndQueue+0x60>)
 8005e2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e2c:	4b07      	ldr	r3, [pc, #28]	@ (8005e4c <prvCheckForValidListAndQueue+0x60>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d005      	beq.n	8005e40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e34:	4b05      	ldr	r3, [pc, #20]	@ (8005e4c <prvCheckForValidListAndQueue+0x60>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	490b      	ldr	r1, [pc, #44]	@ (8005e68 <prvCheckForValidListAndQueue+0x7c>)
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fe fd24 	bl	8004888 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e40:	f000 f974 	bl	800612c <vPortExitCritical>
}
 8005e44:	bf00      	nop
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000eac 	.word	0x20000eac
 8005e50:	20000e7c 	.word	0x20000e7c
 8005e54:	20000e90 	.word	0x20000e90
 8005e58:	20000ea4 	.word	0x20000ea4
 8005e5c:	20000ea8 	.word	0x20000ea8
 8005e60:	20000f58 	.word	0x20000f58
 8005e64:	20000eb8 	.word	0x20000eb8
 8005e68:	0800719c 	.word	0x0800719c

08005e6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3b04      	subs	r3, #4
 8005e7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005e84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3b04      	subs	r3, #4
 8005e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f023 0201 	bic.w	r2, r3, #1
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	3b04      	subs	r3, #4
 8005e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e9c:	4a0c      	ldr	r2, [pc, #48]	@ (8005ed0 <pxPortInitialiseStack+0x64>)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3b14      	subs	r3, #20
 8005ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3b04      	subs	r3, #4
 8005eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f06f 0202 	mvn.w	r2, #2
 8005eba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	3b20      	subs	r3, #32
 8005ec0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	08005ed5 	.word	0x08005ed5

08005ed4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ede:	4b13      	ldr	r3, [pc, #76]	@ (8005f2c <prvTaskExitError+0x58>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee6:	d00b      	beq.n	8005f00 <prvTaskExitError+0x2c>
	__asm volatile
 8005ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	60fb      	str	r3, [r7, #12]
}
 8005efa:	bf00      	nop
 8005efc:	bf00      	nop
 8005efe:	e7fd      	b.n	8005efc <prvTaskExitError+0x28>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	60bb      	str	r3, [r7, #8]
}
 8005f12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f14:	bf00      	nop
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0fc      	beq.n	8005f16 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f1c:	bf00      	nop
 8005f1e:	bf00      	nop
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	20000048 	.word	0x20000048

08005f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f30:	4b07      	ldr	r3, [pc, #28]	@ (8005f50 <pxCurrentTCBConst2>)
 8005f32:	6819      	ldr	r1, [r3, #0]
 8005f34:	6808      	ldr	r0, [r1, #0]
 8005f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f3a:	f380 8809 	msr	PSP, r0
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f04f 0000 	mov.w	r0, #0
 8005f46:	f380 8811 	msr	BASEPRI, r0
 8005f4a:	4770      	bx	lr
 8005f4c:	f3af 8000 	nop.w

08005f50 <pxCurrentTCBConst2>:
 8005f50:	2000097c 	.word	0x2000097c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f54:	bf00      	nop
 8005f56:	bf00      	nop

08005f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f58:	4808      	ldr	r0, [pc, #32]	@ (8005f7c <prvPortStartFirstTask+0x24>)
 8005f5a:	6800      	ldr	r0, [r0, #0]
 8005f5c:	6800      	ldr	r0, [r0, #0]
 8005f5e:	f380 8808 	msr	MSP, r0
 8005f62:	f04f 0000 	mov.w	r0, #0
 8005f66:	f380 8814 	msr	CONTROL, r0
 8005f6a:	b662      	cpsie	i
 8005f6c:	b661      	cpsie	f
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	df00      	svc	0
 8005f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f7a:	bf00      	nop
 8005f7c:	e000ed08 	.word	0xe000ed08

08005f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f86:	4b47      	ldr	r3, [pc, #284]	@ (80060a4 <xPortStartScheduler+0x124>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a47      	ldr	r2, [pc, #284]	@ (80060a8 <xPortStartScheduler+0x128>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d10b      	bne.n	8005fa8 <xPortStartScheduler+0x28>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	613b      	str	r3, [r7, #16]
}
 8005fa2:	bf00      	nop
 8005fa4:	bf00      	nop
 8005fa6:	e7fd      	b.n	8005fa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005fa8:	4b3e      	ldr	r3, [pc, #248]	@ (80060a4 <xPortStartScheduler+0x124>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a3f      	ldr	r2, [pc, #252]	@ (80060ac <xPortStartScheduler+0x12c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d10b      	bne.n	8005fca <xPortStartScheduler+0x4a>
	__asm volatile
 8005fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	60fb      	str	r3, [r7, #12]
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	e7fd      	b.n	8005fc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005fca:	4b39      	ldr	r3, [pc, #228]	@ (80060b0 <xPortStartScheduler+0x130>)
 8005fcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	22ff      	movs	r2, #255	@ 0xff
 8005fda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	4b31      	ldr	r3, [pc, #196]	@ (80060b4 <xPortStartScheduler+0x134>)
 8005ff0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ff2:	4b31      	ldr	r3, [pc, #196]	@ (80060b8 <xPortStartScheduler+0x138>)
 8005ff4:	2207      	movs	r2, #7
 8005ff6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ff8:	e009      	b.n	800600e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80060b8 <xPortStartScheduler+0x138>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	4a2d      	ldr	r2, [pc, #180]	@ (80060b8 <xPortStartScheduler+0x138>)
 8006002:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	b2db      	uxtb	r3, r3
 800600c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800600e:	78fb      	ldrb	r3, [r7, #3]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006016:	2b80      	cmp	r3, #128	@ 0x80
 8006018:	d0ef      	beq.n	8005ffa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800601a:	4b27      	ldr	r3, [pc, #156]	@ (80060b8 <xPortStartScheduler+0x138>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f1c3 0307 	rsb	r3, r3, #7
 8006022:	2b04      	cmp	r3, #4
 8006024:	d00b      	beq.n	800603e <xPortStartScheduler+0xbe>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	60bb      	str	r3, [r7, #8]
}
 8006038:	bf00      	nop
 800603a:	bf00      	nop
 800603c:	e7fd      	b.n	800603a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800603e:	4b1e      	ldr	r3, [pc, #120]	@ (80060b8 <xPortStartScheduler+0x138>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	4a1c      	ldr	r2, [pc, #112]	@ (80060b8 <xPortStartScheduler+0x138>)
 8006046:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006048:	4b1b      	ldr	r3, [pc, #108]	@ (80060b8 <xPortStartScheduler+0x138>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006050:	4a19      	ldr	r2, [pc, #100]	@ (80060b8 <xPortStartScheduler+0x138>)
 8006052:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	b2da      	uxtb	r2, r3
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800605c:	4b17      	ldr	r3, [pc, #92]	@ (80060bc <xPortStartScheduler+0x13c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a16      	ldr	r2, [pc, #88]	@ (80060bc <xPortStartScheduler+0x13c>)
 8006062:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006066:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006068:	4b14      	ldr	r3, [pc, #80]	@ (80060bc <xPortStartScheduler+0x13c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a13      	ldr	r2, [pc, #76]	@ (80060bc <xPortStartScheduler+0x13c>)
 800606e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006072:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006074:	f000 f8da 	bl	800622c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006078:	4b11      	ldr	r3, [pc, #68]	@ (80060c0 <xPortStartScheduler+0x140>)
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800607e:	f000 f8f9 	bl	8006274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006082:	4b10      	ldr	r3, [pc, #64]	@ (80060c4 <xPortStartScheduler+0x144>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a0f      	ldr	r2, [pc, #60]	@ (80060c4 <xPortStartScheduler+0x144>)
 8006088:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800608c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800608e:	f7ff ff63 	bl	8005f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006092:	f7ff f831 	bl	80050f8 <vTaskSwitchContext>
	prvTaskExitError();
 8006096:	f7ff ff1d 	bl	8005ed4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	e000ed00 	.word	0xe000ed00
 80060a8:	410fc271 	.word	0x410fc271
 80060ac:	410fc270 	.word	0x410fc270
 80060b0:	e000e400 	.word	0xe000e400
 80060b4:	20000fa8 	.word	0x20000fa8
 80060b8:	20000fac 	.word	0x20000fac
 80060bc:	e000ed20 	.word	0xe000ed20
 80060c0:	20000048 	.word	0x20000048
 80060c4:	e000ef34 	.word	0xe000ef34

080060c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	607b      	str	r3, [r7, #4]
}
 80060e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060e2:	4b10      	ldr	r3, [pc, #64]	@ (8006124 <vPortEnterCritical+0x5c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3301      	adds	r3, #1
 80060e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006124 <vPortEnterCritical+0x5c>)
 80060ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006124 <vPortEnterCritical+0x5c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d110      	bne.n	8006116 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006128 <vPortEnterCritical+0x60>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00b      	beq.n	8006116 <vPortEnterCritical+0x4e>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	603b      	str	r3, [r7, #0]
}
 8006110:	bf00      	nop
 8006112:	bf00      	nop
 8006114:	e7fd      	b.n	8006112 <vPortEnterCritical+0x4a>
	}
}
 8006116:	bf00      	nop
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	20000048 	.word	0x20000048
 8006128:	e000ed04 	.word	0xe000ed04

0800612c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006132:	4b12      	ldr	r3, [pc, #72]	@ (800617c <vPortExitCritical+0x50>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10b      	bne.n	8006152 <vPortExitCritical+0x26>
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	607b      	str	r3, [r7, #4]
}
 800614c:	bf00      	nop
 800614e:	bf00      	nop
 8006150:	e7fd      	b.n	800614e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006152:	4b0a      	ldr	r3, [pc, #40]	@ (800617c <vPortExitCritical+0x50>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3b01      	subs	r3, #1
 8006158:	4a08      	ldr	r2, [pc, #32]	@ (800617c <vPortExitCritical+0x50>)
 800615a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800615c:	4b07      	ldr	r3, [pc, #28]	@ (800617c <vPortExitCritical+0x50>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d105      	bne.n	8006170 <vPortExitCritical+0x44>
 8006164:	2300      	movs	r3, #0
 8006166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	f383 8811 	msr	BASEPRI, r3
}
 800616e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	20000048 	.word	0x20000048

08006180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006180:	f3ef 8009 	mrs	r0, PSP
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	4b15      	ldr	r3, [pc, #84]	@ (80061e0 <pxCurrentTCBConst>)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	f01e 0f10 	tst.w	lr, #16
 8006190:	bf08      	it	eq
 8006192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619a:	6010      	str	r0, [r2, #0]
 800619c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80061a4:	f380 8811 	msr	BASEPRI, r0
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f7fe ffa2 	bl	80050f8 <vTaskSwitchContext>
 80061b4:	f04f 0000 	mov.w	r0, #0
 80061b8:	f380 8811 	msr	BASEPRI, r0
 80061bc:	bc09      	pop	{r0, r3}
 80061be:	6819      	ldr	r1, [r3, #0]
 80061c0:	6808      	ldr	r0, [r1, #0]
 80061c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c6:	f01e 0f10 	tst.w	lr, #16
 80061ca:	bf08      	it	eq
 80061cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061d0:	f380 8809 	msr	PSP, r0
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	f3af 8000 	nop.w

080061e0 <pxCurrentTCBConst>:
 80061e0:	2000097c 	.word	0x2000097c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop

080061e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	607b      	str	r3, [r7, #4]
}
 8006200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006202:	f7fe febf 	bl	8004f84 <xTaskIncrementTick>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d003      	beq.n	8006214 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800620c:	4b06      	ldr	r3, [pc, #24]	@ (8006228 <xPortSysTickHandler+0x40>)
 800620e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	2300      	movs	r3, #0
 8006216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	f383 8811 	msr	BASEPRI, r3
}
 800621e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006220:	bf00      	nop
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	e000ed04 	.word	0xe000ed04

0800622c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006230:	4b0b      	ldr	r3, [pc, #44]	@ (8006260 <vPortSetupTimerInterrupt+0x34>)
 8006232:	2200      	movs	r2, #0
 8006234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006236:	4b0b      	ldr	r3, [pc, #44]	@ (8006264 <vPortSetupTimerInterrupt+0x38>)
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800623c:	4b0a      	ldr	r3, [pc, #40]	@ (8006268 <vPortSetupTimerInterrupt+0x3c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a0a      	ldr	r2, [pc, #40]	@ (800626c <vPortSetupTimerInterrupt+0x40>)
 8006242:	fba2 2303 	umull	r2, r3, r2, r3
 8006246:	099b      	lsrs	r3, r3, #6
 8006248:	4a09      	ldr	r2, [pc, #36]	@ (8006270 <vPortSetupTimerInterrupt+0x44>)
 800624a:	3b01      	subs	r3, #1
 800624c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800624e:	4b04      	ldr	r3, [pc, #16]	@ (8006260 <vPortSetupTimerInterrupt+0x34>)
 8006250:	2207      	movs	r2, #7
 8006252:	601a      	str	r2, [r3, #0]
}
 8006254:	bf00      	nop
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	e000e010 	.word	0xe000e010
 8006264:	e000e018 	.word	0xe000e018
 8006268:	20000008 	.word	0x20000008
 800626c:	10624dd3 	.word	0x10624dd3
 8006270:	e000e014 	.word	0xe000e014

08006274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006274:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006284 <vPortEnableVFP+0x10>
 8006278:	6801      	ldr	r1, [r0, #0]
 800627a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800627e:	6001      	str	r1, [r0, #0]
 8006280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006282:	bf00      	nop
 8006284:	e000ed88 	.word	0xe000ed88

08006288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800628e:	f3ef 8305 	mrs	r3, IPSR
 8006292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b0f      	cmp	r3, #15
 8006298:	d915      	bls.n	80062c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800629a:	4a18      	ldr	r2, [pc, #96]	@ (80062fc <vPortValidateInterruptPriority+0x74>)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4413      	add	r3, r2
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062a4:	4b16      	ldr	r3, [pc, #88]	@ (8006300 <vPortValidateInterruptPriority+0x78>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	7afa      	ldrb	r2, [r7, #11]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d20b      	bcs.n	80062c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	607b      	str	r3, [r7, #4]
}
 80062c0:	bf00      	nop
 80062c2:	bf00      	nop
 80062c4:	e7fd      	b.n	80062c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006304 <vPortValidateInterruptPriority+0x7c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80062ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006308 <vPortValidateInterruptPriority+0x80>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d90b      	bls.n	80062ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	603b      	str	r3, [r7, #0]
}
 80062e8:	bf00      	nop
 80062ea:	bf00      	nop
 80062ec:	e7fd      	b.n	80062ea <vPortValidateInterruptPriority+0x62>
	}
 80062ee:	bf00      	nop
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	e000e3f0 	.word	0xe000e3f0
 8006300:	20000fa8 	.word	0x20000fa8
 8006304:	e000ed0c 	.word	0xe000ed0c
 8006308:	20000fac 	.word	0x20000fac

0800630c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08a      	sub	sp, #40	@ 0x28
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006314:	2300      	movs	r3, #0
 8006316:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006318:	f7fe fd78 	bl	8004e0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800631c:	4b5c      	ldr	r3, [pc, #368]	@ (8006490 <pvPortMalloc+0x184>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006324:	f000 f924 	bl	8006570 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006328:	4b5a      	ldr	r3, [pc, #360]	@ (8006494 <pvPortMalloc+0x188>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4013      	ands	r3, r2
 8006330:	2b00      	cmp	r3, #0
 8006332:	f040 8095 	bne.w	8006460 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d01e      	beq.n	800637a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800633c:	2208      	movs	r2, #8
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4413      	add	r3, r2
 8006342:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	2b00      	cmp	r3, #0
 800634c:	d015      	beq.n	800637a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f023 0307 	bic.w	r3, r3, #7
 8006354:	3308      	adds	r3, #8
 8006356:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f003 0307 	and.w	r3, r3, #7
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00b      	beq.n	800637a <pvPortMalloc+0x6e>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	617b      	str	r3, [r7, #20]
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop
 8006378:	e7fd      	b.n	8006376 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d06f      	beq.n	8006460 <pvPortMalloc+0x154>
 8006380:	4b45      	ldr	r3, [pc, #276]	@ (8006498 <pvPortMalloc+0x18c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	429a      	cmp	r2, r3
 8006388:	d86a      	bhi.n	8006460 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800638a:	4b44      	ldr	r3, [pc, #272]	@ (800649c <pvPortMalloc+0x190>)
 800638c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800638e:	4b43      	ldr	r3, [pc, #268]	@ (800649c <pvPortMalloc+0x190>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006394:	e004      	b.n	80063a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d903      	bls.n	80063b2 <pvPortMalloc+0xa6>
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f1      	bne.n	8006396 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063b2:	4b37      	ldr	r3, [pc, #220]	@ (8006490 <pvPortMalloc+0x184>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d051      	beq.n	8006460 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2208      	movs	r2, #8
 80063c2:	4413      	add	r3, r2
 80063c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	1ad2      	subs	r2, r2, r3
 80063d6:	2308      	movs	r3, #8
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	429a      	cmp	r2, r3
 80063dc:	d920      	bls.n	8006420 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4413      	add	r3, r2
 80063e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00b      	beq.n	8006408 <pvPortMalloc+0xfc>
	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	613b      	str	r3, [r7, #16]
}
 8006402:	bf00      	nop
 8006404:	bf00      	nop
 8006406:	e7fd      	b.n	8006404 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	1ad2      	subs	r2, r2, r3
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800641a:	69b8      	ldr	r0, [r7, #24]
 800641c:	f000 f90a 	bl	8006634 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006420:	4b1d      	ldr	r3, [pc, #116]	@ (8006498 <pvPortMalloc+0x18c>)
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	4a1b      	ldr	r2, [pc, #108]	@ (8006498 <pvPortMalloc+0x18c>)
 800642c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800642e:	4b1a      	ldr	r3, [pc, #104]	@ (8006498 <pvPortMalloc+0x18c>)
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	4b1b      	ldr	r3, [pc, #108]	@ (80064a0 <pvPortMalloc+0x194>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d203      	bcs.n	8006442 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800643a:	4b17      	ldr	r3, [pc, #92]	@ (8006498 <pvPortMalloc+0x18c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a18      	ldr	r2, [pc, #96]	@ (80064a0 <pvPortMalloc+0x194>)
 8006440:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	4b13      	ldr	r3, [pc, #76]	@ (8006494 <pvPortMalloc+0x188>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	431a      	orrs	r2, r3
 800644c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006456:	4b13      	ldr	r3, [pc, #76]	@ (80064a4 <pvPortMalloc+0x198>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3301      	adds	r3, #1
 800645c:	4a11      	ldr	r2, [pc, #68]	@ (80064a4 <pvPortMalloc+0x198>)
 800645e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006460:	f7fe fce2 	bl	8004e28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00b      	beq.n	8006486 <pvPortMalloc+0x17a>
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	60fb      	str	r3, [r7, #12]
}
 8006480:	bf00      	nop
 8006482:	bf00      	nop
 8006484:	e7fd      	b.n	8006482 <pvPortMalloc+0x176>
	return pvReturn;
 8006486:	69fb      	ldr	r3, [r7, #28]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3728      	adds	r7, #40	@ 0x28
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	20004bb8 	.word	0x20004bb8
 8006494:	20004bcc 	.word	0x20004bcc
 8006498:	20004bbc 	.word	0x20004bbc
 800649c:	20004bb0 	.word	0x20004bb0
 80064a0:	20004bc0 	.word	0x20004bc0
 80064a4:	20004bc4 	.word	0x20004bc4

080064a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d04f      	beq.n	800655a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064ba:	2308      	movs	r3, #8
 80064bc:	425b      	negs	r3, r3
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4413      	add	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	4b25      	ldr	r3, [pc, #148]	@ (8006564 <vPortFree+0xbc>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4013      	ands	r3, r2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10b      	bne.n	80064ee <vPortFree+0x46>
	__asm volatile
 80064d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	60fb      	str	r3, [r7, #12]
}
 80064e8:	bf00      	nop
 80064ea:	bf00      	nop
 80064ec:	e7fd      	b.n	80064ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00b      	beq.n	800650e <vPortFree+0x66>
	__asm volatile
 80064f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	60bb      	str	r3, [r7, #8]
}
 8006508:	bf00      	nop
 800650a:	bf00      	nop
 800650c:	e7fd      	b.n	800650a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	4b14      	ldr	r3, [pc, #80]	@ (8006564 <vPortFree+0xbc>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4013      	ands	r3, r2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01e      	beq.n	800655a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d11a      	bne.n	800655a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	4b0e      	ldr	r3, [pc, #56]	@ (8006564 <vPortFree+0xbc>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	43db      	mvns	r3, r3
 800652e:	401a      	ands	r2, r3
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006534:	f7fe fc6a 	bl	8004e0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	4b0a      	ldr	r3, [pc, #40]	@ (8006568 <vPortFree+0xc0>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4413      	add	r3, r2
 8006542:	4a09      	ldr	r2, [pc, #36]	@ (8006568 <vPortFree+0xc0>)
 8006544:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006546:	6938      	ldr	r0, [r7, #16]
 8006548:	f000 f874 	bl	8006634 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800654c:	4b07      	ldr	r3, [pc, #28]	@ (800656c <vPortFree+0xc4>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3301      	adds	r3, #1
 8006552:	4a06      	ldr	r2, [pc, #24]	@ (800656c <vPortFree+0xc4>)
 8006554:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006556:	f7fe fc67 	bl	8004e28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800655a:	bf00      	nop
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20004bcc 	.word	0x20004bcc
 8006568:	20004bbc 	.word	0x20004bbc
 800656c:	20004bc8 	.word	0x20004bc8

08006570 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006576:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800657a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800657c:	4b27      	ldr	r3, [pc, #156]	@ (800661c <prvHeapInit+0xac>)
 800657e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00c      	beq.n	80065a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3307      	adds	r3, #7
 800658e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0307 	bic.w	r3, r3, #7
 8006596:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	4a1f      	ldr	r2, [pc, #124]	@ (800661c <prvHeapInit+0xac>)
 80065a0:	4413      	add	r3, r2
 80065a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006620 <prvHeapInit+0xb0>)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065ae:	4b1c      	ldr	r3, [pc, #112]	@ (8006620 <prvHeapInit+0xb0>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	4413      	add	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065bc:	2208      	movs	r2, #8
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	1a9b      	subs	r3, r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0307 	bic.w	r3, r3, #7
 80065ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4a15      	ldr	r2, [pc, #84]	@ (8006624 <prvHeapInit+0xb4>)
 80065d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065d2:	4b14      	ldr	r3, [pc, #80]	@ (8006624 <prvHeapInit+0xb4>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2200      	movs	r2, #0
 80065d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065da:	4b12      	ldr	r3, [pc, #72]	@ (8006624 <prvHeapInit+0xb4>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	1ad2      	subs	r2, r2, r3
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006624 <prvHeapInit+0xb4>)
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	4a0a      	ldr	r2, [pc, #40]	@ (8006628 <prvHeapInit+0xb8>)
 80065fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	4a09      	ldr	r2, [pc, #36]	@ (800662c <prvHeapInit+0xbc>)
 8006606:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006608:	4b09      	ldr	r3, [pc, #36]	@ (8006630 <prvHeapInit+0xc0>)
 800660a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800660e:	601a      	str	r2, [r3, #0]
}
 8006610:	bf00      	nop
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	20000fb0 	.word	0x20000fb0
 8006620:	20004bb0 	.word	0x20004bb0
 8006624:	20004bb8 	.word	0x20004bb8
 8006628:	20004bc0 	.word	0x20004bc0
 800662c:	20004bbc 	.word	0x20004bbc
 8006630:	20004bcc 	.word	0x20004bcc

08006634 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800663c:	4b28      	ldr	r3, [pc, #160]	@ (80066e0 <prvInsertBlockIntoFreeList+0xac>)
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	e002      	b.n	8006648 <prvInsertBlockIntoFreeList+0x14>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	429a      	cmp	r2, r3
 8006650:	d8f7      	bhi.n	8006642 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	4413      	add	r3, r2
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	429a      	cmp	r2, r3
 8006662:	d108      	bne.n	8006676 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	441a      	add	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	441a      	add	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	429a      	cmp	r2, r3
 8006688:	d118      	bne.n	80066bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	4b15      	ldr	r3, [pc, #84]	@ (80066e4 <prvInsertBlockIntoFreeList+0xb0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	429a      	cmp	r2, r3
 8006694:	d00d      	beq.n	80066b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	441a      	add	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	e008      	b.n	80066c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066b2:	4b0c      	ldr	r3, [pc, #48]	@ (80066e4 <prvInsertBlockIntoFreeList+0xb0>)
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	e003      	b.n	80066c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d002      	beq.n	80066d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066d2:	bf00      	nop
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	20004bb0 	.word	0x20004bb0
 80066e4:	20004bb8 	.word	0x20004bb8

080066e8 <std>:
 80066e8:	2300      	movs	r3, #0
 80066ea:	b510      	push	{r4, lr}
 80066ec:	4604      	mov	r4, r0
 80066ee:	e9c0 3300 	strd	r3, r3, [r0]
 80066f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066f6:	6083      	str	r3, [r0, #8]
 80066f8:	8181      	strh	r1, [r0, #12]
 80066fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80066fc:	81c2      	strh	r2, [r0, #14]
 80066fe:	6183      	str	r3, [r0, #24]
 8006700:	4619      	mov	r1, r3
 8006702:	2208      	movs	r2, #8
 8006704:	305c      	adds	r0, #92	@ 0x5c
 8006706:	f000 f9e7 	bl	8006ad8 <memset>
 800670a:	4b0d      	ldr	r3, [pc, #52]	@ (8006740 <std+0x58>)
 800670c:	6263      	str	r3, [r4, #36]	@ 0x24
 800670e:	4b0d      	ldr	r3, [pc, #52]	@ (8006744 <std+0x5c>)
 8006710:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006712:	4b0d      	ldr	r3, [pc, #52]	@ (8006748 <std+0x60>)
 8006714:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006716:	4b0d      	ldr	r3, [pc, #52]	@ (800674c <std+0x64>)
 8006718:	6323      	str	r3, [r4, #48]	@ 0x30
 800671a:	4b0d      	ldr	r3, [pc, #52]	@ (8006750 <std+0x68>)
 800671c:	6224      	str	r4, [r4, #32]
 800671e:	429c      	cmp	r4, r3
 8006720:	d006      	beq.n	8006730 <std+0x48>
 8006722:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006726:	4294      	cmp	r4, r2
 8006728:	d002      	beq.n	8006730 <std+0x48>
 800672a:	33d0      	adds	r3, #208	@ 0xd0
 800672c:	429c      	cmp	r4, r3
 800672e:	d105      	bne.n	800673c <std+0x54>
 8006730:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006738:	f000 ba9c 	b.w	8006c74 <__retarget_lock_init_recursive>
 800673c:	bd10      	pop	{r4, pc}
 800673e:	bf00      	nop
 8006740:	08006929 	.word	0x08006929
 8006744:	0800694b 	.word	0x0800694b
 8006748:	08006983 	.word	0x08006983
 800674c:	080069a7 	.word	0x080069a7
 8006750:	20004bd0 	.word	0x20004bd0

08006754 <stdio_exit_handler>:
 8006754:	4a02      	ldr	r2, [pc, #8]	@ (8006760 <stdio_exit_handler+0xc>)
 8006756:	4903      	ldr	r1, [pc, #12]	@ (8006764 <stdio_exit_handler+0x10>)
 8006758:	4803      	ldr	r0, [pc, #12]	@ (8006768 <stdio_exit_handler+0x14>)
 800675a:	f000 b869 	b.w	8006830 <_fwalk_sglue>
 800675e:	bf00      	nop
 8006760:	2000004c 	.word	0x2000004c
 8006764:	08006f91 	.word	0x08006f91
 8006768:	2000005c 	.word	0x2000005c

0800676c <cleanup_stdio>:
 800676c:	6841      	ldr	r1, [r0, #4]
 800676e:	4b0c      	ldr	r3, [pc, #48]	@ (80067a0 <cleanup_stdio+0x34>)
 8006770:	4299      	cmp	r1, r3
 8006772:	b510      	push	{r4, lr}
 8006774:	4604      	mov	r4, r0
 8006776:	d001      	beq.n	800677c <cleanup_stdio+0x10>
 8006778:	f000 fc0a 	bl	8006f90 <_fflush_r>
 800677c:	68a1      	ldr	r1, [r4, #8]
 800677e:	4b09      	ldr	r3, [pc, #36]	@ (80067a4 <cleanup_stdio+0x38>)
 8006780:	4299      	cmp	r1, r3
 8006782:	d002      	beq.n	800678a <cleanup_stdio+0x1e>
 8006784:	4620      	mov	r0, r4
 8006786:	f000 fc03 	bl	8006f90 <_fflush_r>
 800678a:	68e1      	ldr	r1, [r4, #12]
 800678c:	4b06      	ldr	r3, [pc, #24]	@ (80067a8 <cleanup_stdio+0x3c>)
 800678e:	4299      	cmp	r1, r3
 8006790:	d004      	beq.n	800679c <cleanup_stdio+0x30>
 8006792:	4620      	mov	r0, r4
 8006794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006798:	f000 bbfa 	b.w	8006f90 <_fflush_r>
 800679c:	bd10      	pop	{r4, pc}
 800679e:	bf00      	nop
 80067a0:	20004bd0 	.word	0x20004bd0
 80067a4:	20004c38 	.word	0x20004c38
 80067a8:	20004ca0 	.word	0x20004ca0

080067ac <global_stdio_init.part.0>:
 80067ac:	b510      	push	{r4, lr}
 80067ae:	4b0b      	ldr	r3, [pc, #44]	@ (80067dc <global_stdio_init.part.0+0x30>)
 80067b0:	4c0b      	ldr	r4, [pc, #44]	@ (80067e0 <global_stdio_init.part.0+0x34>)
 80067b2:	4a0c      	ldr	r2, [pc, #48]	@ (80067e4 <global_stdio_init.part.0+0x38>)
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	4620      	mov	r0, r4
 80067b8:	2200      	movs	r2, #0
 80067ba:	2104      	movs	r1, #4
 80067bc:	f7ff ff94 	bl	80066e8 <std>
 80067c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80067c4:	2201      	movs	r2, #1
 80067c6:	2109      	movs	r1, #9
 80067c8:	f7ff ff8e 	bl	80066e8 <std>
 80067cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80067d0:	2202      	movs	r2, #2
 80067d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d6:	2112      	movs	r1, #18
 80067d8:	f7ff bf86 	b.w	80066e8 <std>
 80067dc:	20004d08 	.word	0x20004d08
 80067e0:	20004bd0 	.word	0x20004bd0
 80067e4:	08006755 	.word	0x08006755

080067e8 <__sfp_lock_acquire>:
 80067e8:	4801      	ldr	r0, [pc, #4]	@ (80067f0 <__sfp_lock_acquire+0x8>)
 80067ea:	f000 ba44 	b.w	8006c76 <__retarget_lock_acquire_recursive>
 80067ee:	bf00      	nop
 80067f0:	20004d11 	.word	0x20004d11

080067f4 <__sfp_lock_release>:
 80067f4:	4801      	ldr	r0, [pc, #4]	@ (80067fc <__sfp_lock_release+0x8>)
 80067f6:	f000 ba3f 	b.w	8006c78 <__retarget_lock_release_recursive>
 80067fa:	bf00      	nop
 80067fc:	20004d11 	.word	0x20004d11

08006800 <__sinit>:
 8006800:	b510      	push	{r4, lr}
 8006802:	4604      	mov	r4, r0
 8006804:	f7ff fff0 	bl	80067e8 <__sfp_lock_acquire>
 8006808:	6a23      	ldr	r3, [r4, #32]
 800680a:	b11b      	cbz	r3, 8006814 <__sinit+0x14>
 800680c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006810:	f7ff bff0 	b.w	80067f4 <__sfp_lock_release>
 8006814:	4b04      	ldr	r3, [pc, #16]	@ (8006828 <__sinit+0x28>)
 8006816:	6223      	str	r3, [r4, #32]
 8006818:	4b04      	ldr	r3, [pc, #16]	@ (800682c <__sinit+0x2c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1f5      	bne.n	800680c <__sinit+0xc>
 8006820:	f7ff ffc4 	bl	80067ac <global_stdio_init.part.0>
 8006824:	e7f2      	b.n	800680c <__sinit+0xc>
 8006826:	bf00      	nop
 8006828:	0800676d 	.word	0x0800676d
 800682c:	20004d08 	.word	0x20004d08

08006830 <_fwalk_sglue>:
 8006830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006834:	4607      	mov	r7, r0
 8006836:	4688      	mov	r8, r1
 8006838:	4614      	mov	r4, r2
 800683a:	2600      	movs	r6, #0
 800683c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006840:	f1b9 0901 	subs.w	r9, r9, #1
 8006844:	d505      	bpl.n	8006852 <_fwalk_sglue+0x22>
 8006846:	6824      	ldr	r4, [r4, #0]
 8006848:	2c00      	cmp	r4, #0
 800684a:	d1f7      	bne.n	800683c <_fwalk_sglue+0xc>
 800684c:	4630      	mov	r0, r6
 800684e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006852:	89ab      	ldrh	r3, [r5, #12]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d907      	bls.n	8006868 <_fwalk_sglue+0x38>
 8006858:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800685c:	3301      	adds	r3, #1
 800685e:	d003      	beq.n	8006868 <_fwalk_sglue+0x38>
 8006860:	4629      	mov	r1, r5
 8006862:	4638      	mov	r0, r7
 8006864:	47c0      	blx	r8
 8006866:	4306      	orrs	r6, r0
 8006868:	3568      	adds	r5, #104	@ 0x68
 800686a:	e7e9      	b.n	8006840 <_fwalk_sglue+0x10>

0800686c <_puts_r>:
 800686c:	6a03      	ldr	r3, [r0, #32]
 800686e:	b570      	push	{r4, r5, r6, lr}
 8006870:	6884      	ldr	r4, [r0, #8]
 8006872:	4605      	mov	r5, r0
 8006874:	460e      	mov	r6, r1
 8006876:	b90b      	cbnz	r3, 800687c <_puts_r+0x10>
 8006878:	f7ff ffc2 	bl	8006800 <__sinit>
 800687c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800687e:	07db      	lsls	r3, r3, #31
 8006880:	d405      	bmi.n	800688e <_puts_r+0x22>
 8006882:	89a3      	ldrh	r3, [r4, #12]
 8006884:	0598      	lsls	r0, r3, #22
 8006886:	d402      	bmi.n	800688e <_puts_r+0x22>
 8006888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800688a:	f000 f9f4 	bl	8006c76 <__retarget_lock_acquire_recursive>
 800688e:	89a3      	ldrh	r3, [r4, #12]
 8006890:	0719      	lsls	r1, r3, #28
 8006892:	d502      	bpl.n	800689a <_puts_r+0x2e>
 8006894:	6923      	ldr	r3, [r4, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d135      	bne.n	8006906 <_puts_r+0x9a>
 800689a:	4621      	mov	r1, r4
 800689c:	4628      	mov	r0, r5
 800689e:	f000 f8c5 	bl	8006a2c <__swsetup_r>
 80068a2:	b380      	cbz	r0, 8006906 <_puts_r+0x9a>
 80068a4:	f04f 35ff 	mov.w	r5, #4294967295
 80068a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068aa:	07da      	lsls	r2, r3, #31
 80068ac:	d405      	bmi.n	80068ba <_puts_r+0x4e>
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	059b      	lsls	r3, r3, #22
 80068b2:	d402      	bmi.n	80068ba <_puts_r+0x4e>
 80068b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068b6:	f000 f9df 	bl	8006c78 <__retarget_lock_release_recursive>
 80068ba:	4628      	mov	r0, r5
 80068bc:	bd70      	pop	{r4, r5, r6, pc}
 80068be:	2b00      	cmp	r3, #0
 80068c0:	da04      	bge.n	80068cc <_puts_r+0x60>
 80068c2:	69a2      	ldr	r2, [r4, #24]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	dc17      	bgt.n	80068f8 <_puts_r+0x8c>
 80068c8:	290a      	cmp	r1, #10
 80068ca:	d015      	beq.n	80068f8 <_puts_r+0x8c>
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	6022      	str	r2, [r4, #0]
 80068d2:	7019      	strb	r1, [r3, #0]
 80068d4:	68a3      	ldr	r3, [r4, #8]
 80068d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068da:	3b01      	subs	r3, #1
 80068dc:	60a3      	str	r3, [r4, #8]
 80068de:	2900      	cmp	r1, #0
 80068e0:	d1ed      	bne.n	80068be <_puts_r+0x52>
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	da11      	bge.n	800690a <_puts_r+0x9e>
 80068e6:	4622      	mov	r2, r4
 80068e8:	210a      	movs	r1, #10
 80068ea:	4628      	mov	r0, r5
 80068ec:	f000 f85f 	bl	80069ae <__swbuf_r>
 80068f0:	3001      	adds	r0, #1
 80068f2:	d0d7      	beq.n	80068a4 <_puts_r+0x38>
 80068f4:	250a      	movs	r5, #10
 80068f6:	e7d7      	b.n	80068a8 <_puts_r+0x3c>
 80068f8:	4622      	mov	r2, r4
 80068fa:	4628      	mov	r0, r5
 80068fc:	f000 f857 	bl	80069ae <__swbuf_r>
 8006900:	3001      	adds	r0, #1
 8006902:	d1e7      	bne.n	80068d4 <_puts_r+0x68>
 8006904:	e7ce      	b.n	80068a4 <_puts_r+0x38>
 8006906:	3e01      	subs	r6, #1
 8006908:	e7e4      	b.n	80068d4 <_puts_r+0x68>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	1c5a      	adds	r2, r3, #1
 800690e:	6022      	str	r2, [r4, #0]
 8006910:	220a      	movs	r2, #10
 8006912:	701a      	strb	r2, [r3, #0]
 8006914:	e7ee      	b.n	80068f4 <_puts_r+0x88>
	...

08006918 <puts>:
 8006918:	4b02      	ldr	r3, [pc, #8]	@ (8006924 <puts+0xc>)
 800691a:	4601      	mov	r1, r0
 800691c:	6818      	ldr	r0, [r3, #0]
 800691e:	f7ff bfa5 	b.w	800686c <_puts_r>
 8006922:	bf00      	nop
 8006924:	20000058 	.word	0x20000058

08006928 <__sread>:
 8006928:	b510      	push	{r4, lr}
 800692a:	460c      	mov	r4, r1
 800692c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006930:	f000 f952 	bl	8006bd8 <_read_r>
 8006934:	2800      	cmp	r0, #0
 8006936:	bfab      	itete	ge
 8006938:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800693a:	89a3      	ldrhlt	r3, [r4, #12]
 800693c:	181b      	addge	r3, r3, r0
 800693e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006942:	bfac      	ite	ge
 8006944:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006946:	81a3      	strhlt	r3, [r4, #12]
 8006948:	bd10      	pop	{r4, pc}

0800694a <__swrite>:
 800694a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800694e:	461f      	mov	r7, r3
 8006950:	898b      	ldrh	r3, [r1, #12]
 8006952:	05db      	lsls	r3, r3, #23
 8006954:	4605      	mov	r5, r0
 8006956:	460c      	mov	r4, r1
 8006958:	4616      	mov	r6, r2
 800695a:	d505      	bpl.n	8006968 <__swrite+0x1e>
 800695c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006960:	2302      	movs	r3, #2
 8006962:	2200      	movs	r2, #0
 8006964:	f000 f926 	bl	8006bb4 <_lseek_r>
 8006968:	89a3      	ldrh	r3, [r4, #12]
 800696a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800696e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006972:	81a3      	strh	r3, [r4, #12]
 8006974:	4632      	mov	r2, r6
 8006976:	463b      	mov	r3, r7
 8006978:	4628      	mov	r0, r5
 800697a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800697e:	f000 b93d 	b.w	8006bfc <_write_r>

08006982 <__sseek>:
 8006982:	b510      	push	{r4, lr}
 8006984:	460c      	mov	r4, r1
 8006986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800698a:	f000 f913 	bl	8006bb4 <_lseek_r>
 800698e:	1c43      	adds	r3, r0, #1
 8006990:	89a3      	ldrh	r3, [r4, #12]
 8006992:	bf15      	itete	ne
 8006994:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006996:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800699a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800699e:	81a3      	strheq	r3, [r4, #12]
 80069a0:	bf18      	it	ne
 80069a2:	81a3      	strhne	r3, [r4, #12]
 80069a4:	bd10      	pop	{r4, pc}

080069a6 <__sclose>:
 80069a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069aa:	f000 b89d 	b.w	8006ae8 <_close_r>

080069ae <__swbuf_r>:
 80069ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b0:	460e      	mov	r6, r1
 80069b2:	4614      	mov	r4, r2
 80069b4:	4605      	mov	r5, r0
 80069b6:	b118      	cbz	r0, 80069c0 <__swbuf_r+0x12>
 80069b8:	6a03      	ldr	r3, [r0, #32]
 80069ba:	b90b      	cbnz	r3, 80069c0 <__swbuf_r+0x12>
 80069bc:	f7ff ff20 	bl	8006800 <__sinit>
 80069c0:	69a3      	ldr	r3, [r4, #24]
 80069c2:	60a3      	str	r3, [r4, #8]
 80069c4:	89a3      	ldrh	r3, [r4, #12]
 80069c6:	071a      	lsls	r2, r3, #28
 80069c8:	d501      	bpl.n	80069ce <__swbuf_r+0x20>
 80069ca:	6923      	ldr	r3, [r4, #16]
 80069cc:	b943      	cbnz	r3, 80069e0 <__swbuf_r+0x32>
 80069ce:	4621      	mov	r1, r4
 80069d0:	4628      	mov	r0, r5
 80069d2:	f000 f82b 	bl	8006a2c <__swsetup_r>
 80069d6:	b118      	cbz	r0, 80069e0 <__swbuf_r+0x32>
 80069d8:	f04f 37ff 	mov.w	r7, #4294967295
 80069dc:	4638      	mov	r0, r7
 80069de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	6922      	ldr	r2, [r4, #16]
 80069e4:	1a98      	subs	r0, r3, r2
 80069e6:	6963      	ldr	r3, [r4, #20]
 80069e8:	b2f6      	uxtb	r6, r6
 80069ea:	4283      	cmp	r3, r0
 80069ec:	4637      	mov	r7, r6
 80069ee:	dc05      	bgt.n	80069fc <__swbuf_r+0x4e>
 80069f0:	4621      	mov	r1, r4
 80069f2:	4628      	mov	r0, r5
 80069f4:	f000 facc 	bl	8006f90 <_fflush_r>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	d1ed      	bne.n	80069d8 <__swbuf_r+0x2a>
 80069fc:	68a3      	ldr	r3, [r4, #8]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	60a3      	str	r3, [r4, #8]
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	6022      	str	r2, [r4, #0]
 8006a08:	701e      	strb	r6, [r3, #0]
 8006a0a:	6962      	ldr	r2, [r4, #20]
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d004      	beq.n	8006a1c <__swbuf_r+0x6e>
 8006a12:	89a3      	ldrh	r3, [r4, #12]
 8006a14:	07db      	lsls	r3, r3, #31
 8006a16:	d5e1      	bpl.n	80069dc <__swbuf_r+0x2e>
 8006a18:	2e0a      	cmp	r6, #10
 8006a1a:	d1df      	bne.n	80069dc <__swbuf_r+0x2e>
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	4628      	mov	r0, r5
 8006a20:	f000 fab6 	bl	8006f90 <_fflush_r>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	d0d9      	beq.n	80069dc <__swbuf_r+0x2e>
 8006a28:	e7d6      	b.n	80069d8 <__swbuf_r+0x2a>
	...

08006a2c <__swsetup_r>:
 8006a2c:	b538      	push	{r3, r4, r5, lr}
 8006a2e:	4b29      	ldr	r3, [pc, #164]	@ (8006ad4 <__swsetup_r+0xa8>)
 8006a30:	4605      	mov	r5, r0
 8006a32:	6818      	ldr	r0, [r3, #0]
 8006a34:	460c      	mov	r4, r1
 8006a36:	b118      	cbz	r0, 8006a40 <__swsetup_r+0x14>
 8006a38:	6a03      	ldr	r3, [r0, #32]
 8006a3a:	b90b      	cbnz	r3, 8006a40 <__swsetup_r+0x14>
 8006a3c:	f7ff fee0 	bl	8006800 <__sinit>
 8006a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a44:	0719      	lsls	r1, r3, #28
 8006a46:	d422      	bmi.n	8006a8e <__swsetup_r+0x62>
 8006a48:	06da      	lsls	r2, r3, #27
 8006a4a:	d407      	bmi.n	8006a5c <__swsetup_r+0x30>
 8006a4c:	2209      	movs	r2, #9
 8006a4e:	602a      	str	r2, [r5, #0]
 8006a50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a54:	81a3      	strh	r3, [r4, #12]
 8006a56:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5a:	e033      	b.n	8006ac4 <__swsetup_r+0x98>
 8006a5c:	0758      	lsls	r0, r3, #29
 8006a5e:	d512      	bpl.n	8006a86 <__swsetup_r+0x5a>
 8006a60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a62:	b141      	cbz	r1, 8006a76 <__swsetup_r+0x4a>
 8006a64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a68:	4299      	cmp	r1, r3
 8006a6a:	d002      	beq.n	8006a72 <__swsetup_r+0x46>
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	f000 f913 	bl	8006c98 <_free_r>
 8006a72:	2300      	movs	r3, #0
 8006a74:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a7c:	81a3      	strh	r3, [r4, #12]
 8006a7e:	2300      	movs	r3, #0
 8006a80:	6063      	str	r3, [r4, #4]
 8006a82:	6923      	ldr	r3, [r4, #16]
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	89a3      	ldrh	r3, [r4, #12]
 8006a88:	f043 0308 	orr.w	r3, r3, #8
 8006a8c:	81a3      	strh	r3, [r4, #12]
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	b94b      	cbnz	r3, 8006aa6 <__swsetup_r+0x7a>
 8006a92:	89a3      	ldrh	r3, [r4, #12]
 8006a94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a9c:	d003      	beq.n	8006aa6 <__swsetup_r+0x7a>
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	f000 fac3 	bl	800702c <__smakebuf_r>
 8006aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aaa:	f013 0201 	ands.w	r2, r3, #1
 8006aae:	d00a      	beq.n	8006ac6 <__swsetup_r+0x9a>
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	60a2      	str	r2, [r4, #8]
 8006ab4:	6962      	ldr	r2, [r4, #20]
 8006ab6:	4252      	negs	r2, r2
 8006ab8:	61a2      	str	r2, [r4, #24]
 8006aba:	6922      	ldr	r2, [r4, #16]
 8006abc:	b942      	cbnz	r2, 8006ad0 <__swsetup_r+0xa4>
 8006abe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006ac2:	d1c5      	bne.n	8006a50 <__swsetup_r+0x24>
 8006ac4:	bd38      	pop	{r3, r4, r5, pc}
 8006ac6:	0799      	lsls	r1, r3, #30
 8006ac8:	bf58      	it	pl
 8006aca:	6962      	ldrpl	r2, [r4, #20]
 8006acc:	60a2      	str	r2, [r4, #8]
 8006ace:	e7f4      	b.n	8006aba <__swsetup_r+0x8e>
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	e7f7      	b.n	8006ac4 <__swsetup_r+0x98>
 8006ad4:	20000058 	.word	0x20000058

08006ad8 <memset>:
 8006ad8:	4402      	add	r2, r0
 8006ada:	4603      	mov	r3, r0
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d100      	bne.n	8006ae2 <memset+0xa>
 8006ae0:	4770      	bx	lr
 8006ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ae6:	e7f9      	b.n	8006adc <memset+0x4>

08006ae8 <_close_r>:
 8006ae8:	b538      	push	{r3, r4, r5, lr}
 8006aea:	4d06      	ldr	r5, [pc, #24]	@ (8006b04 <_close_r+0x1c>)
 8006aec:	2300      	movs	r3, #0
 8006aee:	4604      	mov	r4, r0
 8006af0:	4608      	mov	r0, r1
 8006af2:	602b      	str	r3, [r5, #0]
 8006af4:	f7f9 ff3c 	bl	8000970 <_close>
 8006af8:	1c43      	adds	r3, r0, #1
 8006afa:	d102      	bne.n	8006b02 <_close_r+0x1a>
 8006afc:	682b      	ldr	r3, [r5, #0]
 8006afe:	b103      	cbz	r3, 8006b02 <_close_r+0x1a>
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	bd38      	pop	{r3, r4, r5, pc}
 8006b04:	20004d0c 	.word	0x20004d0c

08006b08 <_reclaim_reent>:
 8006b08:	4b29      	ldr	r3, [pc, #164]	@ (8006bb0 <_reclaim_reent+0xa8>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4283      	cmp	r3, r0
 8006b0e:	b570      	push	{r4, r5, r6, lr}
 8006b10:	4604      	mov	r4, r0
 8006b12:	d04b      	beq.n	8006bac <_reclaim_reent+0xa4>
 8006b14:	69c3      	ldr	r3, [r0, #28]
 8006b16:	b1ab      	cbz	r3, 8006b44 <_reclaim_reent+0x3c>
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	b16b      	cbz	r3, 8006b38 <_reclaim_reent+0x30>
 8006b1c:	2500      	movs	r5, #0
 8006b1e:	69e3      	ldr	r3, [r4, #28]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	5959      	ldr	r1, [r3, r5]
 8006b24:	2900      	cmp	r1, #0
 8006b26:	d13b      	bne.n	8006ba0 <_reclaim_reent+0x98>
 8006b28:	3504      	adds	r5, #4
 8006b2a:	2d80      	cmp	r5, #128	@ 0x80
 8006b2c:	d1f7      	bne.n	8006b1e <_reclaim_reent+0x16>
 8006b2e:	69e3      	ldr	r3, [r4, #28]
 8006b30:	4620      	mov	r0, r4
 8006b32:	68d9      	ldr	r1, [r3, #12]
 8006b34:	f000 f8b0 	bl	8006c98 <_free_r>
 8006b38:	69e3      	ldr	r3, [r4, #28]
 8006b3a:	6819      	ldr	r1, [r3, #0]
 8006b3c:	b111      	cbz	r1, 8006b44 <_reclaim_reent+0x3c>
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f000 f8aa 	bl	8006c98 <_free_r>
 8006b44:	6961      	ldr	r1, [r4, #20]
 8006b46:	b111      	cbz	r1, 8006b4e <_reclaim_reent+0x46>
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f000 f8a5 	bl	8006c98 <_free_r>
 8006b4e:	69e1      	ldr	r1, [r4, #28]
 8006b50:	b111      	cbz	r1, 8006b58 <_reclaim_reent+0x50>
 8006b52:	4620      	mov	r0, r4
 8006b54:	f000 f8a0 	bl	8006c98 <_free_r>
 8006b58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006b5a:	b111      	cbz	r1, 8006b62 <_reclaim_reent+0x5a>
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f000 f89b 	bl	8006c98 <_free_r>
 8006b62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b64:	b111      	cbz	r1, 8006b6c <_reclaim_reent+0x64>
 8006b66:	4620      	mov	r0, r4
 8006b68:	f000 f896 	bl	8006c98 <_free_r>
 8006b6c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006b6e:	b111      	cbz	r1, 8006b76 <_reclaim_reent+0x6e>
 8006b70:	4620      	mov	r0, r4
 8006b72:	f000 f891 	bl	8006c98 <_free_r>
 8006b76:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006b78:	b111      	cbz	r1, 8006b80 <_reclaim_reent+0x78>
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f000 f88c 	bl	8006c98 <_free_r>
 8006b80:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006b82:	b111      	cbz	r1, 8006b8a <_reclaim_reent+0x82>
 8006b84:	4620      	mov	r0, r4
 8006b86:	f000 f887 	bl	8006c98 <_free_r>
 8006b8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006b8c:	b111      	cbz	r1, 8006b94 <_reclaim_reent+0x8c>
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f000 f882 	bl	8006c98 <_free_r>
 8006b94:	6a23      	ldr	r3, [r4, #32]
 8006b96:	b14b      	cbz	r3, 8006bac <_reclaim_reent+0xa4>
 8006b98:	4620      	mov	r0, r4
 8006b9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b9e:	4718      	bx	r3
 8006ba0:	680e      	ldr	r6, [r1, #0]
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f000 f878 	bl	8006c98 <_free_r>
 8006ba8:	4631      	mov	r1, r6
 8006baa:	e7bb      	b.n	8006b24 <_reclaim_reent+0x1c>
 8006bac:	bd70      	pop	{r4, r5, r6, pc}
 8006bae:	bf00      	nop
 8006bb0:	20000058 	.word	0x20000058

08006bb4 <_lseek_r>:
 8006bb4:	b538      	push	{r3, r4, r5, lr}
 8006bb6:	4d07      	ldr	r5, [pc, #28]	@ (8006bd4 <_lseek_r+0x20>)
 8006bb8:	4604      	mov	r4, r0
 8006bba:	4608      	mov	r0, r1
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	602a      	str	r2, [r5, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f7f9 fefb 	bl	80009be <_lseek>
 8006bc8:	1c43      	adds	r3, r0, #1
 8006bca:	d102      	bne.n	8006bd2 <_lseek_r+0x1e>
 8006bcc:	682b      	ldr	r3, [r5, #0]
 8006bce:	b103      	cbz	r3, 8006bd2 <_lseek_r+0x1e>
 8006bd0:	6023      	str	r3, [r4, #0]
 8006bd2:	bd38      	pop	{r3, r4, r5, pc}
 8006bd4:	20004d0c 	.word	0x20004d0c

08006bd8 <_read_r>:
 8006bd8:	b538      	push	{r3, r4, r5, lr}
 8006bda:	4d07      	ldr	r5, [pc, #28]	@ (8006bf8 <_read_r+0x20>)
 8006bdc:	4604      	mov	r4, r0
 8006bde:	4608      	mov	r0, r1
 8006be0:	4611      	mov	r1, r2
 8006be2:	2200      	movs	r2, #0
 8006be4:	602a      	str	r2, [r5, #0]
 8006be6:	461a      	mov	r2, r3
 8006be8:	f7f9 fe8a 	bl	8000900 <_read>
 8006bec:	1c43      	adds	r3, r0, #1
 8006bee:	d102      	bne.n	8006bf6 <_read_r+0x1e>
 8006bf0:	682b      	ldr	r3, [r5, #0]
 8006bf2:	b103      	cbz	r3, 8006bf6 <_read_r+0x1e>
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	bd38      	pop	{r3, r4, r5, pc}
 8006bf8:	20004d0c 	.word	0x20004d0c

08006bfc <_write_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	4d07      	ldr	r5, [pc, #28]	@ (8006c1c <_write_r+0x20>)
 8006c00:	4604      	mov	r4, r0
 8006c02:	4608      	mov	r0, r1
 8006c04:	4611      	mov	r1, r2
 8006c06:	2200      	movs	r2, #0
 8006c08:	602a      	str	r2, [r5, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f7f9 fe94 	bl	8000938 <_write>
 8006c10:	1c43      	adds	r3, r0, #1
 8006c12:	d102      	bne.n	8006c1a <_write_r+0x1e>
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	b103      	cbz	r3, 8006c1a <_write_r+0x1e>
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	bd38      	pop	{r3, r4, r5, pc}
 8006c1c:	20004d0c 	.word	0x20004d0c

08006c20 <__errno>:
 8006c20:	4b01      	ldr	r3, [pc, #4]	@ (8006c28 <__errno+0x8>)
 8006c22:	6818      	ldr	r0, [r3, #0]
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	20000058 	.word	0x20000058

08006c2c <__libc_init_array>:
 8006c2c:	b570      	push	{r4, r5, r6, lr}
 8006c2e:	4d0d      	ldr	r5, [pc, #52]	@ (8006c64 <__libc_init_array+0x38>)
 8006c30:	4c0d      	ldr	r4, [pc, #52]	@ (8006c68 <__libc_init_array+0x3c>)
 8006c32:	1b64      	subs	r4, r4, r5
 8006c34:	10a4      	asrs	r4, r4, #2
 8006c36:	2600      	movs	r6, #0
 8006c38:	42a6      	cmp	r6, r4
 8006c3a:	d109      	bne.n	8006c50 <__libc_init_array+0x24>
 8006c3c:	4d0b      	ldr	r5, [pc, #44]	@ (8006c6c <__libc_init_array+0x40>)
 8006c3e:	4c0c      	ldr	r4, [pc, #48]	@ (8006c70 <__libc_init_array+0x44>)
 8006c40:	f000 fa62 	bl	8007108 <_init>
 8006c44:	1b64      	subs	r4, r4, r5
 8006c46:	10a4      	asrs	r4, r4, #2
 8006c48:	2600      	movs	r6, #0
 8006c4a:	42a6      	cmp	r6, r4
 8006c4c:	d105      	bne.n	8006c5a <__libc_init_array+0x2e>
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c54:	4798      	blx	r3
 8006c56:	3601      	adds	r6, #1
 8006c58:	e7ee      	b.n	8006c38 <__libc_init_array+0xc>
 8006c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c5e:	4798      	blx	r3
 8006c60:	3601      	adds	r6, #1
 8006c62:	e7f2      	b.n	8006c4a <__libc_init_array+0x1e>
 8006c64:	08007314 	.word	0x08007314
 8006c68:	08007314 	.word	0x08007314
 8006c6c:	08007314 	.word	0x08007314
 8006c70:	08007318 	.word	0x08007318

08006c74 <__retarget_lock_init_recursive>:
 8006c74:	4770      	bx	lr

08006c76 <__retarget_lock_acquire_recursive>:
 8006c76:	4770      	bx	lr

08006c78 <__retarget_lock_release_recursive>:
 8006c78:	4770      	bx	lr

08006c7a <memcpy>:
 8006c7a:	440a      	add	r2, r1
 8006c7c:	4291      	cmp	r1, r2
 8006c7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c82:	d100      	bne.n	8006c86 <memcpy+0xc>
 8006c84:	4770      	bx	lr
 8006c86:	b510      	push	{r4, lr}
 8006c88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c90:	4291      	cmp	r1, r2
 8006c92:	d1f9      	bne.n	8006c88 <memcpy+0xe>
 8006c94:	bd10      	pop	{r4, pc}
	...

08006c98 <_free_r>:
 8006c98:	b538      	push	{r3, r4, r5, lr}
 8006c9a:	4605      	mov	r5, r0
 8006c9c:	2900      	cmp	r1, #0
 8006c9e:	d041      	beq.n	8006d24 <_free_r+0x8c>
 8006ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ca4:	1f0c      	subs	r4, r1, #4
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	bfb8      	it	lt
 8006caa:	18e4      	addlt	r4, r4, r3
 8006cac:	f000 f8e0 	bl	8006e70 <__malloc_lock>
 8006cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d28 <_free_r+0x90>)
 8006cb2:	6813      	ldr	r3, [r2, #0]
 8006cb4:	b933      	cbnz	r3, 8006cc4 <_free_r+0x2c>
 8006cb6:	6063      	str	r3, [r4, #4]
 8006cb8:	6014      	str	r4, [r2, #0]
 8006cba:	4628      	mov	r0, r5
 8006cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cc0:	f000 b8dc 	b.w	8006e7c <__malloc_unlock>
 8006cc4:	42a3      	cmp	r3, r4
 8006cc6:	d908      	bls.n	8006cda <_free_r+0x42>
 8006cc8:	6820      	ldr	r0, [r4, #0]
 8006cca:	1821      	adds	r1, r4, r0
 8006ccc:	428b      	cmp	r3, r1
 8006cce:	bf01      	itttt	eq
 8006cd0:	6819      	ldreq	r1, [r3, #0]
 8006cd2:	685b      	ldreq	r3, [r3, #4]
 8006cd4:	1809      	addeq	r1, r1, r0
 8006cd6:	6021      	streq	r1, [r4, #0]
 8006cd8:	e7ed      	b.n	8006cb6 <_free_r+0x1e>
 8006cda:	461a      	mov	r2, r3
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	b10b      	cbz	r3, 8006ce4 <_free_r+0x4c>
 8006ce0:	42a3      	cmp	r3, r4
 8006ce2:	d9fa      	bls.n	8006cda <_free_r+0x42>
 8006ce4:	6811      	ldr	r1, [r2, #0]
 8006ce6:	1850      	adds	r0, r2, r1
 8006ce8:	42a0      	cmp	r0, r4
 8006cea:	d10b      	bne.n	8006d04 <_free_r+0x6c>
 8006cec:	6820      	ldr	r0, [r4, #0]
 8006cee:	4401      	add	r1, r0
 8006cf0:	1850      	adds	r0, r2, r1
 8006cf2:	4283      	cmp	r3, r0
 8006cf4:	6011      	str	r1, [r2, #0]
 8006cf6:	d1e0      	bne.n	8006cba <_free_r+0x22>
 8006cf8:	6818      	ldr	r0, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	6053      	str	r3, [r2, #4]
 8006cfe:	4408      	add	r0, r1
 8006d00:	6010      	str	r0, [r2, #0]
 8006d02:	e7da      	b.n	8006cba <_free_r+0x22>
 8006d04:	d902      	bls.n	8006d0c <_free_r+0x74>
 8006d06:	230c      	movs	r3, #12
 8006d08:	602b      	str	r3, [r5, #0]
 8006d0a:	e7d6      	b.n	8006cba <_free_r+0x22>
 8006d0c:	6820      	ldr	r0, [r4, #0]
 8006d0e:	1821      	adds	r1, r4, r0
 8006d10:	428b      	cmp	r3, r1
 8006d12:	bf04      	itt	eq
 8006d14:	6819      	ldreq	r1, [r3, #0]
 8006d16:	685b      	ldreq	r3, [r3, #4]
 8006d18:	6063      	str	r3, [r4, #4]
 8006d1a:	bf04      	itt	eq
 8006d1c:	1809      	addeq	r1, r1, r0
 8006d1e:	6021      	streq	r1, [r4, #0]
 8006d20:	6054      	str	r4, [r2, #4]
 8006d22:	e7ca      	b.n	8006cba <_free_r+0x22>
 8006d24:	bd38      	pop	{r3, r4, r5, pc}
 8006d26:	bf00      	nop
 8006d28:	20004d18 	.word	0x20004d18

08006d2c <sbrk_aligned>:
 8006d2c:	b570      	push	{r4, r5, r6, lr}
 8006d2e:	4e0f      	ldr	r6, [pc, #60]	@ (8006d6c <sbrk_aligned+0x40>)
 8006d30:	460c      	mov	r4, r1
 8006d32:	6831      	ldr	r1, [r6, #0]
 8006d34:	4605      	mov	r5, r0
 8006d36:	b911      	cbnz	r1, 8006d3e <sbrk_aligned+0x12>
 8006d38:	f000 f9d6 	bl	80070e8 <_sbrk_r>
 8006d3c:	6030      	str	r0, [r6, #0]
 8006d3e:	4621      	mov	r1, r4
 8006d40:	4628      	mov	r0, r5
 8006d42:	f000 f9d1 	bl	80070e8 <_sbrk_r>
 8006d46:	1c43      	adds	r3, r0, #1
 8006d48:	d103      	bne.n	8006d52 <sbrk_aligned+0x26>
 8006d4a:	f04f 34ff 	mov.w	r4, #4294967295
 8006d4e:	4620      	mov	r0, r4
 8006d50:	bd70      	pop	{r4, r5, r6, pc}
 8006d52:	1cc4      	adds	r4, r0, #3
 8006d54:	f024 0403 	bic.w	r4, r4, #3
 8006d58:	42a0      	cmp	r0, r4
 8006d5a:	d0f8      	beq.n	8006d4e <sbrk_aligned+0x22>
 8006d5c:	1a21      	subs	r1, r4, r0
 8006d5e:	4628      	mov	r0, r5
 8006d60:	f000 f9c2 	bl	80070e8 <_sbrk_r>
 8006d64:	3001      	adds	r0, #1
 8006d66:	d1f2      	bne.n	8006d4e <sbrk_aligned+0x22>
 8006d68:	e7ef      	b.n	8006d4a <sbrk_aligned+0x1e>
 8006d6a:	bf00      	nop
 8006d6c:	20004d14 	.word	0x20004d14

08006d70 <_malloc_r>:
 8006d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d74:	1ccd      	adds	r5, r1, #3
 8006d76:	f025 0503 	bic.w	r5, r5, #3
 8006d7a:	3508      	adds	r5, #8
 8006d7c:	2d0c      	cmp	r5, #12
 8006d7e:	bf38      	it	cc
 8006d80:	250c      	movcc	r5, #12
 8006d82:	2d00      	cmp	r5, #0
 8006d84:	4606      	mov	r6, r0
 8006d86:	db01      	blt.n	8006d8c <_malloc_r+0x1c>
 8006d88:	42a9      	cmp	r1, r5
 8006d8a:	d904      	bls.n	8006d96 <_malloc_r+0x26>
 8006d8c:	230c      	movs	r3, #12
 8006d8e:	6033      	str	r3, [r6, #0]
 8006d90:	2000      	movs	r0, #0
 8006d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e6c <_malloc_r+0xfc>
 8006d9a:	f000 f869 	bl	8006e70 <__malloc_lock>
 8006d9e:	f8d8 3000 	ldr.w	r3, [r8]
 8006da2:	461c      	mov	r4, r3
 8006da4:	bb44      	cbnz	r4, 8006df8 <_malloc_r+0x88>
 8006da6:	4629      	mov	r1, r5
 8006da8:	4630      	mov	r0, r6
 8006daa:	f7ff ffbf 	bl	8006d2c <sbrk_aligned>
 8006dae:	1c43      	adds	r3, r0, #1
 8006db0:	4604      	mov	r4, r0
 8006db2:	d158      	bne.n	8006e66 <_malloc_r+0xf6>
 8006db4:	f8d8 4000 	ldr.w	r4, [r8]
 8006db8:	4627      	mov	r7, r4
 8006dba:	2f00      	cmp	r7, #0
 8006dbc:	d143      	bne.n	8006e46 <_malloc_r+0xd6>
 8006dbe:	2c00      	cmp	r4, #0
 8006dc0:	d04b      	beq.n	8006e5a <_malloc_r+0xea>
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	4639      	mov	r1, r7
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	eb04 0903 	add.w	r9, r4, r3
 8006dcc:	f000 f98c 	bl	80070e8 <_sbrk_r>
 8006dd0:	4581      	cmp	r9, r0
 8006dd2:	d142      	bne.n	8006e5a <_malloc_r+0xea>
 8006dd4:	6821      	ldr	r1, [r4, #0]
 8006dd6:	1a6d      	subs	r5, r5, r1
 8006dd8:	4629      	mov	r1, r5
 8006dda:	4630      	mov	r0, r6
 8006ddc:	f7ff ffa6 	bl	8006d2c <sbrk_aligned>
 8006de0:	3001      	adds	r0, #1
 8006de2:	d03a      	beq.n	8006e5a <_malloc_r+0xea>
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	442b      	add	r3, r5
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	f8d8 3000 	ldr.w	r3, [r8]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	bb62      	cbnz	r2, 8006e4c <_malloc_r+0xdc>
 8006df2:	f8c8 7000 	str.w	r7, [r8]
 8006df6:	e00f      	b.n	8006e18 <_malloc_r+0xa8>
 8006df8:	6822      	ldr	r2, [r4, #0]
 8006dfa:	1b52      	subs	r2, r2, r5
 8006dfc:	d420      	bmi.n	8006e40 <_malloc_r+0xd0>
 8006dfe:	2a0b      	cmp	r2, #11
 8006e00:	d917      	bls.n	8006e32 <_malloc_r+0xc2>
 8006e02:	1961      	adds	r1, r4, r5
 8006e04:	42a3      	cmp	r3, r4
 8006e06:	6025      	str	r5, [r4, #0]
 8006e08:	bf18      	it	ne
 8006e0a:	6059      	strne	r1, [r3, #4]
 8006e0c:	6863      	ldr	r3, [r4, #4]
 8006e0e:	bf08      	it	eq
 8006e10:	f8c8 1000 	streq.w	r1, [r8]
 8006e14:	5162      	str	r2, [r4, r5]
 8006e16:	604b      	str	r3, [r1, #4]
 8006e18:	4630      	mov	r0, r6
 8006e1a:	f000 f82f 	bl	8006e7c <__malloc_unlock>
 8006e1e:	f104 000b 	add.w	r0, r4, #11
 8006e22:	1d23      	adds	r3, r4, #4
 8006e24:	f020 0007 	bic.w	r0, r0, #7
 8006e28:	1ac2      	subs	r2, r0, r3
 8006e2a:	bf1c      	itt	ne
 8006e2c:	1a1b      	subne	r3, r3, r0
 8006e2e:	50a3      	strne	r3, [r4, r2]
 8006e30:	e7af      	b.n	8006d92 <_malloc_r+0x22>
 8006e32:	6862      	ldr	r2, [r4, #4]
 8006e34:	42a3      	cmp	r3, r4
 8006e36:	bf0c      	ite	eq
 8006e38:	f8c8 2000 	streq.w	r2, [r8]
 8006e3c:	605a      	strne	r2, [r3, #4]
 8006e3e:	e7eb      	b.n	8006e18 <_malloc_r+0xa8>
 8006e40:	4623      	mov	r3, r4
 8006e42:	6864      	ldr	r4, [r4, #4]
 8006e44:	e7ae      	b.n	8006da4 <_malloc_r+0x34>
 8006e46:	463c      	mov	r4, r7
 8006e48:	687f      	ldr	r7, [r7, #4]
 8006e4a:	e7b6      	b.n	8006dba <_malloc_r+0x4a>
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	42a3      	cmp	r3, r4
 8006e52:	d1fb      	bne.n	8006e4c <_malloc_r+0xdc>
 8006e54:	2300      	movs	r3, #0
 8006e56:	6053      	str	r3, [r2, #4]
 8006e58:	e7de      	b.n	8006e18 <_malloc_r+0xa8>
 8006e5a:	230c      	movs	r3, #12
 8006e5c:	6033      	str	r3, [r6, #0]
 8006e5e:	4630      	mov	r0, r6
 8006e60:	f000 f80c 	bl	8006e7c <__malloc_unlock>
 8006e64:	e794      	b.n	8006d90 <_malloc_r+0x20>
 8006e66:	6005      	str	r5, [r0, #0]
 8006e68:	e7d6      	b.n	8006e18 <_malloc_r+0xa8>
 8006e6a:	bf00      	nop
 8006e6c:	20004d18 	.word	0x20004d18

08006e70 <__malloc_lock>:
 8006e70:	4801      	ldr	r0, [pc, #4]	@ (8006e78 <__malloc_lock+0x8>)
 8006e72:	f7ff bf00 	b.w	8006c76 <__retarget_lock_acquire_recursive>
 8006e76:	bf00      	nop
 8006e78:	20004d10 	.word	0x20004d10

08006e7c <__malloc_unlock>:
 8006e7c:	4801      	ldr	r0, [pc, #4]	@ (8006e84 <__malloc_unlock+0x8>)
 8006e7e:	f7ff befb 	b.w	8006c78 <__retarget_lock_release_recursive>
 8006e82:	bf00      	nop
 8006e84:	20004d10 	.word	0x20004d10

08006e88 <__sflush_r>:
 8006e88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e90:	0716      	lsls	r6, r2, #28
 8006e92:	4605      	mov	r5, r0
 8006e94:	460c      	mov	r4, r1
 8006e96:	d454      	bmi.n	8006f42 <__sflush_r+0xba>
 8006e98:	684b      	ldr	r3, [r1, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	dc02      	bgt.n	8006ea4 <__sflush_r+0x1c>
 8006e9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	dd48      	ble.n	8006f36 <__sflush_r+0xae>
 8006ea4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ea6:	2e00      	cmp	r6, #0
 8006ea8:	d045      	beq.n	8006f36 <__sflush_r+0xae>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006eb0:	682f      	ldr	r7, [r5, #0]
 8006eb2:	6a21      	ldr	r1, [r4, #32]
 8006eb4:	602b      	str	r3, [r5, #0]
 8006eb6:	d030      	beq.n	8006f1a <__sflush_r+0x92>
 8006eb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006eba:	89a3      	ldrh	r3, [r4, #12]
 8006ebc:	0759      	lsls	r1, r3, #29
 8006ebe:	d505      	bpl.n	8006ecc <__sflush_r+0x44>
 8006ec0:	6863      	ldr	r3, [r4, #4]
 8006ec2:	1ad2      	subs	r2, r2, r3
 8006ec4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ec6:	b10b      	cbz	r3, 8006ecc <__sflush_r+0x44>
 8006ec8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006eca:	1ad2      	subs	r2, r2, r3
 8006ecc:	2300      	movs	r3, #0
 8006ece:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ed0:	6a21      	ldr	r1, [r4, #32]
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	47b0      	blx	r6
 8006ed6:	1c43      	adds	r3, r0, #1
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	d106      	bne.n	8006eea <__sflush_r+0x62>
 8006edc:	6829      	ldr	r1, [r5, #0]
 8006ede:	291d      	cmp	r1, #29
 8006ee0:	d82b      	bhi.n	8006f3a <__sflush_r+0xb2>
 8006ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8006f8c <__sflush_r+0x104>)
 8006ee4:	410a      	asrs	r2, r1
 8006ee6:	07d6      	lsls	r6, r2, #31
 8006ee8:	d427      	bmi.n	8006f3a <__sflush_r+0xb2>
 8006eea:	2200      	movs	r2, #0
 8006eec:	6062      	str	r2, [r4, #4]
 8006eee:	04d9      	lsls	r1, r3, #19
 8006ef0:	6922      	ldr	r2, [r4, #16]
 8006ef2:	6022      	str	r2, [r4, #0]
 8006ef4:	d504      	bpl.n	8006f00 <__sflush_r+0x78>
 8006ef6:	1c42      	adds	r2, r0, #1
 8006ef8:	d101      	bne.n	8006efe <__sflush_r+0x76>
 8006efa:	682b      	ldr	r3, [r5, #0]
 8006efc:	b903      	cbnz	r3, 8006f00 <__sflush_r+0x78>
 8006efe:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f02:	602f      	str	r7, [r5, #0]
 8006f04:	b1b9      	cbz	r1, 8006f36 <__sflush_r+0xae>
 8006f06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f0a:	4299      	cmp	r1, r3
 8006f0c:	d002      	beq.n	8006f14 <__sflush_r+0x8c>
 8006f0e:	4628      	mov	r0, r5
 8006f10:	f7ff fec2 	bl	8006c98 <_free_r>
 8006f14:	2300      	movs	r3, #0
 8006f16:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f18:	e00d      	b.n	8006f36 <__sflush_r+0xae>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	47b0      	blx	r6
 8006f20:	4602      	mov	r2, r0
 8006f22:	1c50      	adds	r0, r2, #1
 8006f24:	d1c9      	bne.n	8006eba <__sflush_r+0x32>
 8006f26:	682b      	ldr	r3, [r5, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d0c6      	beq.n	8006eba <__sflush_r+0x32>
 8006f2c:	2b1d      	cmp	r3, #29
 8006f2e:	d001      	beq.n	8006f34 <__sflush_r+0xac>
 8006f30:	2b16      	cmp	r3, #22
 8006f32:	d11e      	bne.n	8006f72 <__sflush_r+0xea>
 8006f34:	602f      	str	r7, [r5, #0]
 8006f36:	2000      	movs	r0, #0
 8006f38:	e022      	b.n	8006f80 <__sflush_r+0xf8>
 8006f3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f3e:	b21b      	sxth	r3, r3
 8006f40:	e01b      	b.n	8006f7a <__sflush_r+0xf2>
 8006f42:	690f      	ldr	r7, [r1, #16]
 8006f44:	2f00      	cmp	r7, #0
 8006f46:	d0f6      	beq.n	8006f36 <__sflush_r+0xae>
 8006f48:	0793      	lsls	r3, r2, #30
 8006f4a:	680e      	ldr	r6, [r1, #0]
 8006f4c:	bf08      	it	eq
 8006f4e:	694b      	ldreq	r3, [r1, #20]
 8006f50:	600f      	str	r7, [r1, #0]
 8006f52:	bf18      	it	ne
 8006f54:	2300      	movne	r3, #0
 8006f56:	eba6 0807 	sub.w	r8, r6, r7
 8006f5a:	608b      	str	r3, [r1, #8]
 8006f5c:	f1b8 0f00 	cmp.w	r8, #0
 8006f60:	dde9      	ble.n	8006f36 <__sflush_r+0xae>
 8006f62:	6a21      	ldr	r1, [r4, #32]
 8006f64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006f66:	4643      	mov	r3, r8
 8006f68:	463a      	mov	r2, r7
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	47b0      	blx	r6
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	dc08      	bgt.n	8006f84 <__sflush_r+0xfc>
 8006f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f7a:	81a3      	strh	r3, [r4, #12]
 8006f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f84:	4407      	add	r7, r0
 8006f86:	eba8 0800 	sub.w	r8, r8, r0
 8006f8a:	e7e7      	b.n	8006f5c <__sflush_r+0xd4>
 8006f8c:	dfbffffe 	.word	0xdfbffffe

08006f90 <_fflush_r>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	690b      	ldr	r3, [r1, #16]
 8006f94:	4605      	mov	r5, r0
 8006f96:	460c      	mov	r4, r1
 8006f98:	b913      	cbnz	r3, 8006fa0 <_fflush_r+0x10>
 8006f9a:	2500      	movs	r5, #0
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	bd38      	pop	{r3, r4, r5, pc}
 8006fa0:	b118      	cbz	r0, 8006faa <_fflush_r+0x1a>
 8006fa2:	6a03      	ldr	r3, [r0, #32]
 8006fa4:	b90b      	cbnz	r3, 8006faa <_fflush_r+0x1a>
 8006fa6:	f7ff fc2b 	bl	8006800 <__sinit>
 8006faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0f3      	beq.n	8006f9a <_fflush_r+0xa>
 8006fb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006fb4:	07d0      	lsls	r0, r2, #31
 8006fb6:	d404      	bmi.n	8006fc2 <_fflush_r+0x32>
 8006fb8:	0599      	lsls	r1, r3, #22
 8006fba:	d402      	bmi.n	8006fc2 <_fflush_r+0x32>
 8006fbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fbe:	f7ff fe5a 	bl	8006c76 <__retarget_lock_acquire_recursive>
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	4621      	mov	r1, r4
 8006fc6:	f7ff ff5f 	bl	8006e88 <__sflush_r>
 8006fca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fcc:	07da      	lsls	r2, r3, #31
 8006fce:	4605      	mov	r5, r0
 8006fd0:	d4e4      	bmi.n	8006f9c <_fflush_r+0xc>
 8006fd2:	89a3      	ldrh	r3, [r4, #12]
 8006fd4:	059b      	lsls	r3, r3, #22
 8006fd6:	d4e1      	bmi.n	8006f9c <_fflush_r+0xc>
 8006fd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fda:	f7ff fe4d 	bl	8006c78 <__retarget_lock_release_recursive>
 8006fde:	e7dd      	b.n	8006f9c <_fflush_r+0xc>

08006fe0 <__swhatbuf_r>:
 8006fe0:	b570      	push	{r4, r5, r6, lr}
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe8:	2900      	cmp	r1, #0
 8006fea:	b096      	sub	sp, #88	@ 0x58
 8006fec:	4615      	mov	r5, r2
 8006fee:	461e      	mov	r6, r3
 8006ff0:	da0d      	bge.n	800700e <__swhatbuf_r+0x2e>
 8006ff2:	89a3      	ldrh	r3, [r4, #12]
 8006ff4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006ff8:	f04f 0100 	mov.w	r1, #0
 8006ffc:	bf14      	ite	ne
 8006ffe:	2340      	movne	r3, #64	@ 0x40
 8007000:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007004:	2000      	movs	r0, #0
 8007006:	6031      	str	r1, [r6, #0]
 8007008:	602b      	str	r3, [r5, #0]
 800700a:	b016      	add	sp, #88	@ 0x58
 800700c:	bd70      	pop	{r4, r5, r6, pc}
 800700e:	466a      	mov	r2, sp
 8007010:	f000 f848 	bl	80070a4 <_fstat_r>
 8007014:	2800      	cmp	r0, #0
 8007016:	dbec      	blt.n	8006ff2 <__swhatbuf_r+0x12>
 8007018:	9901      	ldr	r1, [sp, #4]
 800701a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800701e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007022:	4259      	negs	r1, r3
 8007024:	4159      	adcs	r1, r3
 8007026:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800702a:	e7eb      	b.n	8007004 <__swhatbuf_r+0x24>

0800702c <__smakebuf_r>:
 800702c:	898b      	ldrh	r3, [r1, #12]
 800702e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007030:	079d      	lsls	r5, r3, #30
 8007032:	4606      	mov	r6, r0
 8007034:	460c      	mov	r4, r1
 8007036:	d507      	bpl.n	8007048 <__smakebuf_r+0x1c>
 8007038:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	6123      	str	r3, [r4, #16]
 8007040:	2301      	movs	r3, #1
 8007042:	6163      	str	r3, [r4, #20]
 8007044:	b003      	add	sp, #12
 8007046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007048:	ab01      	add	r3, sp, #4
 800704a:	466a      	mov	r2, sp
 800704c:	f7ff ffc8 	bl	8006fe0 <__swhatbuf_r>
 8007050:	9f00      	ldr	r7, [sp, #0]
 8007052:	4605      	mov	r5, r0
 8007054:	4639      	mov	r1, r7
 8007056:	4630      	mov	r0, r6
 8007058:	f7ff fe8a 	bl	8006d70 <_malloc_r>
 800705c:	b948      	cbnz	r0, 8007072 <__smakebuf_r+0x46>
 800705e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007062:	059a      	lsls	r2, r3, #22
 8007064:	d4ee      	bmi.n	8007044 <__smakebuf_r+0x18>
 8007066:	f023 0303 	bic.w	r3, r3, #3
 800706a:	f043 0302 	orr.w	r3, r3, #2
 800706e:	81a3      	strh	r3, [r4, #12]
 8007070:	e7e2      	b.n	8007038 <__smakebuf_r+0xc>
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	6020      	str	r0, [r4, #0]
 8007076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800707a:	81a3      	strh	r3, [r4, #12]
 800707c:	9b01      	ldr	r3, [sp, #4]
 800707e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007082:	b15b      	cbz	r3, 800709c <__smakebuf_r+0x70>
 8007084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007088:	4630      	mov	r0, r6
 800708a:	f000 f81d 	bl	80070c8 <_isatty_r>
 800708e:	b128      	cbz	r0, 800709c <__smakebuf_r+0x70>
 8007090:	89a3      	ldrh	r3, [r4, #12]
 8007092:	f023 0303 	bic.w	r3, r3, #3
 8007096:	f043 0301 	orr.w	r3, r3, #1
 800709a:	81a3      	strh	r3, [r4, #12]
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	431d      	orrs	r5, r3
 80070a0:	81a5      	strh	r5, [r4, #12]
 80070a2:	e7cf      	b.n	8007044 <__smakebuf_r+0x18>

080070a4 <_fstat_r>:
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	4d07      	ldr	r5, [pc, #28]	@ (80070c4 <_fstat_r+0x20>)
 80070a8:	2300      	movs	r3, #0
 80070aa:	4604      	mov	r4, r0
 80070ac:	4608      	mov	r0, r1
 80070ae:	4611      	mov	r1, r2
 80070b0:	602b      	str	r3, [r5, #0]
 80070b2:	f7f9 fc69 	bl	8000988 <_fstat>
 80070b6:	1c43      	adds	r3, r0, #1
 80070b8:	d102      	bne.n	80070c0 <_fstat_r+0x1c>
 80070ba:	682b      	ldr	r3, [r5, #0]
 80070bc:	b103      	cbz	r3, 80070c0 <_fstat_r+0x1c>
 80070be:	6023      	str	r3, [r4, #0]
 80070c0:	bd38      	pop	{r3, r4, r5, pc}
 80070c2:	bf00      	nop
 80070c4:	20004d0c 	.word	0x20004d0c

080070c8 <_isatty_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4d06      	ldr	r5, [pc, #24]	@ (80070e4 <_isatty_r+0x1c>)
 80070cc:	2300      	movs	r3, #0
 80070ce:	4604      	mov	r4, r0
 80070d0:	4608      	mov	r0, r1
 80070d2:	602b      	str	r3, [r5, #0]
 80070d4:	f7f9 fc68 	bl	80009a8 <_isatty>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d102      	bne.n	80070e2 <_isatty_r+0x1a>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	b103      	cbz	r3, 80070e2 <_isatty_r+0x1a>
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	20004d0c 	.word	0x20004d0c

080070e8 <_sbrk_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4d06      	ldr	r5, [pc, #24]	@ (8007104 <_sbrk_r+0x1c>)
 80070ec:	2300      	movs	r3, #0
 80070ee:	4604      	mov	r4, r0
 80070f0:	4608      	mov	r0, r1
 80070f2:	602b      	str	r3, [r5, #0]
 80070f4:	f7f9 fc70 	bl	80009d8 <_sbrk>
 80070f8:	1c43      	adds	r3, r0, #1
 80070fa:	d102      	bne.n	8007102 <_sbrk_r+0x1a>
 80070fc:	682b      	ldr	r3, [r5, #0]
 80070fe:	b103      	cbz	r3, 8007102 <_sbrk_r+0x1a>
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	bd38      	pop	{r3, r4, r5, pc}
 8007104:	20004d0c 	.word	0x20004d0c

08007108 <_init>:
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	bf00      	nop
 800710c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800710e:	bc08      	pop	{r3}
 8007110:	469e      	mov	lr, r3
 8007112:	4770      	bx	lr

08007114 <_fini>:
 8007114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007116:	bf00      	nop
 8007118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711a:	bc08      	pop	{r3}
 800711c:	469e      	mov	lr, r3
 800711e:	4770      	bx	lr
